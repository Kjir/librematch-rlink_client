/**
 * Relic Link API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.11.01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://aoe-api.reliclink.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DefaultApiApiKeys {
}

export class DefaultApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders: any = {};
    protected _useQuerystring: boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        (this.authentications as any)[DefaultApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @param joinPolicies 
     * @param name 
     * @param tags 
     * @param start 
     * @param count 
     * @param title 
     */
    public async communityClanFind(joinPolicies: number, name: string, tags: string, start: number, count: number, title?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/clan/find';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'joinPolicies' is not null or undefined
        if (joinPolicies === null || joinPolicies === undefined) {
            throw new Error('Required parameter joinPolicies was null or undefined when calling communityClanFind.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling communityClanFind.');
        }

        // verify required parameter 'tags' is not null or undefined
        if (tags === null || tags === undefined) {
            throw new Error('Required parameter tags was null or undefined when calling communityClanFind.');
        }

        // verify required parameter 'start' is not null or undefined
        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling communityClanFind.');
        }

        // verify required parameter 'count' is not null or undefined
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling communityClanFind.');
        }

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (joinPolicies !== undefined) {
            localVarQueryParameters['joinPolicies'] = ObjectSerializer.serialize(joinPolicies, "number");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (tags !== undefined) {
            localVarQueryParameters['tags'] = ObjectSerializer.serialize(tags, "string");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     */
    public async communityFindAdvertisements(title?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/advertisement/findAdvertisements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     * @param profileids 
     */
    public async communityGetAchievements(title?: string, profileids?: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/achievement/getAchievements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (profileids !== undefined) {
            localVarQueryParameters['profileids'] = ObjectSerializer.serialize(profileids, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     */
    public async communityGetAvailableAchievements(title?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/achievement/getAvailableAchievements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     */
    public async communityGetAvailableCommunityEvents(title?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/CommunityEvent/getAvailableCommunityEvents';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     */
    public async communityGetAvailableLeaderboards(title?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/leaderboard/getAvailableLeaderboards';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     * @param profileNames 
     */
    public async communityGetAvatarStatForProfile(title?: string, profileNames?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/leaderboard/GetAvatarStatForProfile';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (profileNames !== undefined) {
            localVarQueryParameters['profile_names'] = ObjectSerializer.serialize(profileNames, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param name 
     * @param title 
     */
    public async communityGetClanInfoFull(name: string, title?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/clan/getClanInfoFull';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling communityGetClanInfoFull.');
        }

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     * @param profileids 
     */
    public async communityGetInventoryByProfileIds(title?: string, profileids?: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/item/getInventoryByProfileIDs';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (profileids !== undefined) {
            localVarQueryParameters['profileids'] = ObjectSerializer.serialize(profileids, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param start 
     * @param count 
     * @param title 
     * @param leaderboardId 
     * @param sortBy 
     * @param platform 
     */
    public async communityGetLeaderboard2(start: number, count: number, title?: string, leaderboardId?: number, sortBy?: number, platform?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/leaderboard/getLeaderboard2';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'start' is not null or undefined
        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling communityGetLeaderboard2.');
        }

        // verify required parameter 'count' is not null or undefined
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling communityGetLeaderboard2.');
        }

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (leaderboardId !== undefined) {
            localVarQueryParameters['leaderboard_id'] = ObjectSerializer.serialize(leaderboardId, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (sortBy !== undefined) {
            localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(sortBy, "number");
        }

        if (platform !== undefined) {
            localVarQueryParameters['platform'] = ObjectSerializer.serialize(platform, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     * @param profileIds 
     * @param profileNames 
     * @param aliases 
     */
    public async communityGetPersonalStat(title?: string, profileIds?: string, profileNames?: string, aliases?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/leaderboard/GetPersonalStat';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "string");
        }

        if (profileNames !== undefined) {
            localVarQueryParameters['profile_names'] = ObjectSerializer.serialize(profileNames, "string");
        }

        if (aliases !== undefined) {
            localVarQueryParameters['aliases'] = ObjectSerializer.serialize(aliases, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     * @param profileIds 
     * @param profileNames 
     */
    public async communityGetRecentMatchHistory(title?: string, profileIds?: string, profileNames?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/leaderboard/getRecentMatchHistory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "string");
        }

        if (profileNames !== undefined) {
            localVarQueryParameters['profile_names'] = ObjectSerializer.serialize(profileNames, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param title 
     */
    public async communityNews(title?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/news';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     * @param title 
     * @param profileIds 
     * @param profileNames 
     */
    public async communityProxySteamUserRequest(request?: string, title?: string, profileIds?: string, profileNames?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/community/external/proxysteamuserrequest';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        if (request !== undefined) {
            localVarQueryParameters['request'] = ObjectSerializer.serialize(request, "string");
        }

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "string");
        }

        if (profileNames !== undefined) {
            localVarQueryParameters['profileNames'] = ObjectSerializer.serialize(profileNames, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param name 
     * @param sessionID 
     */
    public async gameAccountFindProfiles(callNum: number, connectId: string, lastCallTime: string, name: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/account/FindProfiles';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAccountFindProfiles.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAccountFindProfiles.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAccountFindProfiles.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling gameAccountFindProfiles.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAccountFindProfiles.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param platformIDs 
     */
    public async gameAccountFindProfilesByPlatformId(callNum: number, connectId: string, lastCallTime: string, sessionID: string, platformIDs: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/account/FindProfilesByPlatformID';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAccountFindProfilesByPlatformId.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAccountFindProfilesByPlatformId.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAccountFindProfilesByPlatformId.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAccountFindProfilesByPlatformId.');
        }

        // verify required parameter 'platformIDs' is not null or undefined
        if (platformIDs === null || platformIDs === undefined) {
            throw new Error('Required parameter platformIDs was null or undefined when calling gameAccountFindProfilesByPlatformId.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (platformIDs !== undefined) {
            localVarQueryParameters['platformIDs'] = ObjectSerializer.serialize(platformIDs, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param profileIds 
     * @param sessionID 
     */
    public async gameAccountGetProfileName(callNum: number, connectId: string, lastCallTime: string, profileIds: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/account/getProfileName';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAccountGetProfileName.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAccountGetProfileName.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAccountGetProfileName.');
        }

        // verify required parameter 'profileIds' is not null or undefined
        if (profileIds === null || profileIds === undefined) {
            throw new Error('Required parameter profileIds was null or undefined when calling gameAccountGetProfileName.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAccountGetProfileName.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param profileId 
     * @param propertyId 
     */
    public async gameAccountGetProfileProperty(callNum: number, connectId: string, lastCallTime: string, sessionID: string, profileId: number, propertyId: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/account/getProfileProperty';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAccountGetProfileProperty.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAccountGetProfileProperty.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAccountGetProfileProperty.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAccountGetProfileProperty.');
        }

        // verify required parameter 'profileId' is not null or undefined
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling gameAccountGetProfileProperty.');
        }

        // verify required parameter 'propertyId' is not null or undefined
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling gameAccountGetProfileProperty.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (profileId !== undefined) {
            localVarQueryParameters['profile_id'] = ObjectSerializer.serialize(profileId, "number");
        }

        if (propertyId !== undefined) {
            localVarQueryParameters['property_id'] = ObjectSerializer.serialize(propertyId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param metaData 
     */
    public async gameAccountSetAvatarMetadata(callNum: number, connectId: string, lastCallTime: string, sessionID: string, metaData: object, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/account/setAvatarMetadata';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAccountSetAvatarMetadata.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAccountSetAvatarMetadata.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAccountSetAvatarMetadata.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAccountSetAvatarMetadata.');
        }

        // verify required parameter 'metaData' is not null or undefined
        if (metaData === null || metaData === undefined) {
            throw new Error('Required parameter metaData was null or undefined when calling gameAccountSetAvatarMetadata.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (metaData !== undefined) {
            localVarQueryParameters['metaData'] = ObjectSerializer.serialize(metaData, "object");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param title 
     * @param language 
     */
    public async gameAccountSetLanguage(callNum: number, connectId: string, lastCallTime: string, sessionID: string, title?: string, language?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/account/setLanguage';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAccountSetLanguage.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAccountSetLanguage.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAccountSetLanguage.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAccountSetLanguage.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        if (language !== undefined) {
            localVarQueryParameters['language'] = ObjectSerializer.serialize(language, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param profileIDs 
     */
    public async gameAchievementGetAchievements(callNum: number, connectId: string, lastCallTime: string, sessionID: string, profileIDs: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Achievement/getAchievements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAchievementGetAchievements.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAchievementGetAchievements.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAchievementGetAchievements.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAchievementGetAchievements.');
        }

        // verify required parameter 'profileIDs' is not null or undefined
        if (profileIDs === null || profileIDs === undefined) {
            throw new Error('Required parameter profileIDs was null or undefined when calling gameAchievementGetAchievements.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (profileIDs !== undefined) {
            localVarQueryParameters['profileIDs'] = ObjectSerializer.serialize(profileIDs, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * No authentication needed
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param signature 
     */
    public async gameAchievementGetAvailableAchievements(callNum: number, connectId: string, lastCallTime: string, sessionID: string, signature: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Achievement/getAvailableAchievements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAchievementGetAvailableAchievements.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAchievementGetAvailableAchievements.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAchievementGetAvailableAchievements.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAchievementGetAvailableAchievements.');
        }

        // verify required parameter 'signature' is not null or undefined
        if (signature === null || signature === undefined) {
            throw new Error('Required parameter signature was null or undefined when calling gameAchievementGetAvailableAchievements.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (signature !== undefined) {
            localVarQueryParameters['signature'] = ObjectSerializer.serialize(signature, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param accountType 
     * @param auth 
     */
    public async gameAchievementSyncStats(callNum: number, connectId: string, lastCallTime: string, sessionID: string, accountType: string, auth: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/achievement/syncStats';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAchievementSyncStats.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAchievementSyncStats.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAchievementSyncStats.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAchievementSyncStats.');
        }

        // verify required parameter 'accountType' is not null or undefined
        if (accountType === null || accountType === undefined) {
            throw new Error('Required parameter accountType was null or undefined when calling gameAchievementSyncStats.');
        }

        // verify required parameter 'auth' is not null or undefined
        if (auth === null || auth === undefined) {
            throw new Error('Required parameter auth was null or undefined when calling gameAchievementSyncStats.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (accountType !== undefined) {
            localVarQueryParameters['accountType'] = ObjectSerializer.serialize(accountType, "string");
        }

        if (auth !== undefined) {
            localVarQueryParameters['auth'] = ObjectSerializer.serialize(auth, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param appBinaryChecksum 
     * @param callNum 
     * @param connectId 
     * @param dataChecksum 
     * @param lastCallTime 
     * @param matchTypeId 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param profileIds 
     * @param raceIds 
     * @param sessionID 
     * @param statGroupIds 
     * @param versionFlags 
     */
    public async gameAdvertisementFindAdvertisements(appBinaryChecksum: number, callNum: number, connectId: string, dataChecksum: number, lastCallTime: string, matchTypeId: number, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, profileIds: number, raceIds: number, sessionID: string, statGroupIds: number, versionFlags: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/findAdvertisements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'appBinaryChecksum' is not null or undefined
        if (appBinaryChecksum === null || appBinaryChecksum === undefined) {
            throw new Error('Required parameter appBinaryChecksum was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'dataChecksum' is not null or undefined
        if (dataChecksum === null || dataChecksum === undefined) {
            throw new Error('Required parameter dataChecksum was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'matchTypeId' is not null or undefined
        if (matchTypeId === null || matchTypeId === undefined) {
            throw new Error('Required parameter matchTypeId was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'profileIds' is not null or undefined
        if (profileIds === null || profileIds === undefined) {
            throw new Error('Required parameter profileIds was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'raceIds' is not null or undefined
        if (raceIds === null || raceIds === undefined) {
            throw new Error('Required parameter raceIds was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'statGroupIds' is not null or undefined
        if (statGroupIds === null || statGroupIds === undefined) {
            throw new Error('Required parameter statGroupIds was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAdvertisementFindAdvertisements.');
        }

        if (appBinaryChecksum !== undefined) {
            localVarQueryParameters['appBinaryChecksum'] = ObjectSerializer.serialize(appBinaryChecksum, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (dataChecksum !== undefined) {
            localVarQueryParameters['dataChecksum'] = ObjectSerializer.serialize(dataChecksum, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchTypeId !== undefined) {
            localVarQueryParameters['matchType_id'] = ObjectSerializer.serialize(matchTypeId, "number");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "number");
        }

        if (raceIds !== undefined) {
            localVarQueryParameters['race_ids'] = ObjectSerializer.serialize(raceIds, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (statGroupIds !== undefined) {
            localVarQueryParameters['statGroup_ids'] = ObjectSerializer.serialize(statGroupIds, "number");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param appBinaryChecksum 
     * @param count 
     * @param dataChecksum 
     * @param desc 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param observerGroupID 
     * @param sortOrder 
     * @param start 
     * @param versionFlags 
     */
    public async gameAdvertisementFindObservableAdvertisementsGet(callNum: number, connectId: string, lastCallTime: string, sessionID: string, appBinaryChecksum: number, count: number, dataChecksum: number, desc: number, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, observerGroupID: number, sortOrder: number, start: number, versionFlags: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/findObservableAdvertisements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'appBinaryChecksum' is not null or undefined
        if (appBinaryChecksum === null || appBinaryChecksum === undefined) {
            throw new Error('Required parameter appBinaryChecksum was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'count' is not null or undefined
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'dataChecksum' is not null or undefined
        if (dataChecksum === null || dataChecksum === undefined) {
            throw new Error('Required parameter dataChecksum was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'desc' is not null or undefined
        if (desc === null || desc === undefined) {
            throw new Error('Required parameter desc was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'observerGroupID' is not null or undefined
        if (observerGroupID === null || observerGroupID === undefined) {
            throw new Error('Required parameter observerGroupID was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'sortOrder' is not null or undefined
        if (sortOrder === null || sortOrder === undefined) {
            throw new Error('Required parameter sortOrder was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'start' is not null or undefined
        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAdvertisementFindObservableAdvertisementsGet.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (appBinaryChecksum !== undefined) {
            localVarQueryParameters['appBinaryChecksum'] = ObjectSerializer.serialize(appBinaryChecksum, "number");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (dataChecksum !== undefined) {
            localVarQueryParameters['dataChecksum'] = ObjectSerializer.serialize(dataChecksum, "number");
        }

        if (desc !== undefined) {
            localVarQueryParameters['desc'] = ObjectSerializer.serialize(desc, "number");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (observerGroupID !== undefined) {
            localVarQueryParameters['observerGroupID'] = ObjectSerializer.serialize(observerGroupID, "number");
        }

        if (sortOrder !== undefined) {
            localVarQueryParameters['sortOrder'] = ObjectSerializer.serialize(sortOrder, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param appBinaryChecksum 
     * @param count 
     * @param dataChecksum 
     * @param desc 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param observerGroupID 
     * @param sortOrder 
     * @param start 
     * @param versionFlags 
     */
    public async gameAdvertisementFindObservableAdvertisementsPost(callNum: number, connectId: string, lastCallTime: string, sessionID: string, appBinaryChecksum: number, count: number, dataChecksum: number, desc: number, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, observerGroupID: number, sortOrder: number, start: number, versionFlags: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/findObservableAdvertisements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'appBinaryChecksum' is not null or undefined
        if (appBinaryChecksum === null || appBinaryChecksum === undefined) {
            throw new Error('Required parameter appBinaryChecksum was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'count' is not null or undefined
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'dataChecksum' is not null or undefined
        if (dataChecksum === null || dataChecksum === undefined) {
            throw new Error('Required parameter dataChecksum was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'desc' is not null or undefined
        if (desc === null || desc === undefined) {
            throw new Error('Required parameter desc was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'observerGroupID' is not null or undefined
        if (observerGroupID === null || observerGroupID === undefined) {
            throw new Error('Required parameter observerGroupID was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'sortOrder' is not null or undefined
        if (sortOrder === null || sortOrder === undefined) {
            throw new Error('Required parameter sortOrder was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'start' is not null or undefined
        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAdvertisementFindObservableAdvertisementsPost.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (appBinaryChecksum !== undefined) {
            localVarQueryParameters['appBinaryChecksum'] = ObjectSerializer.serialize(appBinaryChecksum, "number");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (dataChecksum !== undefined) {
            localVarQueryParameters['dataChecksum'] = ObjectSerializer.serialize(dataChecksum, "number");
        }

        if (desc !== undefined) {
            localVarQueryParameters['desc'] = ObjectSerializer.serialize(desc, "number");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (observerGroupID !== undefined) {
            localVarQueryParameters['observerGroupID'] = ObjectSerializer.serialize(observerGroupID, "number");
        }

        if (sortOrder !== undefined) {
            localVarQueryParameters['sortOrder'] = ObjectSerializer.serialize(sortOrder, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param matchIds 
     * @param sessionID 
     */
    public async gameAdvertisementGetAdvertisements(callNum: number, connectId: string, lastCallTime: string, matchIds: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/getAdvertisements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementGetAdvertisements.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementGetAdvertisements.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementGetAdvertisements.');
        }

        // verify required parameter 'matchIds' is not null or undefined
        if (matchIds === null || matchIds === undefined) {
            throw new Error('Required parameter matchIds was null or undefined when calling gameAdvertisementGetAdvertisements.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementGetAdvertisements.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchIds !== undefined) {
            localVarQueryParameters['match_ids'] = ObjectSerializer.serialize(matchIds, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param appBinaryChecksum 
     * @param callNum 
     * @param connectId 
     * @param dataChecksum 
     * @param lanServerGuids 
     * @param lastCallTime 
     * @param matchTypeId 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param sessionID 
     * @param versionFlags 
     */
    public async gameAdvertisementGetLanAdvertisements(appBinaryChecksum: number, callNum: number, connectId: string, dataChecksum: number, lanServerGuids: string, lastCallTime: string, matchTypeId: number, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, sessionID: string, versionFlags: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/getLanAdvertisements';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'appBinaryChecksum' is not null or undefined
        if (appBinaryChecksum === null || appBinaryChecksum === undefined) {
            throw new Error('Required parameter appBinaryChecksum was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'dataChecksum' is not null or undefined
        if (dataChecksum === null || dataChecksum === undefined) {
            throw new Error('Required parameter dataChecksum was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'lanServerGuids' is not null or undefined
        if (lanServerGuids === null || lanServerGuids === undefined) {
            throw new Error('Required parameter lanServerGuids was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'matchTypeId' is not null or undefined
        if (matchTypeId === null || matchTypeId === undefined) {
            throw new Error('Required parameter matchTypeId was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAdvertisementGetLanAdvertisements.');
        }

        if (appBinaryChecksum !== undefined) {
            localVarQueryParameters['appBinaryChecksum'] = ObjectSerializer.serialize(appBinaryChecksum, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (dataChecksum !== undefined) {
            localVarQueryParameters['dataChecksum'] = ObjectSerializer.serialize(dataChecksum, "number");
        }

        if (lanServerGuids !== undefined) {
            localVarQueryParameters['lanServerGuids'] = ObjectSerializer.serialize(lanServerGuids, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchTypeId !== undefined) {
            localVarQueryParameters['matchType_id'] = ObjectSerializer.serialize(matchTypeId, "number");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param advertisementid 
     * @param appBinaryChecksum 
     * @param automatchPollId 
     * @param callNum 
     * @param connectId 
     * @param dataChecksum 
     * @param description Lobby title
     * @param hostid 
     * @param isObservable 
     * @param lastCallTime 
     * @param mapname 
     * @param matchtype 
     * @param maxplayers 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param observerDelay 
     * @param observerPassword 
     * @param options 
     * @param party 
     * @param password 
     * @param passworded 
     * @param race 
     * @param relayRegion 
     * @param serviceType 
     * @param sessionID 
     * @param slotinfo zlib compressed
     * @param state 
     * @param statgroup 
     * @param team 
     * @param versionFlags 
     * @param visible 
     */
    public async gameAdvertisementHost(advertisementid: number, appBinaryChecksum: number, automatchPollId: number, callNum: number, connectId: string, dataChecksum: number, description: string, hostid: number, isObservable: number, lastCallTime: string, mapname: string, matchtype: number, maxplayers: number, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, observerDelay: number, observerPassword: string, options: string, party: number, password: string, passworded: number, race: number, relayRegion: string, serviceType: number, sessionID: string, slotinfo: string, state: number, statgroup: number, team: number, versionFlags: number, visible: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/host';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'advertisementid' is not null or undefined
        if (advertisementid === null || advertisementid === undefined) {
            throw new Error('Required parameter advertisementid was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'appBinaryChecksum' is not null or undefined
        if (appBinaryChecksum === null || appBinaryChecksum === undefined) {
            throw new Error('Required parameter appBinaryChecksum was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'automatchPollId' is not null or undefined
        if (automatchPollId === null || automatchPollId === undefined) {
            throw new Error('Required parameter automatchPollId was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'dataChecksum' is not null or undefined
        if (dataChecksum === null || dataChecksum === undefined) {
            throw new Error('Required parameter dataChecksum was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'description' is not null or undefined
        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'hostid' is not null or undefined
        if (hostid === null || hostid === undefined) {
            throw new Error('Required parameter hostid was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'isObservable' is not null or undefined
        if (isObservable === null || isObservable === undefined) {
            throw new Error('Required parameter isObservable was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'mapname' is not null or undefined
        if (mapname === null || mapname === undefined) {
            throw new Error('Required parameter mapname was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'matchtype' is not null or undefined
        if (matchtype === null || matchtype === undefined) {
            throw new Error('Required parameter matchtype was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'maxplayers' is not null or undefined
        if (maxplayers === null || maxplayers === undefined) {
            throw new Error('Required parameter maxplayers was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'observerDelay' is not null or undefined
        if (observerDelay === null || observerDelay === undefined) {
            throw new Error('Required parameter observerDelay was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'observerPassword' is not null or undefined
        if (observerPassword === null || observerPassword === undefined) {
            throw new Error('Required parameter observerPassword was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'options' is not null or undefined
        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'party' is not null or undefined
        if (party === null || party === undefined) {
            throw new Error('Required parameter party was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'password' is not null or undefined
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'passworded' is not null or undefined
        if (passworded === null || passworded === undefined) {
            throw new Error('Required parameter passworded was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'race' is not null or undefined
        if (race === null || race === undefined) {
            throw new Error('Required parameter race was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'relayRegion' is not null or undefined
        if (relayRegion === null || relayRegion === undefined) {
            throw new Error('Required parameter relayRegion was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'serviceType' is not null or undefined
        if (serviceType === null || serviceType === undefined) {
            throw new Error('Required parameter serviceType was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'slotinfo' is not null or undefined
        if (slotinfo === null || slotinfo === undefined) {
            throw new Error('Required parameter slotinfo was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'state' is not null or undefined
        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'statgroup' is not null or undefined
        if (statgroup === null || statgroup === undefined) {
            throw new Error('Required parameter statgroup was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'team' is not null or undefined
        if (team === null || team === undefined) {
            throw new Error('Required parameter team was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAdvertisementHost.');
        }

        // verify required parameter 'visible' is not null or undefined
        if (visible === null || visible === undefined) {
            throw new Error('Required parameter visible was null or undefined when calling gameAdvertisementHost.');
        }

        if (advertisementid !== undefined) {
            localVarQueryParameters['advertisementid'] = ObjectSerializer.serialize(advertisementid, "number");
        }

        if (appBinaryChecksum !== undefined) {
            localVarQueryParameters['appBinaryChecksum'] = ObjectSerializer.serialize(appBinaryChecksum, "number");
        }

        if (automatchPollId !== undefined) {
            localVarQueryParameters['automatchPoll_id'] = ObjectSerializer.serialize(automatchPollId, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (dataChecksum !== undefined) {
            localVarQueryParameters['dataChecksum'] = ObjectSerializer.serialize(dataChecksum, "number");
        }

        if (description !== undefined) {
            localVarQueryParameters['description'] = ObjectSerializer.serialize(description, "string");
        }

        if (hostid !== undefined) {
            localVarQueryParameters['hostid'] = ObjectSerializer.serialize(hostid, "number");
        }

        if (isObservable !== undefined) {
            localVarQueryParameters['isObservable'] = ObjectSerializer.serialize(isObservable, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (mapname !== undefined) {
            localVarQueryParameters['mapname'] = ObjectSerializer.serialize(mapname, "string");
        }

        if (matchtype !== undefined) {
            localVarQueryParameters['matchtype'] = ObjectSerializer.serialize(matchtype, "number");
        }

        if (maxplayers !== undefined) {
            localVarQueryParameters['maxplayers'] = ObjectSerializer.serialize(maxplayers, "number");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (observerDelay !== undefined) {
            localVarQueryParameters['observerDelay'] = ObjectSerializer.serialize(observerDelay, "number");
        }

        if (observerPassword !== undefined) {
            localVarQueryParameters['observerPassword'] = ObjectSerializer.serialize(observerPassword, "string");
        }

        if (options !== undefined) {
            localVarQueryParameters['options'] = ObjectSerializer.serialize(options, "string");
        }

        if (party !== undefined) {
            localVarQueryParameters['party'] = ObjectSerializer.serialize(party, "number");
        }

        if (password !== undefined) {
            localVarQueryParameters['password'] = ObjectSerializer.serialize(password, "string");
        }

        if (passworded !== undefined) {
            localVarQueryParameters['passworded'] = ObjectSerializer.serialize(passworded, "number");
        }

        if (race !== undefined) {
            localVarQueryParameters['race'] = ObjectSerializer.serialize(race, "number");
        }

        if (relayRegion !== undefined) {
            localVarQueryParameters['relayRegion'] = ObjectSerializer.serialize(relayRegion, "string");
        }

        if (serviceType !== undefined) {
            localVarQueryParameters['serviceType'] = ObjectSerializer.serialize(serviceType, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (slotinfo !== undefined) {
            localVarQueryParameters['slotinfo'] = ObjectSerializer.serialize(slotinfo, "string");
        }

        if (state !== undefined) {
            localVarQueryParameters['state'] = ObjectSerializer.serialize(state, "number");
        }

        if (statgroup !== undefined) {
            localVarQueryParameters['statgroup'] = ObjectSerializer.serialize(statgroup, "number");
        }

        if (team !== undefined) {
            localVarQueryParameters['team'] = ObjectSerializer.serialize(team, "number");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        if (visible !== undefined) {
            localVarQueryParameters['visible'] = ObjectSerializer.serialize(visible, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param advertisementid 
     * @param appBinaryChecksum 
     * @param callNum 
     * @param connectId 
     * @param dataChecksum 
     * @param lastCallTime 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param party 
     * @param password 
     * @param race 
     * @param sessionID 
     * @param statgroup 
     * @param team 
     * @param versionFlags 
     */
    public async gameAdvertisementJoin(advertisementid: number, appBinaryChecksum: number, callNum: number, connectId: string, dataChecksum: number, lastCallTime: string, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, party: number, password: string, race: number, sessionID: string, statgroup: number, team: number, versionFlags: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/join';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'advertisementid' is not null or undefined
        if (advertisementid === null || advertisementid === undefined) {
            throw new Error('Required parameter advertisementid was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'appBinaryChecksum' is not null or undefined
        if (appBinaryChecksum === null || appBinaryChecksum === undefined) {
            throw new Error('Required parameter appBinaryChecksum was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'dataChecksum' is not null or undefined
        if (dataChecksum === null || dataChecksum === undefined) {
            throw new Error('Required parameter dataChecksum was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'party' is not null or undefined
        if (party === null || party === undefined) {
            throw new Error('Required parameter party was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'password' is not null or undefined
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'race' is not null or undefined
        if (race === null || race === undefined) {
            throw new Error('Required parameter race was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'statgroup' is not null or undefined
        if (statgroup === null || statgroup === undefined) {
            throw new Error('Required parameter statgroup was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'team' is not null or undefined
        if (team === null || team === undefined) {
            throw new Error('Required parameter team was null or undefined when calling gameAdvertisementJoin.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAdvertisementJoin.');
        }

        if (advertisementid !== undefined) {
            localVarQueryParameters['advertisementid'] = ObjectSerializer.serialize(advertisementid, "number");
        }

        if (appBinaryChecksum !== undefined) {
            localVarQueryParameters['appBinaryChecksum'] = ObjectSerializer.serialize(appBinaryChecksum, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (dataChecksum !== undefined) {
            localVarQueryParameters['dataChecksum'] = ObjectSerializer.serialize(dataChecksum, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (party !== undefined) {
            localVarQueryParameters['party'] = ObjectSerializer.serialize(party, "number");
        }

        if (password !== undefined) {
            localVarQueryParameters['password'] = ObjectSerializer.serialize(password, "string");
        }

        if (race !== undefined) {
            localVarQueryParameters['race'] = ObjectSerializer.serialize(race, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (statgroup !== undefined) {
            localVarQueryParameters['statgroup'] = ObjectSerializer.serialize(statgroup, "number");
        }

        if (team !== undefined) {
            localVarQueryParameters['team'] = ObjectSerializer.serialize(team, "number");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param advertisementid 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameAdvertisementLeave(advertisementid: number, callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/leave';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'advertisementid' is not null or undefined
        if (advertisementid === null || advertisementid === undefined) {
            throw new Error('Required parameter advertisementid was null or undefined when calling gameAdvertisementLeave.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementLeave.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementLeave.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementLeave.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementLeave.');
        }

        if (advertisementid !== undefined) {
            localVarQueryParameters['advertisementid'] = ObjectSerializer.serialize(advertisementid, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param advertisementid 
     * @param appBinaryChecksum 
     * @param callNum 
     * @param connectId 
     * @param dataChecksum 
     * @param lastCallTime 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param password 
     * @param sessionID 
     * @param versionFlags 
     * @param withPartySessionID 
     */
    public async gameAdvertisementStartObserving(advertisementid: number, appBinaryChecksum: number, callNum: number, connectId: string, dataChecksum: number, lastCallTime: string, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, password: string, sessionID: string, versionFlags: number, withPartySessionID: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/startObserving';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'advertisementid' is not null or undefined
        if (advertisementid === null || advertisementid === undefined) {
            throw new Error('Required parameter advertisementid was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'appBinaryChecksum' is not null or undefined
        if (appBinaryChecksum === null || appBinaryChecksum === undefined) {
            throw new Error('Required parameter appBinaryChecksum was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'dataChecksum' is not null or undefined
        if (dataChecksum === null || dataChecksum === undefined) {
            throw new Error('Required parameter dataChecksum was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'password' is not null or undefined
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAdvertisementStartObserving.');
        }

        // verify required parameter 'withPartySessionID' is not null or undefined
        if (withPartySessionID === null || withPartySessionID === undefined) {
            throw new Error('Required parameter withPartySessionID was null or undefined when calling gameAdvertisementStartObserving.');
        }

        if (advertisementid !== undefined) {
            localVarQueryParameters['advertisementid'] = ObjectSerializer.serialize(advertisementid, "number");
        }

        if (appBinaryChecksum !== undefined) {
            localVarQueryParameters['appBinaryChecksum'] = ObjectSerializer.serialize(appBinaryChecksum, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (dataChecksum !== undefined) {
            localVarQueryParameters['dataChecksum'] = ObjectSerializer.serialize(dataChecksum, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (password !== undefined) {
            localVarQueryParameters['password'] = ObjectSerializer.serialize(password, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        if (withPartySessionID !== undefined) {
            localVarQueryParameters['withPartySessionID'] = ObjectSerializer.serialize(withPartySessionID, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param advertisementid 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameAdvertisementStopObserving(advertisementid: number, callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/stopObserving';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'advertisementid' is not null or undefined
        if (advertisementid === null || advertisementid === undefined) {
            throw new Error('Required parameter advertisementid was null or undefined when calling gameAdvertisementStopObserving.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementStopObserving.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementStopObserving.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementStopObserving.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementStopObserving.');
        }

        if (advertisementid !== undefined) {
            localVarQueryParameters['advertisementid'] = ObjectSerializer.serialize(advertisementid, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param advertisementid 
     * @param appBinaryChecksum 
     * @param automatchPollId 
     * @param callNum 
     * @param connectId 
     * @param dataChecksum 
     * @param description Lobby title
     * @param hostid 
     * @param isObservable 
     * @param lastCallTime 
     * @param mapname 
     * @param matchtype 
     * @param maxplayers 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param observerDelay 
     * @param observerPassword 
     * @param options 
     * @param password 
     * @param passworded 
     * @param race 
     * @param sessionID 
     * @param slotinfo zlib compressed
     * @param state 
     * @param team 
     * @param versionFlags 
     * @param visible 
     */
    public async gameAdvertisementUpdate(advertisementid: number, appBinaryChecksum: number, automatchPollId: number, callNum: number, connectId: string, dataChecksum: number, description: string, hostid: number, isObservable: number, lastCallTime: string, mapname: string, matchtype: number, maxplayers: number, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, observerDelay: number, observerPassword: string, options: string, password: string, passworded: number, race: number, sessionID: string, slotinfo: string, state: number, team: number, versionFlags: number, visible: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/update';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'advertisementid' is not null or undefined
        if (advertisementid === null || advertisementid === undefined) {
            throw new Error('Required parameter advertisementid was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'appBinaryChecksum' is not null or undefined
        if (appBinaryChecksum === null || appBinaryChecksum === undefined) {
            throw new Error('Required parameter appBinaryChecksum was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'automatchPollId' is not null or undefined
        if (automatchPollId === null || automatchPollId === undefined) {
            throw new Error('Required parameter automatchPollId was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'dataChecksum' is not null or undefined
        if (dataChecksum === null || dataChecksum === undefined) {
            throw new Error('Required parameter dataChecksum was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'description' is not null or undefined
        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'hostid' is not null or undefined
        if (hostid === null || hostid === undefined) {
            throw new Error('Required parameter hostid was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'isObservable' is not null or undefined
        if (isObservable === null || isObservable === undefined) {
            throw new Error('Required parameter isObservable was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'mapname' is not null or undefined
        if (mapname === null || mapname === undefined) {
            throw new Error('Required parameter mapname was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'matchtype' is not null or undefined
        if (matchtype === null || matchtype === undefined) {
            throw new Error('Required parameter matchtype was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'maxplayers' is not null or undefined
        if (maxplayers === null || maxplayers === undefined) {
            throw new Error('Required parameter maxplayers was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'observerDelay' is not null or undefined
        if (observerDelay === null || observerDelay === undefined) {
            throw new Error('Required parameter observerDelay was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'observerPassword' is not null or undefined
        if (observerPassword === null || observerPassword === undefined) {
            throw new Error('Required parameter observerPassword was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'options' is not null or undefined
        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'password' is not null or undefined
        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'passworded' is not null or undefined
        if (passworded === null || passworded === undefined) {
            throw new Error('Required parameter passworded was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'race' is not null or undefined
        if (race === null || race === undefined) {
            throw new Error('Required parameter race was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'slotinfo' is not null or undefined
        if (slotinfo === null || slotinfo === undefined) {
            throw new Error('Required parameter slotinfo was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'state' is not null or undefined
        if (state === null || state === undefined) {
            throw new Error('Required parameter state was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'team' is not null or undefined
        if (team === null || team === undefined) {
            throw new Error('Required parameter team was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAdvertisementUpdate.');
        }

        // verify required parameter 'visible' is not null or undefined
        if (visible === null || visible === undefined) {
            throw new Error('Required parameter visible was null or undefined when calling gameAdvertisementUpdate.');
        }

        if (advertisementid !== undefined) {
            localVarQueryParameters['advertisementid'] = ObjectSerializer.serialize(advertisementid, "number");
        }

        if (appBinaryChecksum !== undefined) {
            localVarQueryParameters['appBinaryChecksum'] = ObjectSerializer.serialize(appBinaryChecksum, "number");
        }

        if (automatchPollId !== undefined) {
            localVarQueryParameters['automatchPoll_id'] = ObjectSerializer.serialize(automatchPollId, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (dataChecksum !== undefined) {
            localVarQueryParameters['dataChecksum'] = ObjectSerializer.serialize(dataChecksum, "number");
        }

        if (description !== undefined) {
            localVarQueryParameters['description'] = ObjectSerializer.serialize(description, "string");
        }

        if (hostid !== undefined) {
            localVarQueryParameters['hostid'] = ObjectSerializer.serialize(hostid, "number");
        }

        if (isObservable !== undefined) {
            localVarQueryParameters['isObservable'] = ObjectSerializer.serialize(isObservable, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (mapname !== undefined) {
            localVarQueryParameters['mapname'] = ObjectSerializer.serialize(mapname, "string");
        }

        if (matchtype !== undefined) {
            localVarQueryParameters['matchtype'] = ObjectSerializer.serialize(matchtype, "number");
        }

        if (maxplayers !== undefined) {
            localVarQueryParameters['maxplayers'] = ObjectSerializer.serialize(maxplayers, "number");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (observerDelay !== undefined) {
            localVarQueryParameters['observerDelay'] = ObjectSerializer.serialize(observerDelay, "number");
        }

        if (observerPassword !== undefined) {
            localVarQueryParameters['observerPassword'] = ObjectSerializer.serialize(observerPassword, "string");
        }

        if (options !== undefined) {
            localVarQueryParameters['options'] = ObjectSerializer.serialize(options, "string");
        }

        if (password !== undefined) {
            localVarQueryParameters['password'] = ObjectSerializer.serialize(password, "string");
        }

        if (passworded !== undefined) {
            localVarQueryParameters['passworded'] = ObjectSerializer.serialize(passworded, "number");
        }

        if (race !== undefined) {
            localVarQueryParameters['race'] = ObjectSerializer.serialize(race, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (slotinfo !== undefined) {
            localVarQueryParameters['slotinfo'] = ObjectSerializer.serialize(slotinfo, "string");
        }

        if (state !== undefined) {
            localVarQueryParameters['state'] = ObjectSerializer.serialize(state, "number");
        }

        if (team !== undefined) {
            localVarQueryParameters['team'] = ObjectSerializer.serialize(team, "number");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        if (visible !== undefined) {
            localVarQueryParameters['visible'] = ObjectSerializer.serialize(visible, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param matchID 
     * @param platformlobbyID 
     * @param sessionID 
     */
    public async gameAdvertisementUpdatePlatformLobbyId(callNum: number, connectId: string, lastCallTime: string, matchID: number, platformlobbyID: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/updatePlatformLobbyID';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementUpdatePlatformLobbyId.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementUpdatePlatformLobbyId.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementUpdatePlatformLobbyId.');
        }

        // verify required parameter 'matchID' is not null or undefined
        if (matchID === null || matchID === undefined) {
            throw new Error('Required parameter matchID was null or undefined when calling gameAdvertisementUpdatePlatformLobbyId.');
        }

        // verify required parameter 'platformlobbyID' is not null or undefined
        if (platformlobbyID === null || platformlobbyID === undefined) {
            throw new Error('Required parameter platformlobbyID was null or undefined when calling gameAdvertisementUpdatePlatformLobbyId.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementUpdatePlatformLobbyId.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchID !== undefined) {
            localVarQueryParameters['matchID'] = ObjectSerializer.serialize(matchID, "number");
        }

        if (platformlobbyID !== undefined) {
            localVarQueryParameters['platformlobbyID'] = ObjectSerializer.serialize(platformlobbyID, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param advertisementid 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameAdvertisementUpdateState(advertisementid: number, callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/updateState';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'advertisementid' is not null or undefined
        if (advertisementid === null || advertisementid === undefined) {
            throw new Error('Required parameter advertisementid was null or undefined when calling gameAdvertisementUpdateState.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementUpdateState.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementUpdateState.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementUpdateState.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementUpdateState.');
        }

        if (advertisementid !== undefined) {
            localVarQueryParameters['advertisementid'] = ObjectSerializer.serialize(advertisementid, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param advertisementid 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param numericTagNames 
     * @param numericTagValues 
     * @param sessionID 
     * @param stringTagNames 
     * @param stringTagValues 
     */
    public async gameAdvertisementUpdateTags(advertisementid: number, callNum: number, connectId: string, lastCallTime: string, numericTagNames: string, numericTagValues: number, sessionID: string, stringTagNames: string, stringTagValues: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/advertisement/updateTags';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'advertisementid' is not null or undefined
        if (advertisementid === null || advertisementid === undefined) {
            throw new Error('Required parameter advertisementid was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        // verify required parameter 'numericTagNames' is not null or undefined
        if (numericTagNames === null || numericTagNames === undefined) {
            throw new Error('Required parameter numericTagNames was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        // verify required parameter 'numericTagValues' is not null or undefined
        if (numericTagValues === null || numericTagValues === undefined) {
            throw new Error('Required parameter numericTagValues was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        // verify required parameter 'stringTagNames' is not null or undefined
        if (stringTagNames === null || stringTagNames === undefined) {
            throw new Error('Required parameter stringTagNames was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        // verify required parameter 'stringTagValues' is not null or undefined
        if (stringTagValues === null || stringTagValues === undefined) {
            throw new Error('Required parameter stringTagValues was null or undefined when calling gameAdvertisementUpdateTags.');
        }

        if (advertisementid !== undefined) {
            localVarQueryParameters['advertisementid'] = ObjectSerializer.serialize(advertisementid, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (numericTagNames !== undefined) {
            localVarQueryParameters['numericTagNames'] = ObjectSerializer.serialize(numericTagNames, "string");
        }

        if (numericTagValues !== undefined) {
            localVarQueryParameters['numericTagValues'] = ObjectSerializer.serialize(numericTagValues, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (stringTagNames !== undefined) {
            localVarQueryParameters['stringTagNames'] = ObjectSerializer.serialize(stringTagNames, "string");
        }

        if (stringTagValues !== undefined) {
            localVarQueryParameters['stringTagValues'] = ObjectSerializer.serialize(stringTagValues, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameAutomatch2GetAutomatchMap(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/automatch2/getAutomatchMap';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAutomatch2GetAutomatchMap.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAutomatch2GetAutomatchMap.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAutomatch2GetAutomatchMap.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAutomatch2GetAutomatchMap.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param appBinCRC 
     * @param callNum 
     * @param connectId 
     * @param dataCRC backwards appBinCRC?
     * @param factionIDs 
     * @param lastCallTime 
     * @param matchTypes 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param options 
     * @param partySessionID 
     * @param raceInfoKey 
     * @param raceInfoProfileID 
     * @param raceInfoRaceID 
     * @param relayPingTimes 
     * @param relayRegion 
     * @param relayRegions 
     * @param sessionID 
     * @param versionFlags 
     * @param vetoMapKey 
     * @param vetoMaps 
     */
    public async gameAutomatch2Polling(appBinCRC: number, callNum: number, connectId: string, dataCRC: number, factionIDs: number, lastCallTime: string, matchTypes: number, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, options: string, partySessionID: number, raceInfoKey: number, raceInfoProfileID: number, raceInfoRaceID: number, relayPingTimes: number, relayRegion: string, relayRegions: string, sessionID: string, versionFlags: number, vetoMapKey: number, vetoMaps: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/automatch2/polling';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'appBinCRC' is not null or undefined
        if (appBinCRC === null || appBinCRC === undefined) {
            throw new Error('Required parameter appBinCRC was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'dataCRC' is not null or undefined
        if (dataCRC === null || dataCRC === undefined) {
            throw new Error('Required parameter dataCRC was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'factionIDs' is not null or undefined
        if (factionIDs === null || factionIDs === undefined) {
            throw new Error('Required parameter factionIDs was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'matchTypes' is not null or undefined
        if (matchTypes === null || matchTypes === undefined) {
            throw new Error('Required parameter matchTypes was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'options' is not null or undefined
        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'partySessionID' is not null or undefined
        if (partySessionID === null || partySessionID === undefined) {
            throw new Error('Required parameter partySessionID was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'raceInfoKey' is not null or undefined
        if (raceInfoKey === null || raceInfoKey === undefined) {
            throw new Error('Required parameter raceInfoKey was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'raceInfoProfileID' is not null or undefined
        if (raceInfoProfileID === null || raceInfoProfileID === undefined) {
            throw new Error('Required parameter raceInfoProfileID was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'raceInfoRaceID' is not null or undefined
        if (raceInfoRaceID === null || raceInfoRaceID === undefined) {
            throw new Error('Required parameter raceInfoRaceID was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'relayPingTimes' is not null or undefined
        if (relayPingTimes === null || relayPingTimes === undefined) {
            throw new Error('Required parameter relayPingTimes was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'relayRegion' is not null or undefined
        if (relayRegion === null || relayRegion === undefined) {
            throw new Error('Required parameter relayRegion was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'relayRegions' is not null or undefined
        if (relayRegions === null || relayRegions === undefined) {
            throw new Error('Required parameter relayRegions was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'vetoMapKey' is not null or undefined
        if (vetoMapKey === null || vetoMapKey === undefined) {
            throw new Error('Required parameter vetoMapKey was null or undefined when calling gameAutomatch2Polling.');
        }

        // verify required parameter 'vetoMaps' is not null or undefined
        if (vetoMaps === null || vetoMaps === undefined) {
            throw new Error('Required parameter vetoMaps was null or undefined when calling gameAutomatch2Polling.');
        }

        if (appBinCRC !== undefined) {
            localVarQueryParameters['appBinCRC'] = ObjectSerializer.serialize(appBinCRC, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (dataCRC !== undefined) {
            localVarQueryParameters['dataCRC'] = ObjectSerializer.serialize(dataCRC, "number");
        }

        if (factionIDs !== undefined) {
            localVarQueryParameters['factionIDs'] = ObjectSerializer.serialize(factionIDs, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchTypes !== undefined) {
            localVarQueryParameters['matchTypes'] = ObjectSerializer.serialize(matchTypes, "number");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (options !== undefined) {
            localVarQueryParameters['options'] = ObjectSerializer.serialize(options, "string");
        }

        if (partySessionID !== undefined) {
            localVarQueryParameters['partySessionID'] = ObjectSerializer.serialize(partySessionID, "number");
        }

        if (raceInfoKey !== undefined) {
            localVarQueryParameters['raceInfoKey'] = ObjectSerializer.serialize(raceInfoKey, "number");
        }

        if (raceInfoProfileID !== undefined) {
            localVarQueryParameters['raceInfoProfileID'] = ObjectSerializer.serialize(raceInfoProfileID, "number");
        }

        if (raceInfoRaceID !== undefined) {
            localVarQueryParameters['raceInfoRaceID'] = ObjectSerializer.serialize(raceInfoRaceID, "number");
        }

        if (relayPingTimes !== undefined) {
            localVarQueryParameters['relayPingTimes'] = ObjectSerializer.serialize(relayPingTimes, "number");
        }

        if (relayRegion !== undefined) {
            localVarQueryParameters['relayRegion'] = ObjectSerializer.serialize(relayRegion, "string");
        }

        if (relayRegions !== undefined) {
            localVarQueryParameters['relayRegions'] = ObjectSerializer.serialize(relayRegions, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        if (vetoMapKey !== undefined) {
            localVarQueryParameters['vetoMapKey'] = ObjectSerializer.serialize(vetoMapKey, "number");
        }

        if (vetoMaps !== undefined) {
            localVarQueryParameters['vetoMaps'] = ObjectSerializer.serialize(vetoMaps, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param commit 
     * @param connectId 
     * @param lastCallTime 
     * @param ownerProfileID 
     * @param sessionID 
     */
    public async gameAutomatch2StopPolling(callNum: number, commit: number, connectId: string, lastCallTime: string, ownerProfileID: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/automatch2/stoppolling';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAutomatch2StopPolling.');
        }

        // verify required parameter 'commit' is not null or undefined
        if (commit === null || commit === undefined) {
            throw new Error('Required parameter commit was null or undefined when calling gameAutomatch2StopPolling.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAutomatch2StopPolling.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAutomatch2StopPolling.');
        }

        // verify required parameter 'ownerProfileID' is not null or undefined
        if (ownerProfileID === null || ownerProfileID === undefined) {
            throw new Error('Required parameter ownerProfileID was null or undefined when calling gameAutomatch2StopPolling.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAutomatch2StopPolling.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (commit !== undefined) {
            localVarQueryParameters['commit'] = ObjectSerializer.serialize(commit, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (ownerProfileID !== undefined) {
            localVarQueryParameters['ownerProfileID'] = ObjectSerializer.serialize(ownerProfileID, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param matchID 
     * @param result 
     * @param resultCode 
     * @param sessionID 
     */
    public async gameAutomatch2UpdateStatus(callNum: number, connectId: string, lastCallTime: string, matchID: number, result: number, resultCode: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/automatch2/updateStatus';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAutomatch2UpdateStatus.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAutomatch2UpdateStatus.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAutomatch2UpdateStatus.');
        }

        // verify required parameter 'matchID' is not null or undefined
        if (matchID === null || matchID === undefined) {
            throw new Error('Required parameter matchID was null or undefined when calling gameAutomatch2UpdateStatus.');
        }

        // verify required parameter 'result' is not null or undefined
        if (result === null || result === undefined) {
            throw new Error('Required parameter result was null or undefined when calling gameAutomatch2UpdateStatus.');
        }

        // verify required parameter 'resultCode' is not null or undefined
        if (resultCode === null || resultCode === undefined) {
            throw new Error('Required parameter resultCode was null or undefined when calling gameAutomatch2UpdateStatus.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAutomatch2UpdateStatus.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchID !== undefined) {
            localVarQueryParameters['matchID'] = ObjectSerializer.serialize(matchID, "number");
        }

        if (result !== undefined) {
            localVarQueryParameters['result'] = ObjectSerializer.serialize(result, "number");
        }

        if (resultCode !== undefined) {
            localVarQueryParameters['resultCode'] = ObjectSerializer.serialize(resultCode, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameAutomatchGetAutomatchMap(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/automatch/getAutomatchMap';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameAutomatchGetAutomatchMap.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameAutomatchGetAutomatchMap.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameAutomatchGetAutomatchMap.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameAutomatchGetAutomatchMap.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameChallengeGetChallengeProgress(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Challenge/getChallengeProgress';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameChallengeGetChallengeProgress.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameChallengeGetChallengeProgress.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameChallengeGetChallengeProgress.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameChallengeGetChallengeProgress.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: Request not available in Wiki, this is guessed
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param profileId 
     * @param sessionID 
     */
    public async gameChallengeGetChallengeProgressByProfileId(callNum: number, connectId: string, lastCallTime: string, profileId: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Challenge/getChallengeProgressByProfileID';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameChallengeGetChallengeProgressByProfileId.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameChallengeGetChallengeProgressByProfileId.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameChallengeGetChallengeProgressByProfileId.');
        }

        // verify required parameter 'profileId' is not null or undefined
        if (profileId === null || profileId === undefined) {
            throw new Error('Required parameter profileId was null or undefined when calling gameChallengeGetChallengeProgressByProfileId.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameChallengeGetChallengeProgressByProfileId.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (profileId !== undefined) {
            localVarQueryParameters['profile_id'] = ObjectSerializer.serialize(profileId, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param signature 
     */
    public async gameChallengeGetChallenges(callNum: number, connectId: string, lastCallTime: string, sessionID: string, signature: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Challenge/getChallenges';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameChallengeGetChallenges.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameChallengeGetChallenges.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameChallengeGetChallenges.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameChallengeGetChallenges.');
        }

        // verify required parameter 'signature' is not null or undefined
        if (signature === null || signature === undefined) {
            throw new Error('Required parameter signature was null or undefined when calling gameChallengeGetChallenges.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (signature !== undefined) {
            localVarQueryParameters['signature'] = ObjectSerializer.serialize(signature, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param progressIDs 
     * @param sessionID 
     * @param updateAmounts 
     */
    public async gameChallengeUpdateProgressBatched(callNum: number, connectId: string, lastCallTime: string, progressIDs: number, sessionID: string, updateAmounts: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/challenge/updateProgressBatched';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameChallengeUpdateProgressBatched.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameChallengeUpdateProgressBatched.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameChallengeUpdateProgressBatched.');
        }

        // verify required parameter 'progressIDs' is not null or undefined
        if (progressIDs === null || progressIDs === undefined) {
            throw new Error('Required parameter progressIDs was null or undefined when calling gameChallengeUpdateProgressBatched.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameChallengeUpdateProgressBatched.');
        }

        // verify required parameter 'updateAmounts' is not null or undefined
        if (updateAmounts === null || updateAmounts === undefined) {
            throw new Error('Required parameter updateAmounts was null or undefined when calling gameChallengeUpdateProgressBatched.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (progressIDs !== undefined) {
            localVarQueryParameters['progressIDs'] = ObjectSerializer.serialize(progressIDs, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (updateAmounts !== undefined) {
            localVarQueryParameters['updateAmounts'] = ObjectSerializer.serialize(updateAmounts, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param messageID 
     * @param sessionID 
     */
    public async gameChatDeleteOfflineMessage(callNum: number, connectId: string, lastCallTime: string, messageID: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/chat/deleteOfflineMessage';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameChatDeleteOfflineMessage.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameChatDeleteOfflineMessage.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameChatDeleteOfflineMessage.');
        }

        // verify required parameter 'messageID' is not null or undefined
        if (messageID === null || messageID === undefined) {
            throw new Error('Required parameter messageID was null or undefined when calling gameChatDeleteOfflineMessage.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameChatDeleteOfflineMessage.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (messageID !== undefined) {
            localVarQueryParameters['messageID'] = ObjectSerializer.serialize(messageID, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameChatGetChatChannels(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/chat/getChatChannels';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameChatGetChatChannels.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameChatGetChatChannels.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameChatGetChatChannels.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameChatGetChatChannels.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameChatGetOfflineMessages(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/chat/getOfflineMessages';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameChatGetOfflineMessages.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameChatGetOfflineMessages.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameChatGetOfflineMessages.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameChatGetOfflineMessages.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param clanListName 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameClanApply(callNum: number, clanListName: string, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/clan/apply';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameClanApply.');
        }

        // verify required parameter 'clanListName' is not null or undefined
        if (clanListName === null || clanListName === undefined) {
            throw new Error('Required parameter clanListName was null or undefined when calling gameClanApply.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameClanApply.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameClanApply.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameClanApply.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (clanListName !== undefined) {
            localVarQueryParameters['clanList_name'] = ObjectSerializer.serialize(clanListName, "string");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param chat 
     * @param connectId 
     * @param cost 
     * @param demote 
     * @param description Lobby title
     * @param disband 
     * @param editInfo 
     * @param editPermission 
     * @param fullName 
     * @param icon 
     * @param invite 
     * @param itemPriceId 
     * @param joinPolicy 
     * @param lastCallTime 
     * @param locStringID 
     * @param messageOfTheDay 
     * @param metadata 
     * @param name 
     * @param paymentitem 
     * @param permissionName 
     * @param promote 
     * @param rank 
     * @param remove 
     * @param sessionID 
     * @param tags 
     */
    public async gameClanCreate(callNum: number, chat: string, connectId: string, cost: number, demote: string, description: string, disband: string, editInfo: string, editPermission: string, fullName: string, icon: string, invite: string, itemPriceId: number, joinPolicy: number, lastCallTime: string, locStringID: number, messageOfTheDay: string, metadata: object, name: string, paymentitem: number, permissionName: string, promote: string, rank: string, remove: string, sessionID: string, tags: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/clan/create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'chat' is not null or undefined
        if (chat === null || chat === undefined) {
            throw new Error('Required parameter chat was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'cost' is not null or undefined
        if (cost === null || cost === undefined) {
            throw new Error('Required parameter cost was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'demote' is not null or undefined
        if (demote === null || demote === undefined) {
            throw new Error('Required parameter demote was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'description' is not null or undefined
        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'disband' is not null or undefined
        if (disband === null || disband === undefined) {
            throw new Error('Required parameter disband was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'editInfo' is not null or undefined
        if (editInfo === null || editInfo === undefined) {
            throw new Error('Required parameter editInfo was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'editPermission' is not null or undefined
        if (editPermission === null || editPermission === undefined) {
            throw new Error('Required parameter editPermission was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'fullName' is not null or undefined
        if (fullName === null || fullName === undefined) {
            throw new Error('Required parameter fullName was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'icon' is not null or undefined
        if (icon === null || icon === undefined) {
            throw new Error('Required parameter icon was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'invite' is not null or undefined
        if (invite === null || invite === undefined) {
            throw new Error('Required parameter invite was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'itemPriceId' is not null or undefined
        if (itemPriceId === null || itemPriceId === undefined) {
            throw new Error('Required parameter itemPriceId was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'joinPolicy' is not null or undefined
        if (joinPolicy === null || joinPolicy === undefined) {
            throw new Error('Required parameter joinPolicy was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'locStringID' is not null or undefined
        if (locStringID === null || locStringID === undefined) {
            throw new Error('Required parameter locStringID was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'messageOfTheDay' is not null or undefined
        if (messageOfTheDay === null || messageOfTheDay === undefined) {
            throw new Error('Required parameter messageOfTheDay was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'metadata' is not null or undefined
        if (metadata === null || metadata === undefined) {
            throw new Error('Required parameter metadata was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'paymentitem' is not null or undefined
        if (paymentitem === null || paymentitem === undefined) {
            throw new Error('Required parameter paymentitem was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'permissionName' is not null or undefined
        if (permissionName === null || permissionName === undefined) {
            throw new Error('Required parameter permissionName was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'promote' is not null or undefined
        if (promote === null || promote === undefined) {
            throw new Error('Required parameter promote was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'rank' is not null or undefined
        if (rank === null || rank === undefined) {
            throw new Error('Required parameter rank was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'remove' is not null or undefined
        if (remove === null || remove === undefined) {
            throw new Error('Required parameter remove was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameClanCreate.');
        }

        // verify required parameter 'tags' is not null or undefined
        if (tags === null || tags === undefined) {
            throw new Error('Required parameter tags was null or undefined when calling gameClanCreate.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (chat !== undefined) {
            localVarQueryParameters['chat'] = ObjectSerializer.serialize(chat, "string");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (cost !== undefined) {
            localVarQueryParameters['cost'] = ObjectSerializer.serialize(cost, "number");
        }

        if (demote !== undefined) {
            localVarQueryParameters['demote'] = ObjectSerializer.serialize(demote, "string");
        }

        if (description !== undefined) {
            localVarQueryParameters['description'] = ObjectSerializer.serialize(description, "string");
        }

        if (disband !== undefined) {
            localVarQueryParameters['disband'] = ObjectSerializer.serialize(disband, "string");
        }

        if (editInfo !== undefined) {
            localVarQueryParameters['editInfo'] = ObjectSerializer.serialize(editInfo, "string");
        }

        if (editPermission !== undefined) {
            localVarQueryParameters['editPermission'] = ObjectSerializer.serialize(editPermission, "string");
        }

        if (fullName !== undefined) {
            localVarQueryParameters['fullName'] = ObjectSerializer.serialize(fullName, "string");
        }

        if (icon !== undefined) {
            localVarQueryParameters['icon'] = ObjectSerializer.serialize(icon, "string");
        }

        if (invite !== undefined) {
            localVarQueryParameters['invite'] = ObjectSerializer.serialize(invite, "string");
        }

        if (itemPriceId !== undefined) {
            localVarQueryParameters['itemPrice_id'] = ObjectSerializer.serialize(itemPriceId, "number");
        }

        if (joinPolicy !== undefined) {
            localVarQueryParameters['joinPolicy'] = ObjectSerializer.serialize(joinPolicy, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (locStringID !== undefined) {
            localVarQueryParameters['locStringID'] = ObjectSerializer.serialize(locStringID, "number");
        }

        if (messageOfTheDay !== undefined) {
            localVarQueryParameters['messageOfTheDay'] = ObjectSerializer.serialize(messageOfTheDay, "string");
        }

        if (metadata !== undefined) {
            localVarQueryParameters['metadata'] = ObjectSerializer.serialize(metadata, "object");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (paymentitem !== undefined) {
            localVarQueryParameters['paymentitem'] = ObjectSerializer.serialize(paymentitem, "number");
        }

        if (permissionName !== undefined) {
            localVarQueryParameters['permissionName'] = ObjectSerializer.serialize(permissionName, "string");
        }

        if (promote !== undefined) {
            localVarQueryParameters['promote'] = ObjectSerializer.serialize(promote, "string");
        }

        if (rank !== undefined) {
            localVarQueryParameters['rank'] = ObjectSerializer.serialize(rank, "string");
        }

        if (remove !== undefined) {
            localVarQueryParameters['remove'] = ObjectSerializer.serialize(remove, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (tags !== undefined) {
            localVarQueryParameters['tags'] = ObjectSerializer.serialize(tags, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameClanDisband(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/clan/disband';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameClanDisband.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameClanDisband.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameClanDisband.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameClanDisband.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param count 
     * @param joinPolicies 
     * @param lastCallTime 
     * @param name 
     * @param sessionID 
     * @param start 
     * @param tags 
     */
    public async gameClanFind(callNum: number, connectId: string, count: number, joinPolicies: number, lastCallTime: string, name: string, sessionID: string, start: number, tags: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/clan/find';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameClanFind.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameClanFind.');
        }

        // verify required parameter 'count' is not null or undefined
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling gameClanFind.');
        }

        // verify required parameter 'joinPolicies' is not null or undefined
        if (joinPolicies === null || joinPolicies === undefined) {
            throw new Error('Required parameter joinPolicies was null or undefined when calling gameClanFind.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameClanFind.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling gameClanFind.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameClanFind.');
        }

        // verify required parameter 'start' is not null or undefined
        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling gameClanFind.');
        }

        // verify required parameter 'tags' is not null or undefined
        if (tags === null || tags === undefined) {
            throw new Error('Required parameter tags was null or undefined when calling gameClanFind.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        if (joinPolicies !== undefined) {
            localVarQueryParameters['joinPolicies'] = ObjectSerializer.serialize(joinPolicies, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (tags !== undefined) {
            localVarQueryParameters['tags'] = ObjectSerializer.serialize(tags, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param names 
     * @param sessionID 
     */
    public async gameClanGetClan(callNum: number, connectId: string, lastCallTime: string, names: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/clan/getClan';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameClanGetClan.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameClanGetClan.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameClanGetClan.');
        }

        // verify required parameter 'names' is not null or undefined
        if (names === null || names === undefined) {
            throw new Error('Required parameter names was null or undefined when calling gameClanGetClan.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameClanGetClan.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (names !== undefined) {
            localVarQueryParameters['names'] = ObjectSerializer.serialize(names, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param name 
     * @param sessionID 
     */
    public async gameClanGetClanInfoFull(callNum: number, connectId: string, lastCallTime: string, name: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/clan/getClanInfoFull';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameClanGetClanInfoFull.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameClanGetClanInfoFull.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameClanGetClanInfoFull.');
        }

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling gameClanGetClanInfoFull.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameClanGetClanInfoFull.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param clanListId 
     * @param connectId 
     * @param description Lobby title
     * @param icon 
     * @param joinPolicy 
     * @param lastCallTime 
     * @param messageOfTheDay 
     * @param metadata 
     * @param sessionID 
     * @param tags 
     */
    public async gameClanUpdate(callNum: number, clanListId: number, connectId: string, description: string, icon: string, joinPolicy: number, lastCallTime: string, messageOfTheDay: string, metadata: object, sessionID: string, tags: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/clan/update';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'clanListId' is not null or undefined
        if (clanListId === null || clanListId === undefined) {
            throw new Error('Required parameter clanListId was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'description' is not null or undefined
        if (description === null || description === undefined) {
            throw new Error('Required parameter description was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'icon' is not null or undefined
        if (icon === null || icon === undefined) {
            throw new Error('Required parameter icon was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'joinPolicy' is not null or undefined
        if (joinPolicy === null || joinPolicy === undefined) {
            throw new Error('Required parameter joinPolicy was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'messageOfTheDay' is not null or undefined
        if (messageOfTheDay === null || messageOfTheDay === undefined) {
            throw new Error('Required parameter messageOfTheDay was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'metadata' is not null or undefined
        if (metadata === null || metadata === undefined) {
            throw new Error('Required parameter metadata was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameClanUpdate.');
        }

        // verify required parameter 'tags' is not null or undefined
        if (tags === null || tags === undefined) {
            throw new Error('Required parameter tags was null or undefined when calling gameClanUpdate.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (clanListId !== undefined) {
            localVarQueryParameters['clanList_id'] = ObjectSerializer.serialize(clanListId, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (description !== undefined) {
            localVarQueryParameters['description'] = ObjectSerializer.serialize(description, "string");
        }

        if (icon !== undefined) {
            localVarQueryParameters['icon'] = ObjectSerializer.serialize(icon, "string");
        }

        if (joinPolicy !== undefined) {
            localVarQueryParameters['joinPolicy'] = ObjectSerializer.serialize(joinPolicy, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (messageOfTheDay !== undefined) {
            localVarQueryParameters['messageOfTheDay'] = ObjectSerializer.serialize(messageOfTheDay, "string");
        }

        if (metadata !== undefined) {
            localVarQueryParameters['metadata'] = ObjectSerializer.serialize(metadata, "object");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (tags !== undefined) {
            localVarQueryParameters['tags'] = ObjectSerializer.serialize(tags, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param names 
     * @param sessionID 
     */
    public async gameCloudGetFileUrlGet(callNum: number, connectId: string, lastCallTime: string, names: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/cloud/getFileURL';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameCloudGetFileUrlGet.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameCloudGetFileUrlGet.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameCloudGetFileUrlGet.');
        }

        // verify required parameter 'names' is not null or undefined
        if (names === null || names === undefined) {
            throw new Error('Required parameter names was null or undefined when calling gameCloudGetFileUrlGet.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameCloudGetFileUrlGet.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (names !== undefined) {
            localVarQueryParameters['names'] = ObjectSerializer.serialize(names, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param names 
     * @param sessionID 
     */
    public async gameCloudGetFileUrlPost(callNum: number, connectId: string, lastCallTime: string, names: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/cloud/getFileURL';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameCloudGetFileUrlPost.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameCloudGetFileUrlPost.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameCloudGetFileUrlPost.');
        }

        // verify required parameter 'names' is not null or undefined
        if (names === null || names === undefined) {
            throw new Error('Required parameter names was null or undefined when calling gameCloudGetFileUrlPost.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameCloudGetFileUrlPost.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (names !== undefined) {
            localVarQueryParameters['names'] = ObjectSerializer.serialize(names, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param key 
     */
    public async gameCloudGetTempCredentials(callNum: number, connectId: string, lastCallTime: string, sessionID: string, key: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/cloud/getTempCredentials';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameCloudGetTempCredentials.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameCloudGetTempCredentials.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameCloudGetTempCredentials.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameCloudGetTempCredentials.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling gameCloudGetTempCredentials.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameCommunityEventGetAvailableCommunityEvents(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/CommunityEvent/getAvailableCommunityEvents';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameCommunityEventGetAvailableCommunityEvents.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameCommunityEventGetAvailableCommunityEvents.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameCommunityEventGetAvailableCommunityEvents.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameCommunityEventGetAvailableCommunityEvents.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param eventId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameCommunityEventGetEventChallengeProgress(callNum: number, connectId: string, eventId: number, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/CommunityEvent/getEventChallengeProgress';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameCommunityEventGetEventChallengeProgress.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameCommunityEventGetEventChallengeProgress.');
        }

        // verify required parameter 'eventId' is not null or undefined
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling gameCommunityEventGetEventChallengeProgress.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameCommunityEventGetEventChallengeProgress.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameCommunityEventGetEventChallengeProgress.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (eventId !== undefined) {
            localVarQueryParameters['event_id'] = ObjectSerializer.serialize(eventId, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param eventId 
     * @param groupType 
     * @param lastCallTime 
     * @param memberId 
     * @param sessionID 
     */
    public async gameCommunityEventGetEventStats(callNum: number, connectId: string, eventId: number, groupType: number, lastCallTime: string, memberId: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/CommunityEvent/getEventStats';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameCommunityEventGetEventStats.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameCommunityEventGetEventStats.');
        }

        // verify required parameter 'eventId' is not null or undefined
        if (eventId === null || eventId === undefined) {
            throw new Error('Required parameter eventId was null or undefined when calling gameCommunityEventGetEventStats.');
        }

        // verify required parameter 'groupType' is not null or undefined
        if (groupType === null || groupType === undefined) {
            throw new Error('Required parameter groupType was null or undefined when calling gameCommunityEventGetEventStats.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameCommunityEventGetEventStats.');
        }

        // verify required parameter 'memberId' is not null or undefined
        if (memberId === null || memberId === undefined) {
            throw new Error('Required parameter memberId was null or undefined when calling gameCommunityEventGetEventStats.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameCommunityEventGetEventStats.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (eventId !== undefined) {
            localVarQueryParameters['event_id'] = ObjectSerializer.serialize(eventId, "number");
        }

        if (groupType !== undefined) {
            localVarQueryParameters['group_type'] = ObjectSerializer.serialize(groupType, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (memberId !== undefined) {
            localVarQueryParameters['member_id'] = ObjectSerializer.serialize(memberId, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param gatheringid 
     * @param inviteeid 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameInvitationCancelInvitation(callNum: number, connectId: string, gatheringid: number, inviteeid: number, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/invitation/cancelInvitation';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameInvitationCancelInvitation.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameInvitationCancelInvitation.');
        }

        // verify required parameter 'gatheringid' is not null or undefined
        if (gatheringid === null || gatheringid === undefined) {
            throw new Error('Required parameter gatheringid was null or undefined when calling gameInvitationCancelInvitation.');
        }

        // verify required parameter 'inviteeid' is not null or undefined
        if (inviteeid === null || inviteeid === undefined) {
            throw new Error('Required parameter inviteeid was null or undefined when calling gameInvitationCancelInvitation.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameInvitationCancelInvitation.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameInvitationCancelInvitation.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (gatheringid !== undefined) {
            localVarQueryParameters['gatheringid'] = ObjectSerializer.serialize(gatheringid, "number");
        }

        if (inviteeid !== undefined) {
            localVarQueryParameters['inviteeid'] = ObjectSerializer.serialize(inviteeid, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param gatheringid 
     * @param gatheringpassword 
     * @param inviteeid 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameInvitationExtendInvitation(callNum: number, connectId: string, gatheringid: number, gatheringpassword: string, inviteeid: number, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/invitation/extendInvitation';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameInvitationExtendInvitation.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameInvitationExtendInvitation.');
        }

        // verify required parameter 'gatheringid' is not null or undefined
        if (gatheringid === null || gatheringid === undefined) {
            throw new Error('Required parameter gatheringid was null or undefined when calling gameInvitationExtendInvitation.');
        }

        // verify required parameter 'gatheringpassword' is not null or undefined
        if (gatheringpassword === null || gatheringpassword === undefined) {
            throw new Error('Required parameter gatheringpassword was null or undefined when calling gameInvitationExtendInvitation.');
        }

        // verify required parameter 'inviteeid' is not null or undefined
        if (inviteeid === null || inviteeid === undefined) {
            throw new Error('Required parameter inviteeid was null or undefined when calling gameInvitationExtendInvitation.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameInvitationExtendInvitation.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameInvitationExtendInvitation.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (gatheringid !== undefined) {
            localVarQueryParameters['gatheringid'] = ObjectSerializer.serialize(gatheringid, "number");
        }

        if (gatheringpassword !== undefined) {
            localVarQueryParameters['gatheringpassword'] = ObjectSerializer.serialize(gatheringpassword, "string");
        }

        if (inviteeid !== undefined) {
            localVarQueryParameters['inviteeid'] = ObjectSerializer.serialize(inviteeid, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param itemCharges 
     * @param itemIDs 
     * @param itemLocations 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameItemDetachItems(callNum: number, connectId: string, itemCharges: number, itemIDs: number, itemLocations: number, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/detachItems';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemDetachItems.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemDetachItems.');
        }

        // verify required parameter 'itemCharges' is not null or undefined
        if (itemCharges === null || itemCharges === undefined) {
            throw new Error('Required parameter itemCharges was null or undefined when calling gameItemDetachItems.');
        }

        // verify required parameter 'itemIDs' is not null or undefined
        if (itemIDs === null || itemIDs === undefined) {
            throw new Error('Required parameter itemIDs was null or undefined when calling gameItemDetachItems.');
        }

        // verify required parameter 'itemLocations' is not null or undefined
        if (itemLocations === null || itemLocations === undefined) {
            throw new Error('Required parameter itemLocations was null or undefined when calling gameItemDetachItems.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemDetachItems.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemDetachItems.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (itemCharges !== undefined) {
            localVarQueryParameters['itemCharges'] = ObjectSerializer.serialize(itemCharges, "number");
        }

        if (itemIDs !== undefined) {
            localVarQueryParameters['itemIDs'] = ObjectSerializer.serialize(itemIDs, "number");
        }

        if (itemLocations !== undefined) {
            localVarQueryParameters['itemLocations'] = ObjectSerializer.serialize(itemLocations, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param profileIDs 
     */
    public async gameItemGetInventoryByProfileIds(callNum: number, connectId: string, lastCallTime: string, sessionID: string, profileIDs: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/getInventoryByProfileIDs';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemGetInventoryByProfileIds.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemGetInventoryByProfileIds.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemGetInventoryByProfileIds.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemGetInventoryByProfileIds.');
        }

        // verify required parameter 'profileIDs' is not null or undefined
        if (profileIDs === null || profileIDs === undefined) {
            throw new Error('Required parameter profileIDs was null or undefined when calling gameItemGetInventoryByProfileIds.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (profileIDs !== undefined) {
            localVarQueryParameters['profileIDs'] = ObjectSerializer.serialize(profileIDs, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param signature 
     */
    public async gameItemGetItemBundleItemsJson(callNum: number, connectId: string, lastCallTime: string, sessionID: string, signature: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/getItemBundleItemsJson';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemGetItemBundleItemsJson.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemGetItemBundleItemsJson.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemGetItemBundleItemsJson.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemGetItemBundleItemsJson.');
        }

        // verify required parameter 'signature' is not null or undefined
        if (signature === null || signature === undefined) {
            throw new Error('Required parameter signature was null or undefined when calling gameItemGetItemBundleItemsJson.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (signature !== undefined) {
            localVarQueryParameters['signature'] = ObjectSerializer.serialize(signature, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param signature 
     */
    public async gameItemGetItemDefinitionsJson(callNum: number, connectId: string, lastCallTime: string, sessionID: string, signature: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/getItemDefinitionsJson';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemGetItemDefinitionsJson.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemGetItemDefinitionsJson.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemGetItemDefinitionsJson.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemGetItemDefinitionsJson.');
        }

        // verify required parameter 'signature' is not null or undefined
        if (signature === null || signature === undefined) {
            throw new Error('Required parameter signature was null or undefined when calling gameItemGetItemDefinitionsJson.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (signature !== undefined) {
            localVarQueryParameters['signature'] = ObjectSerializer.serialize(signature, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameItemGetItemLoadouts(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/getItemLoadouts';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemGetItemLoadouts.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemGetItemLoadouts.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemGetItemLoadouts.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemGetItemLoadouts.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param accountType 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param country 
     * @param currency 
     * @param saleVersion 
     */
    public async gameItemGetItemPrices(accountType: string, callNum: number, connectId: string, lastCallTime: string, sessionID: string, country: string, currency: string, saleVersion: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/getItemPrices';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'accountType' is not null or undefined
        if (accountType === null || accountType === undefined) {
            throw new Error('Required parameter accountType was null or undefined when calling gameItemGetItemPrices.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemGetItemPrices.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemGetItemPrices.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemGetItemPrices.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemGetItemPrices.');
        }

        // verify required parameter 'country' is not null or undefined
        if (country === null || country === undefined) {
            throw new Error('Required parameter country was null or undefined when calling gameItemGetItemPrices.');
        }

        // verify required parameter 'currency' is not null or undefined
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling gameItemGetItemPrices.');
        }

        // verify required parameter 'saleVersion' is not null or undefined
        if (saleVersion === null || saleVersion === undefined) {
            throw new Error('Required parameter saleVersion was null or undefined when calling gameItemGetItemPrices.');
        }

        if (accountType !== undefined) {
            localVarQueryParameters['accountType'] = ObjectSerializer.serialize(accountType, "string");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (country !== undefined) {
            localVarQueryParameters['country'] = ObjectSerializer.serialize(country, "string");
        }

        if (currency !== undefined) {
            localVarQueryParameters['currency'] = ObjectSerializer.serialize(currency, "string");
        }

        if (saleVersion !== undefined) {
            localVarQueryParameters['saleVersion'] = ObjectSerializer.serialize(saleVersion, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param signature 
     */
    public async gameItemGetLevelRewardsTableJson(callNum: number, connectId: string, lastCallTime: string, sessionID: string, signature: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/getLevelRewardsTableJson';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemGetLevelRewardsTableJson.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemGetLevelRewardsTableJson.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemGetLevelRewardsTableJson.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemGetLevelRewardsTableJson.');
        }

        // verify required parameter 'signature' is not null or undefined
        if (signature === null || signature === undefined) {
            throw new Error('Required parameter signature was null or undefined when calling gameItemGetLevelRewardsTableJson.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (signature !== undefined) {
            localVarQueryParameters['signature'] = ObjectSerializer.serialize(signature, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameItemGetPersonalizedSaleItems(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/getPersonalizedSaleItems';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemGetPersonalizedSaleItems.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemGetPersonalizedSaleItems.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemGetPersonalizedSaleItems.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemGetPersonalizedSaleItems.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param saleType 
     */
    public async gameItemGetScheduledSaleAndItems(callNum: number, connectId: string, lastCallTime: string, sessionID: string, saleType: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/getScheduledSaleAndItems';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemGetScheduledSaleAndItems.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemGetScheduledSaleAndItems.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemGetScheduledSaleAndItems.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemGetScheduledSaleAndItems.');
        }

        // verify required parameter 'saleType' is not null or undefined
        if (saleType === null || saleType === undefined) {
            throw new Error('Required parameter saleType was null or undefined when calling gameItemGetScheduledSaleAndItems.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (saleType !== undefined) {
            localVarQueryParameters['saleType'] = ObjectSerializer.serialize(saleType, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param charges 
     * @param connectId 
     * @param deletes 
     * @param fromItemIDs 
     * @param lastCallTime 
     * @param sessionID 
     * @param toItemIDs 
     */
    public async gameItemMoveCharges(callNum: number, charges: number, connectId: string, deletes: number, fromItemIDs: number, lastCallTime: string, sessionID: string, toItemIDs: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/moveCharges';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemMoveCharges.');
        }

        // verify required parameter 'charges' is not null or undefined
        if (charges === null || charges === undefined) {
            throw new Error('Required parameter charges was null or undefined when calling gameItemMoveCharges.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemMoveCharges.');
        }

        // verify required parameter 'deletes' is not null or undefined
        if (deletes === null || deletes === undefined) {
            throw new Error('Required parameter deletes was null or undefined when calling gameItemMoveCharges.');
        }

        // verify required parameter 'fromItemIDs' is not null or undefined
        if (fromItemIDs === null || fromItemIDs === undefined) {
            throw new Error('Required parameter fromItemIDs was null or undefined when calling gameItemMoveCharges.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemMoveCharges.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemMoveCharges.');
        }

        // verify required parameter 'toItemIDs' is not null or undefined
        if (toItemIDs === null || toItemIDs === undefined) {
            throw new Error('Required parameter toItemIDs was null or undefined when calling gameItemMoveCharges.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (charges !== undefined) {
            localVarQueryParameters['charges'] = ObjectSerializer.serialize(charges, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (deletes !== undefined) {
            localVarQueryParameters['deletes'] = ObjectSerializer.serialize(deletes, "number");
        }

        if (fromItemIDs !== undefined) {
            localVarQueryParameters['fromItemIDs'] = ObjectSerializer.serialize(fromItemIDs, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (toItemIDs !== undefined) {
            localVarQueryParameters['toItemIDs'] = ObjectSerializer.serialize(toItemIDs, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param itemIDs 
     * @param itemLocationIDs 
     * @param lastCallTime 
     * @param posIDs 
     * @param sessionID 
     * @param slotIDs 
     */
    public async gameItemMoveItem(callNum: number, connectId: string, itemIDs: number, itemLocationIDs: number, lastCallTime: string, posIDs: number, sessionID: string, slotIDs: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/moveItem';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemMoveItem.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemMoveItem.');
        }

        // verify required parameter 'itemIDs' is not null or undefined
        if (itemIDs === null || itemIDs === undefined) {
            throw new Error('Required parameter itemIDs was null or undefined when calling gameItemMoveItem.');
        }

        // verify required parameter 'itemLocationIDs' is not null or undefined
        if (itemLocationIDs === null || itemLocationIDs === undefined) {
            throw new Error('Required parameter itemLocationIDs was null or undefined when calling gameItemMoveItem.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemMoveItem.');
        }

        // verify required parameter 'posIDs' is not null or undefined
        if (posIDs === null || posIDs === undefined) {
            throw new Error('Required parameter posIDs was null or undefined when calling gameItemMoveItem.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemMoveItem.');
        }

        // verify required parameter 'slotIDs' is not null or undefined
        if (slotIDs === null || slotIDs === undefined) {
            throw new Error('Required parameter slotIDs was null or undefined when calling gameItemMoveItem.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (itemIDs !== undefined) {
            localVarQueryParameters['itemIDs'] = ObjectSerializer.serialize(itemIDs, "number");
        }

        if (itemLocationIDs !== undefined) {
            localVarQueryParameters['itemLocationIDs'] = ObjectSerializer.serialize(itemLocationIDs, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (posIDs !== undefined) {
            localVarQueryParameters['posIDs'] = ObjectSerializer.serialize(posIDs, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (slotIDs !== undefined) {
            localVarQueryParameters['slotIDs'] = ObjectSerializer.serialize(slotIDs, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param choices 
     * @param connectId 
     * @param itemInstanceId 
     * @param itemLocationId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameItemOpenItemPack(callNum: number, choices: number, connectId: string, itemInstanceId: number, itemLocationId: number, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/openItemPack';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemOpenItemPack.');
        }

        // verify required parameter 'choices' is not null or undefined
        if (choices === null || choices === undefined) {
            throw new Error('Required parameter choices was null or undefined when calling gameItemOpenItemPack.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemOpenItemPack.');
        }

        // verify required parameter 'itemInstanceId' is not null or undefined
        if (itemInstanceId === null || itemInstanceId === undefined) {
            throw new Error('Required parameter itemInstanceId was null or undefined when calling gameItemOpenItemPack.');
        }

        // verify required parameter 'itemLocationId' is not null or undefined
        if (itemLocationId === null || itemLocationId === undefined) {
            throw new Error('Required parameter itemLocationId was null or undefined when calling gameItemOpenItemPack.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemOpenItemPack.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemOpenItemPack.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (choices !== undefined) {
            localVarQueryParameters['choices'] = ObjectSerializer.serialize(choices, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (itemInstanceId !== undefined) {
            localVarQueryParameters['itemInstance_id'] = ObjectSerializer.serialize(itemInstanceId, "number");
        }

        if (itemLocationId !== undefined) {
            localVarQueryParameters['itemLocation_id'] = ObjectSerializer.serialize(itemLocationId, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param crc 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameItemSignItem(callNum: number, connectId: string, crc: number, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/signItems';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemSignItem.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemSignItem.');
        }

        // verify required parameter 'crc' is not null or undefined
        if (crc === null || crc === undefined) {
            throw new Error('Required parameter crc was null or undefined when calling gameItemSignItem.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemSignItem.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemSignItem.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (crc !== undefined) {
            localVarQueryParameters['crc'] = ObjectSerializer.serialize(crc, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param attributeKeys 
     * @param attributeValues 
     * @param callNum 
     * @param connectId 
     * @param itemInstanceIds 
     * @param lastCallTime 
     * @param sessionID 
     * @param xpGains 
     */
    public async gameItemUpdateItemAttributes(attributeKeys: string, attributeValues: string, callNum: number, connectId: string, itemInstanceIds: number, lastCallTime: string, sessionID: string, xpGains: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/item/updateItemAttributes';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'attributeKeys' is not null or undefined
        if (attributeKeys === null || attributeKeys === undefined) {
            throw new Error('Required parameter attributeKeys was null or undefined when calling gameItemUpdateItemAttributes.');
        }

        // verify required parameter 'attributeValues' is not null or undefined
        if (attributeValues === null || attributeValues === undefined) {
            throw new Error('Required parameter attributeValues was null or undefined when calling gameItemUpdateItemAttributes.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameItemUpdateItemAttributes.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameItemUpdateItemAttributes.');
        }

        // verify required parameter 'itemInstanceIds' is not null or undefined
        if (itemInstanceIds === null || itemInstanceIds === undefined) {
            throw new Error('Required parameter itemInstanceIds was null or undefined when calling gameItemUpdateItemAttributes.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameItemUpdateItemAttributes.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameItemUpdateItemAttributes.');
        }

        // verify required parameter 'xpGains' is not null or undefined
        if (xpGains === null || xpGains === undefined) {
            throw new Error('Required parameter xpGains was null or undefined when calling gameItemUpdateItemAttributes.');
        }

        if (attributeKeys !== undefined) {
            localVarQueryParameters['attributeKeys'] = ObjectSerializer.serialize(attributeKeys, "string");
        }

        if (attributeValues !== undefined) {
            localVarQueryParameters['attributeValues'] = ObjectSerializer.serialize(attributeValues, "string");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (itemInstanceIds !== undefined) {
            localVarQueryParameters['itemInstance_ids'] = ObjectSerializer.serialize(itemInstanceIds, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (xpGains !== undefined) {
            localVarQueryParameters['xpGains'] = ObjectSerializer.serialize(xpGains, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameLeaderboardGetAvailableLeaderboards(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getAvailableLeaderboards';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetAvailableLeaderboards.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetAvailableLeaderboards.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetAvailableLeaderboards.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetAvailableLeaderboards.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param start 
     * @param count 
     * @param leaderboardId 
     * @param sortBy 
     */
    public async gameLeaderboardGetLeaderboard(callNum: number, connectId: string, lastCallTime: string, sessionID: string, start: number, count: number, leaderboardId?: number, sortBy?: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getLeaderBoard';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetLeaderboard.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetLeaderboard.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetLeaderboard.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetLeaderboard.');
        }

        // verify required parameter 'start' is not null or undefined
        if (start === null || start === undefined) {
            throw new Error('Required parameter start was null or undefined when calling gameLeaderboardGetLeaderboard.');
        }

        // verify required parameter 'count' is not null or undefined
        if (count === null || count === undefined) {
            throw new Error('Required parameter count was null or undefined when calling gameLeaderboardGetLeaderboard.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (leaderboardId !== undefined) {
            localVarQueryParameters['leaderboard_id'] = ObjectSerializer.serialize(leaderboardId, "number");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (sortBy !== undefined) {
            localVarQueryParameters['sortBy'] = ObjectSerializer.serialize(sortBy, "number");
        }

        if (count !== undefined) {
            localVarQueryParameters['count'] = ObjectSerializer.serialize(count, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param statsids 
     */
    public async gameLeaderboardGetPartyStat(callNum: number, connectId: string, lastCallTime: string, sessionID: string, statsids: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getPartyStat';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetPartyStat.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetPartyStat.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetPartyStat.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetPartyStat.');
        }

        // verify required parameter 'statsids' is not null or undefined
        if (statsids === null || statsids === undefined) {
            throw new Error('Required parameter statsids was null or undefined when calling gameLeaderboardGetPartyStat.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (statsids !== undefined) {
            localVarQueryParameters['statsids'] = ObjectSerializer.serialize(statsids, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * TODO: No request documented in Wiki, guessed parameters
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameLeaderboardGetPersonalStat(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getPersonalStat';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetPersonalStat.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetPersonalStat.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetPersonalStat.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetPersonalStat.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param profileIds 
     */
    public async gameLeaderboardGetRecentMatchHistoryGet(callNum: number, connectId: string, lastCallTime: string, sessionID: string, profileIds: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getRecentMatchHistory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetRecentMatchHistoryGet.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetRecentMatchHistoryGet.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetRecentMatchHistoryGet.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetRecentMatchHistoryGet.');
        }

        // verify required parameter 'profileIds' is not null or undefined
        if (profileIds === null || profileIds === undefined) {
            throw new Error('Required parameter profileIds was null or undefined when calling gameLeaderboardGetRecentMatchHistoryGet.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param profileIds 
     */
    public async gameLeaderboardGetRecentMatchHistoryPost(callNum: number, connectId: string, lastCallTime: string, sessionID: string, profileIds: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getRecentMatchHistory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetRecentMatchHistoryPost.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetRecentMatchHistoryPost.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetRecentMatchHistoryPost.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetRecentMatchHistoryPost.');
        }

        // verify required parameter 'profileIds' is not null or undefined
        if (profileIds === null || profileIds === undefined) {
            throw new Error('Required parameter profileIds was null or undefined when calling gameLeaderboardGetRecentMatchHistoryPost.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param profileIds 
     */
    public async gameLeaderboardGetRecentMatchSinglePlayerHistory(callNum: number, connectId: string, lastCallTime: string, sessionID: string, profileIds: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getRecentMatchSinglePlayerHistory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetRecentMatchSinglePlayerHistory.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetRecentMatchSinglePlayerHistory.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetRecentMatchSinglePlayerHistory.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetRecentMatchSinglePlayerHistory.');
        }

        // verify required parameter 'profileIds' is not null or undefined
        if (profileIds === null || profileIds === undefined) {
            throw new Error('Required parameter profileIds was null or undefined when calling gameLeaderboardGetRecentMatchSinglePlayerHistory.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param profileids 
     */
    public async gameLeaderboardGetStatGroupsByProfileIds(callNum: number, connectId: string, lastCallTime: string, sessionID: string, profileids: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getStatGroupsByProfileIDs';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetStatGroupsByProfileIds.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetStatGroupsByProfileIds.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetStatGroupsByProfileIds.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetStatGroupsByProfileIds.');
        }

        // verify required parameter 'profileids' is not null or undefined
        if (profileids === null || profileids === undefined) {
            throw new Error('Required parameter profileids was null or undefined when calling gameLeaderboardGetStatGroupsByProfileIds.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (profileids !== undefined) {
            localVarQueryParameters['profileids'] = ObjectSerializer.serialize(profileids, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param profileids 
     * @param leaderboardId 
     */
    public async gameLeaderboardGetStatsForLeaderboardByProfileName(callNum: number, connectId: string, lastCallTime: string, sessionID: string, profileids: number, leaderboardId?: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/Leaderboard/getStatsForLeaderboardByProfileName';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardGetStatsForLeaderboardByProfileName.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardGetStatsForLeaderboardByProfileName.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardGetStatsForLeaderboardByProfileName.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardGetStatsForLeaderboardByProfileName.');
        }

        // verify required parameter 'profileids' is not null or undefined
        if (profileids === null || profileids === undefined) {
            throw new Error('Required parameter profileids was null or undefined when calling gameLeaderboardGetStatsForLeaderboardByProfileName.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (leaderboardId !== undefined) {
            localVarQueryParameters['leaderboard_id'] = ObjectSerializer.serialize(leaderboardId, "number");
        }

        if (profileids !== undefined) {
            localVarQueryParameters['profileids'] = ObjectSerializer.serialize(profileids, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param avatarStatIds 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     * @param updateTypes 
     * @param values 
     */
    public async gameLeaderboardSetAvatarStatValues(avatarStatIds: number, callNum: number, connectId: string, lastCallTime: string, sessionID: string, updateTypes: number, values: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/leaderboard/setAvatarStatValues';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'avatarStatIds' is not null or undefined
        if (avatarStatIds === null || avatarStatIds === undefined) {
            throw new Error('Required parameter avatarStatIds was null or undefined when calling gameLeaderboardSetAvatarStatValues.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLeaderboardSetAvatarStatValues.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLeaderboardSetAvatarStatValues.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLeaderboardSetAvatarStatValues.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLeaderboardSetAvatarStatValues.');
        }

        // verify required parameter 'updateTypes' is not null or undefined
        if (updateTypes === null || updateTypes === undefined) {
            throw new Error('Required parameter updateTypes was null or undefined when calling gameLeaderboardSetAvatarStatValues.');
        }

        // verify required parameter 'values' is not null or undefined
        if (values === null || values === undefined) {
            throw new Error('Required parameter values was null or undefined when calling gameLeaderboardSetAvatarStatValues.');
        }

        if (avatarStatIds !== undefined) {
            localVarQueryParameters['avatarStat_ids'] = ObjectSerializer.serialize(avatarStatIds, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (updateTypes !== undefined) {
            localVarQueryParameters['updateTypes'] = ObjectSerializer.serialize(updateTypes, "number");
        }

        if (values !== undefined) {
            localVarQueryParameters['values'] = ObjectSerializer.serialize(values, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameLoginLogout(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/login/logout';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLoginLogout.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLoginLogout.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLoginLogout.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLoginLogout.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param accountType 
     * @param activeMatchId 
     * @param alias 
     * @param appID 
     * @param auth 
     * @param callNum 
     * @param clientLibVersion 
     * @param connectId 
     * @param country 
     * @param installationType 
     * @param lastCallTime 
     * @param macAddress 
     * @param majorVersion 
     * @param minorVersion 
     * @param platformUserID 
     * @param startGameToken 
     * @param syncHash 
     * @param timeoutOverride 
     * @param language 
     * @param storeLicenseToken 
     * @param title 
     */
    public async gameLoginPlatformLogin(accountType: string, activeMatchId: number, alias: string, appID: number, auth: string, callNum: number, clientLibVersion: number, connectId: string, country: string, installationType: string, lastCallTime: string, macAddress: string, majorVersion: string, minorVersion: number, platformUserID: number, startGameToken: string, syncHash: number, timeoutOverride: number, language?: string, storeLicenseToken?: string, title?: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/login/platformlogin';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'accountType' is not null or undefined
        if (accountType === null || accountType === undefined) {
            throw new Error('Required parameter accountType was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'activeMatchId' is not null or undefined
        if (activeMatchId === null || activeMatchId === undefined) {
            throw new Error('Required parameter activeMatchId was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'alias' is not null or undefined
        if (alias === null || alias === undefined) {
            throw new Error('Required parameter alias was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'appID' is not null or undefined
        if (appID === null || appID === undefined) {
            throw new Error('Required parameter appID was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'auth' is not null or undefined
        if (auth === null || auth === undefined) {
            throw new Error('Required parameter auth was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'clientLibVersion' is not null or undefined
        if (clientLibVersion === null || clientLibVersion === undefined) {
            throw new Error('Required parameter clientLibVersion was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'country' is not null or undefined
        if (country === null || country === undefined) {
            throw new Error('Required parameter country was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'installationType' is not null or undefined
        if (installationType === null || installationType === undefined) {
            throw new Error('Required parameter installationType was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'macAddress' is not null or undefined
        if (macAddress === null || macAddress === undefined) {
            throw new Error('Required parameter macAddress was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'majorVersion' is not null or undefined
        if (majorVersion === null || majorVersion === undefined) {
            throw new Error('Required parameter majorVersion was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'minorVersion' is not null or undefined
        if (minorVersion === null || minorVersion === undefined) {
            throw new Error('Required parameter minorVersion was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'platformUserID' is not null or undefined
        if (platformUserID === null || platformUserID === undefined) {
            throw new Error('Required parameter platformUserID was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'startGameToken' is not null or undefined
        if (startGameToken === null || startGameToken === undefined) {
            throw new Error('Required parameter startGameToken was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'syncHash' is not null or undefined
        if (syncHash === null || syncHash === undefined) {
            throw new Error('Required parameter syncHash was null or undefined when calling gameLoginPlatformLogin.');
        }

        // verify required parameter 'timeoutOverride' is not null or undefined
        if (timeoutOverride === null || timeoutOverride === undefined) {
            throw new Error('Required parameter timeoutOverride was null or undefined when calling gameLoginPlatformLogin.');
        }

        if (accountType !== undefined) {
            localVarQueryParameters['accountType'] = ObjectSerializer.serialize(accountType, "string");
        }

        if (activeMatchId !== undefined) {
            localVarQueryParameters['activeMatchId'] = ObjectSerializer.serialize(activeMatchId, "number");
        }

        if (alias !== undefined) {
            localVarQueryParameters['alias'] = ObjectSerializer.serialize(alias, "string");
        }

        if (appID !== undefined) {
            localVarQueryParameters['appID'] = ObjectSerializer.serialize(appID, "number");
        }

        if (auth !== undefined) {
            localVarQueryParameters['auth'] = ObjectSerializer.serialize(auth, "string");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (clientLibVersion !== undefined) {
            localVarQueryParameters['clientLibVersion'] = ObjectSerializer.serialize(clientLibVersion, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (country !== undefined) {
            localVarQueryParameters['country'] = ObjectSerializer.serialize(country, "string");
        }

        if (installationType !== undefined) {
            localVarQueryParameters['installationType'] = ObjectSerializer.serialize(installationType, "string");
        }

        if (language !== undefined) {
            localVarQueryParameters['language'] = ObjectSerializer.serialize(language, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (macAddress !== undefined) {
            localVarQueryParameters['macAddress'] = ObjectSerializer.serialize(macAddress, "string");
        }

        if (majorVersion !== undefined) {
            localVarQueryParameters['majorVersion'] = ObjectSerializer.serialize(majorVersion, "string");
        }

        if (minorVersion !== undefined) {
            localVarQueryParameters['minorVersion'] = ObjectSerializer.serialize(minorVersion, "number");
        }

        if (platformUserID !== undefined) {
            localVarQueryParameters['platformUserID'] = ObjectSerializer.serialize(platformUserID, "number");
        }

        if (startGameToken !== undefined) {
            localVarQueryParameters['startGameToken'] = ObjectSerializer.serialize(startGameToken, "string");
        }

        if (storeLicenseToken !== undefined) {
            localVarQueryParameters['storeLicenseToken'] = ObjectSerializer.serialize(storeLicenseToken, "string");
        }

        if (syncHash !== undefined) {
            localVarQueryParameters['syncHash'] = ObjectSerializer.serialize(syncHash, "number");
        }

        if (timeoutOverride !== undefined) {
            localVarQueryParameters['timeoutOverride'] = ObjectSerializer.serialize(timeoutOverride, "number");
        }

        if (title !== undefined) {
            localVarQueryParameters['title'] = ObjectSerializer.serialize(title, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param ack 
     * @param pollNum 
     * @param sessionID 
     */
    public async gameLoginReadSession(ack: number, pollNum: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/login/readSession';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'ack' is not null or undefined
        if (ack === null || ack === undefined) {
            throw new Error('Required parameter ack was null or undefined when calling gameLoginReadSession.');
        }

        // verify required parameter 'pollNum' is not null or undefined
        if (pollNum === null || pollNum === undefined) {
            throw new Error('Required parameter pollNum was null or undefined when calling gameLoginReadSession.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameLoginReadSession.');
        }

        if (ack !== undefined) {
            localVarQueryParameters['ack'] = ObjectSerializer.serialize(ack, "number");
        }

        if (pollNum !== undefined) {
            localVarQueryParameters['pollNum'] = ObjectSerializer.serialize(pollNum, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameNewsGetNews(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/news/getNews';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameNewsGetNews.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameNewsGetNews.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameNewsGetNews.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameNewsGetNews.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param appbincrc 
     * @param callNum 
     * @param connectId 
     * @param countersZip zlib-compressed
     * @param createMatchKey 
     * @param datacrc 
     * @param isComplete 
     * @param itemUpdates 
     * @param lastCallTime 
     * @param mapname 
     * @param matchKey 
     * @param matchTypeID 
     * @param modDLLChecksum 
     * @param modDLLFile 
     * @param modName 
     * @param modVersion 
     * @param options 
     * @param raceIds 
     * @param results 
     * @param sessionID 
     * @param slotInfo zlib-compressed
     * @param teamIDs 
     * @param versionFlags 
     * @param xpGained 
     */
    public async gamePartyCreateOrReportSinglePlayer(appbincrc: number, callNum: number, connectId: string, countersZip: string, createMatchKey: number, datacrc: number, isComplete: number, itemUpdates: number, lastCallTime: string, mapname: string, matchKey: string, matchTypeID: number, modDLLChecksum: number, modDLLFile: string, modName: string, modVersion: string, options: string, raceIds: number, results: number, sessionID: string, slotInfo: string, teamIDs: number, versionFlags: number, xpGained: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/party/createOrReportSinglePlayer';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'appbincrc' is not null or undefined
        if (appbincrc === null || appbincrc === undefined) {
            throw new Error('Required parameter appbincrc was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'countersZip' is not null or undefined
        if (countersZip === null || countersZip === undefined) {
            throw new Error('Required parameter countersZip was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'createMatchKey' is not null or undefined
        if (createMatchKey === null || createMatchKey === undefined) {
            throw new Error('Required parameter createMatchKey was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'datacrc' is not null or undefined
        if (datacrc === null || datacrc === undefined) {
            throw new Error('Required parameter datacrc was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'isComplete' is not null or undefined
        if (isComplete === null || isComplete === undefined) {
            throw new Error('Required parameter isComplete was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'itemUpdates' is not null or undefined
        if (itemUpdates === null || itemUpdates === undefined) {
            throw new Error('Required parameter itemUpdates was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'mapname' is not null or undefined
        if (mapname === null || mapname === undefined) {
            throw new Error('Required parameter mapname was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'matchKey' is not null or undefined
        if (matchKey === null || matchKey === undefined) {
            throw new Error('Required parameter matchKey was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'matchTypeID' is not null or undefined
        if (matchTypeID === null || matchTypeID === undefined) {
            throw new Error('Required parameter matchTypeID was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'modDLLChecksum' is not null or undefined
        if (modDLLChecksum === null || modDLLChecksum === undefined) {
            throw new Error('Required parameter modDLLChecksum was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'modDLLFile' is not null or undefined
        if (modDLLFile === null || modDLLFile === undefined) {
            throw new Error('Required parameter modDLLFile was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'modName' is not null or undefined
        if (modName === null || modName === undefined) {
            throw new Error('Required parameter modName was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'modVersion' is not null or undefined
        if (modVersion === null || modVersion === undefined) {
            throw new Error('Required parameter modVersion was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'options' is not null or undefined
        if (options === null || options === undefined) {
            throw new Error('Required parameter options was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'raceIds' is not null or undefined
        if (raceIds === null || raceIds === undefined) {
            throw new Error('Required parameter raceIds was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'results' is not null or undefined
        if (results === null || results === undefined) {
            throw new Error('Required parameter results was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'slotInfo' is not null or undefined
        if (slotInfo === null || slotInfo === undefined) {
            throw new Error('Required parameter slotInfo was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'teamIDs' is not null or undefined
        if (teamIDs === null || teamIDs === undefined) {
            throw new Error('Required parameter teamIDs was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'versionFlags' is not null or undefined
        if (versionFlags === null || versionFlags === undefined) {
            throw new Error('Required parameter versionFlags was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        // verify required parameter 'xpGained' is not null or undefined
        if (xpGained === null || xpGained === undefined) {
            throw new Error('Required parameter xpGained was null or undefined when calling gamePartyCreateOrReportSinglePlayer.');
        }

        if (appbincrc !== undefined) {
            localVarQueryParameters['appbincrc'] = ObjectSerializer.serialize(appbincrc, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (countersZip !== undefined) {
            localVarQueryParameters['countersZip'] = ObjectSerializer.serialize(countersZip, "string");
        }

        if (createMatchKey !== undefined) {
            localVarQueryParameters['createMatchKey'] = ObjectSerializer.serialize(createMatchKey, "number");
        }

        if (datacrc !== undefined) {
            localVarQueryParameters['datacrc'] = ObjectSerializer.serialize(datacrc, "number");
        }

        if (isComplete !== undefined) {
            localVarQueryParameters['isComplete'] = ObjectSerializer.serialize(isComplete, "number");
        }

        if (itemUpdates !== undefined) {
            localVarQueryParameters['itemUpdates'] = ObjectSerializer.serialize(itemUpdates, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (mapname !== undefined) {
            localVarQueryParameters['mapname'] = ObjectSerializer.serialize(mapname, "string");
        }

        if (matchKey !== undefined) {
            localVarQueryParameters['matchKey'] = ObjectSerializer.serialize(matchKey, "string");
        }

        if (matchTypeID !== undefined) {
            localVarQueryParameters['matchTypeID'] = ObjectSerializer.serialize(matchTypeID, "number");
        }

        if (modDLLChecksum !== undefined) {
            localVarQueryParameters['modDLLChecksum'] = ObjectSerializer.serialize(modDLLChecksum, "number");
        }

        if (modDLLFile !== undefined) {
            localVarQueryParameters['modDLLFile'] = ObjectSerializer.serialize(modDLLFile, "string");
        }

        if (modName !== undefined) {
            localVarQueryParameters['modName'] = ObjectSerializer.serialize(modName, "string");
        }

        if (modVersion !== undefined) {
            localVarQueryParameters['modVersion'] = ObjectSerializer.serialize(modVersion, "string");
        }

        if (options !== undefined) {
            localVarQueryParameters['options'] = ObjectSerializer.serialize(options, "string");
        }

        if (raceIds !== undefined) {
            localVarQueryParameters['race_ids'] = ObjectSerializer.serialize(raceIds, "number");
        }

        if (results !== undefined) {
            localVarQueryParameters['results'] = ObjectSerializer.serialize(results, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (slotInfo !== undefined) {
            localVarQueryParameters['slotInfo'] = ObjectSerializer.serialize(slotInfo, "string");
        }

        if (teamIDs !== undefined) {
            localVarQueryParameters['teamIDs'] = ObjectSerializer.serialize(teamIDs, "number");
        }

        if (versionFlags !== undefined) {
            localVarQueryParameters['versionFlags'] = ObjectSerializer.serialize(versionFlags, "number");
        }

        if (xpGained !== undefined) {
            localVarQueryParameters['xpGained'] = ObjectSerializer.serialize(xpGained, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param errorString 
     * @param finalizeResult 
     * @param isSinglePlayer 
     * @param lastCallTime 
     * @param matchId 
     * @param sessionID 
     * @param size 
     * @param url 
     */
    public async gamePartyFinalizeReplayUpload(callNum: number, connectId: string, errorString: string, finalizeResult: number, isSinglePlayer: number, lastCallTime: string, matchId: number, sessionID: string, size: number, url: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/party/finalizeReplayUpload';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'errorString' is not null or undefined
        if (errorString === null || errorString === undefined) {
            throw new Error('Required parameter errorString was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'finalizeResult' is not null or undefined
        if (finalizeResult === null || finalizeResult === undefined) {
            throw new Error('Required parameter finalizeResult was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'isSinglePlayer' is not null or undefined
        if (isSinglePlayer === null || isSinglePlayer === undefined) {
            throw new Error('Required parameter isSinglePlayer was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'matchId' is not null or undefined
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'size' is not null or undefined
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        // verify required parameter 'url' is not null or undefined
        if (url === null || url === undefined) {
            throw new Error('Required parameter url was null or undefined when calling gamePartyFinalizeReplayUpload.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (errorString !== undefined) {
            localVarQueryParameters['errorString'] = ObjectSerializer.serialize(errorString, "string");
        }

        if (finalizeResult !== undefined) {
            localVarQueryParameters['finalizeResult'] = ObjectSerializer.serialize(finalizeResult, "number");
        }

        if (isSinglePlayer !== undefined) {
            localVarQueryParameters['isSinglePlayer'] = ObjectSerializer.serialize(isSinglePlayer, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchId !== undefined) {
            localVarQueryParameters['match_id'] = ObjectSerializer.serialize(matchId, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "number");
        }

        if (url !== undefined) {
            localVarQueryParameters['url'] = ObjectSerializer.serialize(url, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param matchId 
     * @param profileIds 
     * @param raceIds 
     * @param sessionID 
     * @param statGroupIds 
     * @param teamIDs 
     */
    public async gamePartyPeerAdd(callNum: number, connectId: string, lastCallTime: string, matchId: number, profileIds: number, raceIds: number, sessionID: string, statGroupIds: number, teamIDs: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/party/peerAdd';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gamePartyPeerAdd.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gamePartyPeerAdd.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gamePartyPeerAdd.');
        }

        // verify required parameter 'matchId' is not null or undefined
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling gamePartyPeerAdd.');
        }

        // verify required parameter 'profileIds' is not null or undefined
        if (profileIds === null || profileIds === undefined) {
            throw new Error('Required parameter profileIds was null or undefined when calling gamePartyPeerAdd.');
        }

        // verify required parameter 'raceIds' is not null or undefined
        if (raceIds === null || raceIds === undefined) {
            throw new Error('Required parameter raceIds was null or undefined when calling gamePartyPeerAdd.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gamePartyPeerAdd.');
        }

        // verify required parameter 'statGroupIds' is not null or undefined
        if (statGroupIds === null || statGroupIds === undefined) {
            throw new Error('Required parameter statGroupIds was null or undefined when calling gamePartyPeerAdd.');
        }

        // verify required parameter 'teamIDs' is not null or undefined
        if (teamIDs === null || teamIDs === undefined) {
            throw new Error('Required parameter teamIDs was null or undefined when calling gamePartyPeerAdd.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchId !== undefined) {
            localVarQueryParameters['match_id'] = ObjectSerializer.serialize(matchId, "number");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "number");
        }

        if (raceIds !== undefined) {
            localVarQueryParameters['race_ids'] = ObjectSerializer.serialize(raceIds, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (statGroupIds !== undefined) {
            localVarQueryParameters['statGroup_ids'] = ObjectSerializer.serialize(statGroupIds, "number");
        }

        if (teamIDs !== undefined) {
            localVarQueryParameters['teamIDs'] = ObjectSerializer.serialize(teamIDs, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param isNonParticipants 
     * @param lastCallTime 
     * @param matchId 
     * @param profileIds 
     * @param raceIds 
     * @param sessionID 
     * @param teamIDs 
     */
    public async gamePartyPeerUpdate(callNum: number, connectId: string, isNonParticipants: number, lastCallTime: string, matchId: number, profileIds: number, raceIds: number, sessionID: string, teamIDs: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/party/peerUpdate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gamePartyPeerUpdate.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gamePartyPeerUpdate.');
        }

        // verify required parameter 'isNonParticipants' is not null or undefined
        if (isNonParticipants === null || isNonParticipants === undefined) {
            throw new Error('Required parameter isNonParticipants was null or undefined when calling gamePartyPeerUpdate.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gamePartyPeerUpdate.');
        }

        // verify required parameter 'matchId' is not null or undefined
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling gamePartyPeerUpdate.');
        }

        // verify required parameter 'profileIds' is not null or undefined
        if (profileIds === null || profileIds === undefined) {
            throw new Error('Required parameter profileIds was null or undefined when calling gamePartyPeerUpdate.');
        }

        // verify required parameter 'raceIds' is not null or undefined
        if (raceIds === null || raceIds === undefined) {
            throw new Error('Required parameter raceIds was null or undefined when calling gamePartyPeerUpdate.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gamePartyPeerUpdate.');
        }

        // verify required parameter 'teamIDs' is not null or undefined
        if (teamIDs === null || teamIDs === undefined) {
            throw new Error('Required parameter teamIDs was null or undefined when calling gamePartyPeerUpdate.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (isNonParticipants !== undefined) {
            localVarQueryParameters['isNonParticipants'] = ObjectSerializer.serialize(isNonParticipants, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchId !== undefined) {
            localVarQueryParameters['match_id'] = ObjectSerializer.serialize(matchId, "number");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "number");
        }

        if (raceIds !== undefined) {
            localVarQueryParameters['race_ids'] = ObjectSerializer.serialize(raceIds, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (teamIDs !== undefined) {
            localVarQueryParameters['teamIDs'] = ObjectSerializer.serialize(teamIDs, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param checkSums 
     * @param connectId 
     * @param countersZip zlib-compressed
     * @param itemUpdates 
     * @param lastCallTime 
     * @param matchId 
     * @param profileIds 
     * @param raceIds 
     * @param results 
     * @param sessionID 
     * @param simplayerIDs 
     * @param teamIDs 
     * @param xpGained 
     */
    public async gamePartyReportMatch(callNum: number, checkSums: number, connectId: string, countersZip: string, itemUpdates: number, lastCallTime: string, matchId: number, profileIds: number, raceIds: number, results: number, sessionID: string, simplayerIDs: number, teamIDs: number, xpGained: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/party/reportMatch';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'checkSums' is not null or undefined
        if (checkSums === null || checkSums === undefined) {
            throw new Error('Required parameter checkSums was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'countersZip' is not null or undefined
        if (countersZip === null || countersZip === undefined) {
            throw new Error('Required parameter countersZip was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'itemUpdates' is not null or undefined
        if (itemUpdates === null || itemUpdates === undefined) {
            throw new Error('Required parameter itemUpdates was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'matchId' is not null or undefined
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'profileIds' is not null or undefined
        if (profileIds === null || profileIds === undefined) {
            throw new Error('Required parameter profileIds was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'raceIds' is not null or undefined
        if (raceIds === null || raceIds === undefined) {
            throw new Error('Required parameter raceIds was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'results' is not null or undefined
        if (results === null || results === undefined) {
            throw new Error('Required parameter results was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'simplayerIDs' is not null or undefined
        if (simplayerIDs === null || simplayerIDs === undefined) {
            throw new Error('Required parameter simplayerIDs was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'teamIDs' is not null or undefined
        if (teamIDs === null || teamIDs === undefined) {
            throw new Error('Required parameter teamIDs was null or undefined when calling gamePartyReportMatch.');
        }

        // verify required parameter 'xpGained' is not null or undefined
        if (xpGained === null || xpGained === undefined) {
            throw new Error('Required parameter xpGained was null or undefined when calling gamePartyReportMatch.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (checkSums !== undefined) {
            localVarQueryParameters['checkSums'] = ObjectSerializer.serialize(checkSums, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (countersZip !== undefined) {
            localVarQueryParameters['countersZip'] = ObjectSerializer.serialize(countersZip, "string");
        }

        if (itemUpdates !== undefined) {
            localVarQueryParameters['itemUpdates'] = ObjectSerializer.serialize(itemUpdates, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchId !== undefined) {
            localVarQueryParameters['match_id'] = ObjectSerializer.serialize(matchId, "number");
        }

        if (profileIds !== undefined) {
            localVarQueryParameters['profile_ids'] = ObjectSerializer.serialize(profileIds, "number");
        }

        if (raceIds !== undefined) {
            localVarQueryParameters['race_ids'] = ObjectSerializer.serialize(raceIds, "number");
        }

        if (results !== undefined) {
            localVarQueryParameters['results'] = ObjectSerializer.serialize(results, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (simplayerIDs !== undefined) {
            localVarQueryParameters['simplayerIDs'] = ObjectSerializer.serialize(simplayerIDs, "number");
        }

        if (teamIDs !== undefined) {
            localVarQueryParameters['teamIDs'] = ObjectSerializer.serialize(teamIDs, "number");
        }

        if (xpGained !== undefined) {
            localVarQueryParameters['xpGained'] = ObjectSerializer.serialize(xpGained, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param broadcast aoe4: 1, aoe2de: 0
     * @param callNum 
     * @param connectId 
     * @param fromProfileId 
     * @param lastCallTime 
     * @param matchId 
     * @param message 
     * @param messageTypeID 
     * @param sessionID 
     * @param toProfileId 
     */
    public async gamePartySendMatchChat(broadcast: number, callNum: number, connectId: string, fromProfileId: number, lastCallTime: string, matchId: number, message: string, messageTypeID: number, sessionID: string, toProfileId: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/party/sendMatchChat';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'broadcast' is not null or undefined
        if (broadcast === null || broadcast === undefined) {
            throw new Error('Required parameter broadcast was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'fromProfileId' is not null or undefined
        if (fromProfileId === null || fromProfileId === undefined) {
            throw new Error('Required parameter fromProfileId was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'matchId' is not null or undefined
        if (matchId === null || matchId === undefined) {
            throw new Error('Required parameter matchId was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'message' is not null or undefined
        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'messageTypeID' is not null or undefined
        if (messageTypeID === null || messageTypeID === undefined) {
            throw new Error('Required parameter messageTypeID was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gamePartySendMatchChat.');
        }

        // verify required parameter 'toProfileId' is not null or undefined
        if (toProfileId === null || toProfileId === undefined) {
            throw new Error('Required parameter toProfileId was null or undefined when calling gamePartySendMatchChat.');
        }

        if (broadcast !== undefined) {
            localVarQueryParameters['broadcast'] = ObjectSerializer.serialize(broadcast, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (fromProfileId !== undefined) {
            localVarQueryParameters['from_profile_id'] = ObjectSerializer.serialize(fromProfileId, "number");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (matchId !== undefined) {
            localVarQueryParameters['match_id'] = ObjectSerializer.serialize(matchId, "number");
        }

        if (message !== undefined) {
            localVarQueryParameters['message'] = ObjectSerializer.serialize(message, "string");
        }

        if (messageTypeID !== undefined) {
            localVarQueryParameters['messageTypeID'] = ObjectSerializer.serialize(messageTypeID, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (toProfileId !== undefined) {
            localVarQueryParameters['to_profile_id'] = ObjectSerializer.serialize(toProfileId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param comment 
     * @param connectId 
     * @param lastCallTime 
     * @param metadata 
     * @param reportReason 7&#x3D;all reasons
     * @param reportType 
     * @param reporteeProfileId 
     * @param sessionID 
     */
    public async gamePlayerreportReportUser(callNum: number, comment: string, connectId: string, lastCallTime: string, metadata: object, reportReason: number, reportType: number, reporteeProfileId: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/playerreport/reportuser';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gamePlayerreportReportUser.');
        }

        // verify required parameter 'comment' is not null or undefined
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling gamePlayerreportReportUser.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gamePlayerreportReportUser.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gamePlayerreportReportUser.');
        }

        // verify required parameter 'metadata' is not null or undefined
        if (metadata === null || metadata === undefined) {
            throw new Error('Required parameter metadata was null or undefined when calling gamePlayerreportReportUser.');
        }

        // verify required parameter 'reportReason' is not null or undefined
        if (reportReason === null || reportReason === undefined) {
            throw new Error('Required parameter reportReason was null or undefined when calling gamePlayerreportReportUser.');
        }

        // verify required parameter 'reportType' is not null or undefined
        if (reportType === null || reportType === undefined) {
            throw new Error('Required parameter reportType was null or undefined when calling gamePlayerreportReportUser.');
        }

        // verify required parameter 'reporteeProfileId' is not null or undefined
        if (reporteeProfileId === null || reporteeProfileId === undefined) {
            throw new Error('Required parameter reporteeProfileId was null or undefined when calling gamePlayerreportReportUser.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gamePlayerreportReportUser.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (comment !== undefined) {
            localVarQueryParameters['comment'] = ObjectSerializer.serialize(comment, "string");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (metadata !== undefined) {
            localVarQueryParameters['metadata'] = ObjectSerializer.serialize(metadata, "object");
        }

        if (reportReason !== undefined) {
            localVarQueryParameters['reportReason'] = ObjectSerializer.serialize(reportReason, "number");
        }

        if (reportType !== undefined) {
            localVarQueryParameters['reportType'] = ObjectSerializer.serialize(reportType, "number");
        }

        if (reporteeProfileId !== undefined) {
            localVarQueryParameters['reportee_profile_id'] = ObjectSerializer.serialize(reporteeProfileId, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param relationType 1&#x3D;Unban, 2&#x3D;Unmute
     * @param sessionID 
     * @param targetProfileID 
     */
    public async gameRelationshipClearRelationship(callNum: number, connectId: string, lastCallTime: string, relationType: number, sessionID: string, targetProfileID: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/relationship/clearRelationship';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameRelationshipClearRelationship.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameRelationshipClearRelationship.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameRelationshipClearRelationship.');
        }

        // verify required parameter 'relationType' is not null or undefined
        if (relationType === null || relationType === undefined) {
            throw new Error('Required parameter relationType was null or undefined when calling gameRelationshipClearRelationship.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameRelationshipClearRelationship.');
        }

        // verify required parameter 'targetProfileID' is not null or undefined
        if (targetProfileID === null || targetProfileID === undefined) {
            throw new Error('Required parameter targetProfileID was null or undefined when calling gameRelationshipClearRelationship.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (relationType !== undefined) {
            localVarQueryParameters['relationType'] = ObjectSerializer.serialize(relationType, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (targetProfileID !== undefined) {
            localVarQueryParameters['targetProfileID'] = ObjectSerializer.serialize(targetProfileID, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameRelationshipGetPresenceData(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/relationship/getPresenceData';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameRelationshipGetPresenceData.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameRelationshipGetPresenceData.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameRelationshipGetPresenceData.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameRelationshipGetPresenceData.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param sessionID 
     */
    public async gameRelationshipGetRelationships(callNum: number, connectId: string, lastCallTime: string, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/relationship/getRelationships';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameRelationshipGetRelationships.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameRelationshipGetRelationships.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameRelationshipGetRelationships.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameRelationshipGetRelationships.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param blocklevel 1&#x3D;lobby ban, 2&#x3D;mute
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param relationType 1&#x3D;Unban, 2&#x3D;Unmute
     * @param sessionID 
     * @param targetProfileID 
     */
    public async gameRelationshipIgnore(blocklevel: number, callNum: number, connectId: string, lastCallTime: string, relationType: number, sessionID: string, targetProfileID: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/relationship/ignore';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'blocklevel' is not null or undefined
        if (blocklevel === null || blocklevel === undefined) {
            throw new Error('Required parameter blocklevel was null or undefined when calling gameRelationshipIgnore.');
        }

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameRelationshipIgnore.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameRelationshipIgnore.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameRelationshipIgnore.');
        }

        // verify required parameter 'relationType' is not null or undefined
        if (relationType === null || relationType === undefined) {
            throw new Error('Required parameter relationType was null or undefined when calling gameRelationshipIgnore.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameRelationshipIgnore.');
        }

        // verify required parameter 'targetProfileID' is not null or undefined
        if (targetProfileID === null || targetProfileID === undefined) {
            throw new Error('Required parameter targetProfileID was null or undefined when calling gameRelationshipIgnore.');
        }

        if (blocklevel !== undefined) {
            localVarQueryParameters['blocklevel'] = ObjectSerializer.serialize(blocklevel, "number");
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (relationType !== undefined) {
            localVarQueryParameters['relationType'] = ObjectSerializer.serialize(relationType, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (targetProfileID !== undefined) {
            localVarQueryParameters['targetProfileID'] = ObjectSerializer.serialize(targetProfileID, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param presenceId 
     * @param sessionID 
     */
    public async gameRelationshipSetPresence(callNum: number, connectId: string, lastCallTime: string, presenceId: number, sessionID: string, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/relationship/setPresence';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameRelationshipSetPresence.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameRelationshipSetPresence.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameRelationshipSetPresence.');
        }

        // verify required parameter 'presenceId' is not null or undefined
        if (presenceId === null || presenceId === undefined) {
            throw new Error('Required parameter presenceId was null or undefined when calling gameRelationshipSetPresence.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameRelationshipSetPresence.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (presenceId !== undefined) {
            localVarQueryParameters['presence_id'] = ObjectSerializer.serialize(presenceId, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param callNum 
     * @param connectId 
     * @param lastCallTime 
     * @param presencePropertyDefId 
     * @param sessionID 
     * @param value 
     */
    public async gameRelationshipSetPresenceProperty(callNum: number, connectId: string, lastCallTime: string, presencePropertyDefId: number, sessionID: string, value: number, options: { headers: { [name: string]: string } } = { headers: {} }): Promise<{ response: http.IncomingMessage; body?: any; }> {
        const localVarPath = this.basePath + '/game/relationship/setPresenceProperty';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'callNum' is not null or undefined
        if (callNum === null || callNum === undefined) {
            throw new Error('Required parameter callNum was null or undefined when calling gameRelationshipSetPresenceProperty.');
        }

        // verify required parameter 'connectId' is not null or undefined
        if (connectId === null || connectId === undefined) {
            throw new Error('Required parameter connectId was null or undefined when calling gameRelationshipSetPresenceProperty.');
        }

        // verify required parameter 'lastCallTime' is not null or undefined
        if (lastCallTime === null || lastCallTime === undefined) {
            throw new Error('Required parameter lastCallTime was null or undefined when calling gameRelationshipSetPresenceProperty.');
        }

        // verify required parameter 'presencePropertyDefId' is not null or undefined
        if (presencePropertyDefId === null || presencePropertyDefId === undefined) {
            throw new Error('Required parameter presencePropertyDefId was null or undefined when calling gameRelationshipSetPresenceProperty.');
        }

        // verify required parameter 'sessionID' is not null or undefined
        if (sessionID === null || sessionID === undefined) {
            throw new Error('Required parameter sessionID was null or undefined when calling gameRelationshipSetPresenceProperty.');
        }

        // verify required parameter 'value' is not null or undefined
        if (value === null || value === undefined) {
            throw new Error('Required parameter value was null or undefined when calling gameRelationshipSetPresenceProperty.');
        }

        if (callNum !== undefined) {
            localVarQueryParameters['callNum'] = ObjectSerializer.serialize(callNum, "number");
        }

        if (connectId !== undefined) {
            localVarQueryParameters['connect_id'] = ObjectSerializer.serialize(connectId, "string");
        }

        if (lastCallTime !== undefined) {
            localVarQueryParameters['lastCallTime'] = ObjectSerializer.serialize(lastCallTime, "string");
        }

        if (presencePropertyDefId !== undefined) {
            localVarQueryParameters['presencePropertyDef_id'] = ObjectSerializer.serialize(presencePropertyDefId, "number");
        }

        if (sessionID !== undefined) {
            localVarQueryParameters['sessionID'] = ObjectSerializer.serialize(sessionID, "string");
        }

        if (value !== undefined) {
            localVarQueryParameters['value'] = ObjectSerializer.serialize(value, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any; }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
