# coding: utf-8

"""
    Relic Link API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 22.11.02
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def community_clan_find(self, join_policies, name, tags, start, count, **kwargs):  # noqa: E501
        """community_clan_find  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_clan_find(join_policies, name, tags, start, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int join_policies: (required)
        :param str name: (required)
        :param str tags: (required)
        :param int start: (required)
        :param int count: (required)
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_clan_find_with_http_info(join_policies, name, tags, start, count, **kwargs)  # noqa: E501
        else:
            (data) = self.community_clan_find_with_http_info(join_policies, name, tags, start, count, **kwargs)  # noqa: E501
            return data

    def community_clan_find_with_http_info(self, join_policies, name, tags, start, count, **kwargs):  # noqa: E501
        """community_clan_find  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_clan_find_with_http_info(join_policies, name, tags, start, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int join_policies: (required)
        :param str name: (required)
        :param str tags: (required)
        :param int start: (required)
        :param int count: (required)
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['join_policies', 'name', 'tags', 'start', 'count', 'title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_clan_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'join_policies' is set
        if ('join_policies' not in params or
                params['join_policies'] is None):
            raise ValueError("Missing the required parameter `join_policies` when calling `community_clan_find`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `community_clan_find`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `community_clan_find`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `community_clan_find`")  # noqa: E501
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `community_clan_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'join_policies' in params:
            query_params.append(('joinPolicies', params['join_policies']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/clan/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_find_advertisements(self, **kwargs):  # noqa: E501
        """community_find_advertisements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_find_advertisements(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_find_advertisements_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_find_advertisements_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_find_advertisements_with_http_info(self, **kwargs):  # noqa: E501
        """community_find_advertisements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_find_advertisements_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_find_advertisements" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/advertisement/findAdvertisements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_achievements(self, **kwargs):  # noqa: E501
        """community_get_achievements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_achievements(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param int profileids:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_achievements_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_get_achievements_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_get_achievements_with_http_info(self, **kwargs):  # noqa: E501
        """community_get_achievements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_achievements_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param int profileids:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'profileids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_achievements" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'profileids' in params:
            query_params.append(('profileids', params['profileids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/achievement/getAchievements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_available_achievements(self, **kwargs):  # noqa: E501
        """community_get_available_achievements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_available_achievements(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_available_achievements_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_get_available_achievements_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_get_available_achievements_with_http_info(self, **kwargs):  # noqa: E501
        """community_get_available_achievements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_available_achievements_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_available_achievements" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/achievement/getAvailableAchievements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_available_community_events(self, **kwargs):  # noqa: E501
        """community_get_available_community_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_available_community_events(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_available_community_events_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_get_available_community_events_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_get_available_community_events_with_http_info(self, **kwargs):  # noqa: E501
        """community_get_available_community_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_available_community_events_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_available_community_events" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/CommunityEvent/getAvailableCommunityEvents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_available_leaderboards(self, **kwargs):  # noqa: E501
        """community_get_available_leaderboards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_available_leaderboards(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_available_leaderboards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_get_available_leaderboards_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_get_available_leaderboards_with_http_info(self, **kwargs):  # noqa: E501
        """community_get_available_leaderboards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_available_leaderboards_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_available_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/leaderboard/getAvailableLeaderboards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_avatar_stat_for_profile(self, **kwargs):  # noqa: E501
        """community_get_avatar_stat_for_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_avatar_stat_for_profile(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str profile_names:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_avatar_stat_for_profile_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_get_avatar_stat_for_profile_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_get_avatar_stat_for_profile_with_http_info(self, **kwargs):  # noqa: E501
        """community_get_avatar_stat_for_profile  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_avatar_stat_for_profile_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str profile_names:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'profile_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_avatar_stat_for_profile" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'profile_names' in params:
            query_params.append(('profile_names', params['profile_names']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/leaderboard/GetAvatarStatForProfile', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_clan_info_full(self, name, **kwargs):  # noqa: E501
        """community_get_clan_info_full  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_clan_info_full(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_clan_info_full_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.community_get_clan_info_full_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def community_get_clan_info_full_with_http_info(self, name, **kwargs):  # noqa: E501
        """community_get_clan_info_full  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_clan_info_full_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_clan_info_full" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `community_get_clan_info_full`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/clan/getClanInfoFull', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_inventory_by_profile_ids(self, **kwargs):  # noqa: E501
        """community_get_inventory_by_profile_ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_inventory_by_profile_ids(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param int profileids:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_inventory_by_profile_ids_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_get_inventory_by_profile_ids_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_get_inventory_by_profile_ids_with_http_info(self, **kwargs):  # noqa: E501
        """community_get_inventory_by_profile_ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_inventory_by_profile_ids_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param int profileids:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'profileids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_inventory_by_profile_ids" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'profileids' in params:
            query_params.append(('profileids', params['profileids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/item/getInventoryByProfileIDs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_leaderboard2(self, start, count, **kwargs):  # noqa: E501
        """community_get_leaderboard2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_leaderboard2(start, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: (required)
        :param int count: (required)
        :param str title:
        :param int leaderboard_id:
        :param int sort_by:
        :param str platform:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_leaderboard2_with_http_info(start, count, **kwargs)  # noqa: E501
        else:
            (data) = self.community_get_leaderboard2_with_http_info(start, count, **kwargs)  # noqa: E501
            return data

    def community_get_leaderboard2_with_http_info(self, start, count, **kwargs):  # noqa: E501
        """community_get_leaderboard2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_leaderboard2_with_http_info(start, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int start: (required)
        :param int count: (required)
        :param str title:
        :param int leaderboard_id:
        :param int sort_by:
        :param str platform:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start', 'count', 'title', 'leaderboard_id', 'sort_by', 'platform']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_leaderboard2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `community_get_leaderboard2`")  # noqa: E501
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `community_get_leaderboard2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'leaderboard_id' in params:
            query_params.append(('leaderboard_id', params['leaderboard_id']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'platform' in params:
            query_params.append(('platform', params['platform']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/leaderboard/getLeaderboard2', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_personal_stat(self, **kwargs):  # noqa: E501
        """community_get_personal_stat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_personal_stat(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str profile_ids:
        :param str profile_names:
        :param str aliases:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_personal_stat_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_get_personal_stat_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_get_personal_stat_with_http_info(self, **kwargs):  # noqa: E501
        """community_get_personal_stat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_personal_stat_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str profile_ids:
        :param str profile_names:
        :param str aliases:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'profile_ids', 'profile_names', 'aliases']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_personal_stat" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501
        if 'profile_names' in params:
            query_params.append(('profile_names', params['profile_names']))  # noqa: E501
        if 'aliases' in params:
            query_params.append(('aliases', params['aliases']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/leaderboard/GetPersonalStat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_get_recent_match_history(self, **kwargs):  # noqa: E501
        """community_get_recent_match_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_recent_match_history(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str profile_ids:
        :param str profile_names:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_get_recent_match_history_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_get_recent_match_history_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_get_recent_match_history_with_http_info(self, **kwargs):  # noqa: E501
        """community_get_recent_match_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_get_recent_match_history_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :param str profile_ids:
        :param str profile_names:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title', 'profile_ids', 'profile_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_get_recent_match_history" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501
        if 'profile_names' in params:
            query_params.append(('profile_names', params['profile_names']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/leaderboard/getRecentMatchHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_news(self, **kwargs):  # noqa: E501
        """community_news  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_news(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_news_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_news_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_news_with_http_info(self, **kwargs):  # noqa: E501
        """community_news  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_news_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_news" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/news', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def community_proxy_steam_user_request(self, **kwargs):  # noqa: E501
        """community_proxy_steam_user_request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_proxy_steam_user_request(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request:
        :param str title:
        :param str profile_ids:
        :param str profile_names:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.community_proxy_steam_user_request_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.community_proxy_steam_user_request_with_http_info(**kwargs)  # noqa: E501
            return data

    def community_proxy_steam_user_request_with_http_info(self, **kwargs):  # noqa: E501
        """community_proxy_steam_user_request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.community_proxy_steam_user_request_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str request:
        :param str title:
        :param str profile_ids:
        :param str profile_names:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'title', 'profile_ids', 'profile_names']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method community_proxy_steam_user_request" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request' in params:
            query_params.append(('request', params['request']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501
        if 'profile_names' in params:
            query_params.append(('profileNames', params['profile_names']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/community/external/proxysteamuserrequest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_account_find_profiles(self, call_num, connect_id, last_call_time, name, session_id, **kwargs):  # noqa: E501
        """game_account_find_profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_find_profiles(call_num, connect_id, last_call_time, name, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str name: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_account_find_profiles_with_http_info(call_num, connect_id, last_call_time, name, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_account_find_profiles_with_http_info(call_num, connect_id, last_call_time, name, session_id, **kwargs)  # noqa: E501
            return data

    def game_account_find_profiles_with_http_info(self, call_num, connect_id, last_call_time, name, session_id, **kwargs):  # noqa: E501
        """game_account_find_profiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_find_profiles_with_http_info(call_num, connect_id, last_call_time, name, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str name: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'name', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_account_find_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_account_find_profiles`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_account_find_profiles`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_account_find_profiles`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `game_account_find_profiles`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_account_find_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/account/FindProfiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_account_find_profiles_by_platform_id(self, call_num, connect_id, last_call_time, session_id, platform_i_ds, **kwargs):  # noqa: E501
        """game_account_find_profiles_by_platform_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_find_profiles_by_platform_id(call_num, connect_id, last_call_time, session_id, platform_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int platform_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_account_find_profiles_by_platform_id_with_http_info(call_num, connect_id, last_call_time, session_id, platform_i_ds, **kwargs)  # noqa: E501
        else:
            (data) = self.game_account_find_profiles_by_platform_id_with_http_info(call_num, connect_id, last_call_time, session_id, platform_i_ds, **kwargs)  # noqa: E501
            return data

    def game_account_find_profiles_by_platform_id_with_http_info(self, call_num, connect_id, last_call_time, session_id, platform_i_ds, **kwargs):  # noqa: E501
        """game_account_find_profiles_by_platform_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_find_profiles_by_platform_id_with_http_info(call_num, connect_id, last_call_time, session_id, platform_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int platform_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'platform_i_ds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_account_find_profiles_by_platform_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_account_find_profiles_by_platform_id`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_account_find_profiles_by_platform_id`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_account_find_profiles_by_platform_id`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_account_find_profiles_by_platform_id`")  # noqa: E501
        # verify the required parameter 'platform_i_ds' is set
        if ('platform_i_ds' not in params or
                params['platform_i_ds'] is None):
            raise ValueError("Missing the required parameter `platform_i_ds` when calling `game_account_find_profiles_by_platform_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'platform_i_ds' in params:
            query_params.append(('platformIDs', params['platform_i_ds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/account/FindProfilesByPlatformID', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_account_get_profile_name(self, call_num, connect_id, last_call_time, profile_ids, session_id, **kwargs):  # noqa: E501
        """game_account_get_profile_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_get_profile_name(call_num, connect_id, last_call_time, profile_ids, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int profile_ids: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_account_get_profile_name_with_http_info(call_num, connect_id, last_call_time, profile_ids, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_account_get_profile_name_with_http_info(call_num, connect_id, last_call_time, profile_ids, session_id, **kwargs)  # noqa: E501
            return data

    def game_account_get_profile_name_with_http_info(self, call_num, connect_id, last_call_time, profile_ids, session_id, **kwargs):  # noqa: E501
        """game_account_get_profile_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_get_profile_name_with_http_info(call_num, connect_id, last_call_time, profile_ids, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int profile_ids: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'profile_ids', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_account_get_profile_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_account_get_profile_name`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_account_get_profile_name`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_account_get_profile_name`")  # noqa: E501
        # verify the required parameter 'profile_ids' is set
        if ('profile_ids' not in params or
                params['profile_ids'] is None):
            raise ValueError("Missing the required parameter `profile_ids` when calling `game_account_get_profile_name`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_account_get_profile_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/account/getProfileName', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_account_get_profile_property(self, call_num, connect_id, last_call_time, session_id, profile_id, property_id, **kwargs):  # noqa: E501
        """game_account_get_profile_property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_get_profile_property(call_num, connect_id, last_call_time, session_id, profile_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_id: (required)
        :param str property_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_account_get_profile_property_with_http_info(call_num, connect_id, last_call_time, session_id, profile_id, property_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_account_get_profile_property_with_http_info(call_num, connect_id, last_call_time, session_id, profile_id, property_id, **kwargs)  # noqa: E501
            return data

    def game_account_get_profile_property_with_http_info(self, call_num, connect_id, last_call_time, session_id, profile_id, property_id, **kwargs):  # noqa: E501
        """game_account_get_profile_property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_get_profile_property_with_http_info(call_num, connect_id, last_call_time, session_id, profile_id, property_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_id: (required)
        :param str property_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'profile_id', 'property_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_account_get_profile_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_account_get_profile_property`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_account_get_profile_property`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_account_get_profile_property`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_account_get_profile_property`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `game_account_get_profile_property`")  # noqa: E501
        # verify the required parameter 'property_id' is set
        if ('property_id' not in params or
                params['property_id'] is None):
            raise ValueError("Missing the required parameter `property_id` when calling `game_account_get_profile_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'profile_id' in params:
            query_params.append(('profile_id', params['profile_id']))  # noqa: E501
        if 'property_id' in params:
            query_params.append(('property_id', params['property_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/account/getProfileProperty', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_account_set_avatar_metadata(self, call_num, connect_id, last_call_time, session_id, meta_data, **kwargs):  # noqa: E501
        """game_account_set_avatar_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_set_avatar_metadata(call_num, connect_id, last_call_time, session_id, meta_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param object meta_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_account_set_avatar_metadata_with_http_info(call_num, connect_id, last_call_time, session_id, meta_data, **kwargs)  # noqa: E501
        else:
            (data) = self.game_account_set_avatar_metadata_with_http_info(call_num, connect_id, last_call_time, session_id, meta_data, **kwargs)  # noqa: E501
            return data

    def game_account_set_avatar_metadata_with_http_info(self, call_num, connect_id, last_call_time, session_id, meta_data, **kwargs):  # noqa: E501
        """game_account_set_avatar_metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_set_avatar_metadata_with_http_info(call_num, connect_id, last_call_time, session_id, meta_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param object meta_data: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'meta_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_account_set_avatar_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_account_set_avatar_metadata`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_account_set_avatar_metadata`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_account_set_avatar_metadata`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_account_set_avatar_metadata`")  # noqa: E501
        # verify the required parameter 'meta_data' is set
        if ('meta_data' not in params or
                params['meta_data'] is None):
            raise ValueError("Missing the required parameter `meta_data` when calling `game_account_set_avatar_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'meta_data' in params:
            query_params.append(('metaData', params['meta_data']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/account/setAvatarMetadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_account_set_language(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_account_set_language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_set_language(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str title:
        :param str language:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_account_set_language_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_account_set_language_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_account_set_language_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_account_set_language  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_account_set_language_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str title:
        :param str language:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'title', 'language']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_account_set_language" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_account_set_language`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_account_set_language`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_account_set_language`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_account_set_language`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/account/setLanguage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_achievement_get_achievements(self, call_num, connect_id, last_call_time, session_id, profile_i_ds, **kwargs):  # noqa: E501
        """game_achievement_get_achievements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_achievement_get_achievements(call_num, connect_id, last_call_time, session_id, profile_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_achievement_get_achievements_with_http_info(call_num, connect_id, last_call_time, session_id, profile_i_ds, **kwargs)  # noqa: E501
        else:
            (data) = self.game_achievement_get_achievements_with_http_info(call_num, connect_id, last_call_time, session_id, profile_i_ds, **kwargs)  # noqa: E501
            return data

    def game_achievement_get_achievements_with_http_info(self, call_num, connect_id, last_call_time, session_id, profile_i_ds, **kwargs):  # noqa: E501
        """game_achievement_get_achievements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_achievement_get_achievements_with_http_info(call_num, connect_id, last_call_time, session_id, profile_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'profile_i_ds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_achievement_get_achievements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_achievement_get_achievements`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_achievement_get_achievements`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_achievement_get_achievements`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_achievement_get_achievements`")  # noqa: E501
        # verify the required parameter 'profile_i_ds' is set
        if ('profile_i_ds' not in params or
                params['profile_i_ds'] is None):
            raise ValueError("Missing the required parameter `profile_i_ds` when calling `game_achievement_get_achievements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'profile_i_ds' in params:
            query_params.append(('profileIDs', params['profile_i_ds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Achievement/getAchievements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_achievement_get_available_achievements(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_achievement_get_available_achievements  # noqa: E501

        No authentication needed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_achievement_get_available_achievements(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_achievement_get_available_achievements_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.game_achievement_get_available_achievements_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
            return data

    def game_achievement_get_available_achievements_with_http_info(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_achievement_get_available_achievements  # noqa: E501

        No authentication needed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_achievement_get_available_achievements_with_http_info(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'signature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_achievement_get_available_achievements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_achievement_get_available_achievements`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_achievement_get_available_achievements`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_achievement_get_available_achievements`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_achievement_get_available_achievements`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `game_achievement_get_available_achievements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Achievement/getAvailableAchievements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_achievement_sync_stats(self, call_num, connect_id, last_call_time, session_id, account_type, auth, **kwargs):  # noqa: E501
        """game_achievement_sync_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_achievement_sync_stats(call_num, connect_id, last_call_time, session_id, account_type, auth, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str account_type: (required)
        :param str auth: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_achievement_sync_stats_with_http_info(call_num, connect_id, last_call_time, session_id, account_type, auth, **kwargs)  # noqa: E501
        else:
            (data) = self.game_achievement_sync_stats_with_http_info(call_num, connect_id, last_call_time, session_id, account_type, auth, **kwargs)  # noqa: E501
            return data

    def game_achievement_sync_stats_with_http_info(self, call_num, connect_id, last_call_time, session_id, account_type, auth, **kwargs):  # noqa: E501
        """game_achievement_sync_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_achievement_sync_stats_with_http_info(call_num, connect_id, last_call_time, session_id, account_type, auth, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str account_type: (required)
        :param str auth: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'account_type', 'auth']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_achievement_sync_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_achievement_sync_stats`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_achievement_sync_stats`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_achievement_sync_stats`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_achievement_sync_stats`")  # noqa: E501
        # verify the required parameter 'account_type' is set
        if ('account_type' not in params or
                params['account_type'] is None):
            raise ValueError("Missing the required parameter `account_type` when calling `game_achievement_sync_stats`")  # noqa: E501
        # verify the required parameter 'auth' is set
        if ('auth' not in params or
                params['auth'] is None):
            raise ValueError("Missing the required parameter `auth` when calling `game_achievement_sync_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'account_type' in params:
            query_params.append(('accountType', params['account_type']))  # noqa: E501
        if 'auth' in params:
            query_params.append(('auth', params['auth']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/achievement/syncStats', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_find_advertisements(self, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, profile_ids, race_ids, session_id, stat_group_ids, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_find_advertisements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_find_advertisements(app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, profile_ids, race_ids, session_id, stat_group_ids, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_binary_checksum: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str last_call_time: (required)
        :param int match_type_id: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int profile_ids: (required)
        :param int race_ids: (required)
        :param str session_id: (required)
        :param int stat_group_ids: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_find_advertisements_with_http_info(app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, profile_ids, race_ids, session_id, stat_group_ids, version_flags, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_find_advertisements_with_http_info(app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, profile_ids, race_ids, session_id, stat_group_ids, version_flags, **kwargs)  # noqa: E501
            return data

    def game_advertisement_find_advertisements_with_http_info(self, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, profile_ids, race_ids, session_id, stat_group_ids, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_find_advertisements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_find_advertisements_with_http_info(app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, profile_ids, race_ids, session_id, stat_group_ids, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_binary_checksum: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str last_call_time: (required)
        :param int match_type_id: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int profile_ids: (required)
        :param int race_ids: (required)
        :param str session_id: (required)
        :param int stat_group_ids: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_binary_checksum', 'call_num', 'connect_id', 'data_checksum', 'last_call_time', 'match_type_id', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'profile_ids', 'race_ids', 'session_id', 'stat_group_ids', 'version_flags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_find_advertisements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_binary_checksum' is set
        if ('app_binary_checksum' not in params or
                params['app_binary_checksum'] is None):
            raise ValueError("Missing the required parameter `app_binary_checksum` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'data_checksum' is set
        if ('data_checksum' not in params or
                params['data_checksum'] is None):
            raise ValueError("Missing the required parameter `data_checksum` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'match_type_id' is set
        if ('match_type_id' not in params or
                params['match_type_id'] is None):
            raise ValueError("Missing the required parameter `match_type_id` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'profile_ids' is set
        if ('profile_ids' not in params or
                params['profile_ids'] is None):
            raise ValueError("Missing the required parameter `profile_ids` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'race_ids' is set
        if ('race_ids' not in params or
                params['race_ids'] is None):
            raise ValueError("Missing the required parameter `race_ids` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'stat_group_ids' is set
        if ('stat_group_ids' not in params or
                params['stat_group_ids'] is None):
            raise ValueError("Missing the required parameter `stat_group_ids` when calling `game_advertisement_find_advertisements`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_advertisement_find_advertisements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'app_binary_checksum' in params:
            query_params.append(('appBinaryChecksum', params['app_binary_checksum']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'data_checksum' in params:
            query_params.append(('dataChecksum', params['data_checksum']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_type_id' in params:
            query_params.append(('matchType_id', params['match_type_id']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501
        if 'race_ids' in params:
            query_params.append(('race_ids', params['race_ids']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'stat_group_ids' in params:
            query_params.append(('statGroup_ids', params['stat_group_ids']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/findAdvertisements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_find_observable_advertisements_get(self, call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_find_observable_advertisements_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_find_observable_advertisements_get(call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int app_binary_checksum: (required)
        :param int count: (required)
        :param int data_checksum: (required)
        :param int desc: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int observer_group_id: (required)
        :param int sort_order: (required)
        :param int start: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_find_observable_advertisements_get_with_http_info(call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_find_observable_advertisements_get_with_http_info(call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, **kwargs)  # noqa: E501
            return data

    def game_advertisement_find_observable_advertisements_get_with_http_info(self, call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_find_observable_advertisements_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_find_observable_advertisements_get_with_http_info(call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int app_binary_checksum: (required)
        :param int count: (required)
        :param int data_checksum: (required)
        :param int desc: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int observer_group_id: (required)
        :param int sort_order: (required)
        :param int start: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'app_binary_checksum', 'count', 'data_checksum', 'desc', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'observer_group_id', 'sort_order', 'start', 'version_flags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_find_observable_advertisements_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'app_binary_checksum' is set
        if ('app_binary_checksum' not in params or
                params['app_binary_checksum'] is None):
            raise ValueError("Missing the required parameter `app_binary_checksum` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'data_checksum' is set
        if ('data_checksum' not in params or
                params['data_checksum'] is None):
            raise ValueError("Missing the required parameter `data_checksum` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'desc' is set
        if ('desc' not in params or
                params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'observer_group_id' is set
        if ('observer_group_id' not in params or
                params['observer_group_id'] is None):
            raise ValueError("Missing the required parameter `observer_group_id` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'sort_order' is set
        if ('sort_order' not in params or
                params['sort_order'] is None):
            raise ValueError("Missing the required parameter `sort_order` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_advertisement_find_observable_advertisements_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'app_binary_checksum' in params:
            query_params.append(('appBinaryChecksum', params['app_binary_checksum']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'data_checksum' in params:
            query_params.append(('dataChecksum', params['data_checksum']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'observer_group_id' in params:
            query_params.append(('observerGroupID', params['observer_group_id']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/findObservableAdvertisements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_find_observable_advertisements_post(self, call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_find_observable_advertisements_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_find_observable_advertisements_post(call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int app_binary_checksum: (required)
        :param int count: (required)
        :param int data_checksum: (required)
        :param int desc: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int observer_group_id: (required)
        :param int sort_order: (required)
        :param int start: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_find_observable_advertisements_post_with_http_info(call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_find_observable_advertisements_post_with_http_info(call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, **kwargs)  # noqa: E501
            return data

    def game_advertisement_find_observable_advertisements_post_with_http_info(self, call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_find_observable_advertisements_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_find_observable_advertisements_post_with_http_info(call_num, connect_id, last_call_time, session_id, app_binary_checksum, count, data_checksum, desc, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_group_id, sort_order, start, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int app_binary_checksum: (required)
        :param int count: (required)
        :param int data_checksum: (required)
        :param int desc: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int observer_group_id: (required)
        :param int sort_order: (required)
        :param int start: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'app_binary_checksum', 'count', 'data_checksum', 'desc', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'observer_group_id', 'sort_order', 'start', 'version_flags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_find_observable_advertisements_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'app_binary_checksum' is set
        if ('app_binary_checksum' not in params or
                params['app_binary_checksum'] is None):
            raise ValueError("Missing the required parameter `app_binary_checksum` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'data_checksum' is set
        if ('data_checksum' not in params or
                params['data_checksum'] is None):
            raise ValueError("Missing the required parameter `data_checksum` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'desc' is set
        if ('desc' not in params or
                params['desc'] is None):
            raise ValueError("Missing the required parameter `desc` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'observer_group_id' is set
        if ('observer_group_id' not in params or
                params['observer_group_id'] is None):
            raise ValueError("Missing the required parameter `observer_group_id` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'sort_order' is set
        if ('sort_order' not in params or
                params['sort_order'] is None):
            raise ValueError("Missing the required parameter `sort_order` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_advertisement_find_observable_advertisements_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'app_binary_checksum' in params:
            query_params.append(('appBinaryChecksum', params['app_binary_checksum']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'data_checksum' in params:
            query_params.append(('dataChecksum', params['data_checksum']))  # noqa: E501
        if 'desc' in params:
            query_params.append(('desc', params['desc']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'observer_group_id' in params:
            query_params.append(('observerGroupID', params['observer_group_id']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/findObservableAdvertisements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_get_advertisements(self, call_num, connect_id, last_call_time, match_ids, session_id, **kwargs):  # noqa: E501
        """game_advertisement_get_advertisements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_get_advertisements(call_num, connect_id, last_call_time, match_ids, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int match_ids: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_get_advertisements_with_http_info(call_num, connect_id, last_call_time, match_ids, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_get_advertisements_with_http_info(call_num, connect_id, last_call_time, match_ids, session_id, **kwargs)  # noqa: E501
            return data

    def game_advertisement_get_advertisements_with_http_info(self, call_num, connect_id, last_call_time, match_ids, session_id, **kwargs):  # noqa: E501
        """game_advertisement_get_advertisements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_get_advertisements_with_http_info(call_num, connect_id, last_call_time, match_ids, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int match_ids: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'match_ids', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_get_advertisements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_get_advertisements`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_get_advertisements`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_get_advertisements`")  # noqa: E501
        # verify the required parameter 'match_ids' is set
        if ('match_ids' not in params or
                params['match_ids'] is None):
            raise ValueError("Missing the required parameter `match_ids` when calling `game_advertisement_get_advertisements`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_get_advertisements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_ids' in params:
            query_params.append(('match_ids', params['match_ids']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/getAdvertisements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_get_lan_advertisements(self, app_binary_checksum, call_num, connect_id, data_checksum, lan_server_guids, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, session_id, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_get_lan_advertisements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_get_lan_advertisements(app_binary_checksum, call_num, connect_id, data_checksum, lan_server_guids, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, session_id, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_binary_checksum: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str lan_server_guids: (required)
        :param str last_call_time: (required)
        :param int match_type_id: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param str session_id: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_get_lan_advertisements_with_http_info(app_binary_checksum, call_num, connect_id, data_checksum, lan_server_guids, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, session_id, version_flags, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_get_lan_advertisements_with_http_info(app_binary_checksum, call_num, connect_id, data_checksum, lan_server_guids, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, session_id, version_flags, **kwargs)  # noqa: E501
            return data

    def game_advertisement_get_lan_advertisements_with_http_info(self, app_binary_checksum, call_num, connect_id, data_checksum, lan_server_guids, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, session_id, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_get_lan_advertisements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_get_lan_advertisements_with_http_info(app_binary_checksum, call_num, connect_id, data_checksum, lan_server_guids, last_call_time, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, session_id, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_binary_checksum: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str lan_server_guids: (required)
        :param str last_call_time: (required)
        :param int match_type_id: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param str session_id: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_binary_checksum', 'call_num', 'connect_id', 'data_checksum', 'lan_server_guids', 'last_call_time', 'match_type_id', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'session_id', 'version_flags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_get_lan_advertisements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_binary_checksum' is set
        if ('app_binary_checksum' not in params or
                params['app_binary_checksum'] is None):
            raise ValueError("Missing the required parameter `app_binary_checksum` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'data_checksum' is set
        if ('data_checksum' not in params or
                params['data_checksum'] is None):
            raise ValueError("Missing the required parameter `data_checksum` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'lan_server_guids' is set
        if ('lan_server_guids' not in params or
                params['lan_server_guids'] is None):
            raise ValueError("Missing the required parameter `lan_server_guids` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'match_type_id' is set
        if ('match_type_id' not in params or
                params['match_type_id'] is None):
            raise ValueError("Missing the required parameter `match_type_id` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_advertisement_get_lan_advertisements`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'app_binary_checksum' in params:
            query_params.append(('appBinaryChecksum', params['app_binary_checksum']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'data_checksum' in params:
            query_params.append(('dataChecksum', params['data_checksum']))  # noqa: E501
        if 'lan_server_guids' in params:
            query_params.append(('lanServerGuids', params['lan_server_guids']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_type_id' in params:
            query_params.append(('matchType_id', params['match_type_id']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/getLanAdvertisements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_host(self, advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, party, password, passworded, race, relay_region, service_type, session_id, slotinfo, state, statgroup, team, version_flags, visible, **kwargs):  # noqa: E501
        """game_advertisement_host  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_host(advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, party, password, passworded, race, relay_region, service_type, session_id, slotinfo, state, statgroup, team, version_flags, visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int app_binary_checksum: (required)
        :param int automatch_poll_id: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str description: Lobby title (required)
        :param int hostid: (required)
        :param int is_observable: (required)
        :param str last_call_time: (required)
        :param str mapname: (required)
        :param int matchtype: (required)
        :param int maxplayers: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int observer_delay: (required)
        :param str observer_password: (required)
        :param str options: (required)
        :param int party: (required)
        :param str password: (required)
        :param int passworded: (required)
        :param int race: (required)
        :param str relay_region: (required)
        :param int service_type: (required)
        :param str session_id: (required)
        :param str slotinfo: zlib compressed (required)
        :param int state: (required)
        :param int statgroup: (required)
        :param int team: (required)
        :param int version_flags: (required)
        :param int visible: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_host_with_http_info(advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, party, password, passworded, race, relay_region, service_type, session_id, slotinfo, state, statgroup, team, version_flags, visible, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_host_with_http_info(advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, party, password, passworded, race, relay_region, service_type, session_id, slotinfo, state, statgroup, team, version_flags, visible, **kwargs)  # noqa: E501
            return data

    def game_advertisement_host_with_http_info(self, advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, party, password, passworded, race, relay_region, service_type, session_id, slotinfo, state, statgroup, team, version_flags, visible, **kwargs):  # noqa: E501
        """game_advertisement_host  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_host_with_http_info(advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, party, password, passworded, race, relay_region, service_type, session_id, slotinfo, state, statgroup, team, version_flags, visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int app_binary_checksum: (required)
        :param int automatch_poll_id: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str description: Lobby title (required)
        :param int hostid: (required)
        :param int is_observable: (required)
        :param str last_call_time: (required)
        :param str mapname: (required)
        :param int matchtype: (required)
        :param int maxplayers: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int observer_delay: (required)
        :param str observer_password: (required)
        :param str options: (required)
        :param int party: (required)
        :param str password: (required)
        :param int passworded: (required)
        :param int race: (required)
        :param str relay_region: (required)
        :param int service_type: (required)
        :param str session_id: (required)
        :param str slotinfo: zlib compressed (required)
        :param int state: (required)
        :param int statgroup: (required)
        :param int team: (required)
        :param int version_flags: (required)
        :param int visible: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertisementid', 'app_binary_checksum', 'automatch_poll_id', 'call_num', 'connect_id', 'data_checksum', 'description', 'hostid', 'is_observable', 'last_call_time', 'mapname', 'matchtype', 'maxplayers', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'observer_delay', 'observer_password', 'options', 'party', 'password', 'passworded', 'race', 'relay_region', 'service_type', 'session_id', 'slotinfo', 'state', 'statgroup', 'team', 'version_flags', 'visible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_host" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertisementid' is set
        if ('advertisementid' not in params or
                params['advertisementid'] is None):
            raise ValueError("Missing the required parameter `advertisementid` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'app_binary_checksum' is set
        if ('app_binary_checksum' not in params or
                params['app_binary_checksum'] is None):
            raise ValueError("Missing the required parameter `app_binary_checksum` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'automatch_poll_id' is set
        if ('automatch_poll_id' not in params or
                params['automatch_poll_id'] is None):
            raise ValueError("Missing the required parameter `automatch_poll_id` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'data_checksum' is set
        if ('data_checksum' not in params or
                params['data_checksum'] is None):
            raise ValueError("Missing the required parameter `data_checksum` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'hostid' is set
        if ('hostid' not in params or
                params['hostid'] is None):
            raise ValueError("Missing the required parameter `hostid` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'is_observable' is set
        if ('is_observable' not in params or
                params['is_observable'] is None):
            raise ValueError("Missing the required parameter `is_observable` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'mapname' is set
        if ('mapname' not in params or
                params['mapname'] is None):
            raise ValueError("Missing the required parameter `mapname` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'matchtype' is set
        if ('matchtype' not in params or
                params['matchtype'] is None):
            raise ValueError("Missing the required parameter `matchtype` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'maxplayers' is set
        if ('maxplayers' not in params or
                params['maxplayers'] is None):
            raise ValueError("Missing the required parameter `maxplayers` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'observer_delay' is set
        if ('observer_delay' not in params or
                params['observer_delay'] is None):
            raise ValueError("Missing the required parameter `observer_delay` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'observer_password' is set
        if ('observer_password' not in params or
                params['observer_password'] is None):
            raise ValueError("Missing the required parameter `observer_password` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'party' is set
        if ('party' not in params or
                params['party'] is None):
            raise ValueError("Missing the required parameter `party` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'passworded' is set
        if ('passworded' not in params or
                params['passworded'] is None):
            raise ValueError("Missing the required parameter `passworded` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'race' is set
        if ('race' not in params or
                params['race'] is None):
            raise ValueError("Missing the required parameter `race` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'relay_region' is set
        if ('relay_region' not in params or
                params['relay_region'] is None):
            raise ValueError("Missing the required parameter `relay_region` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'service_type' is set
        if ('service_type' not in params or
                params['service_type'] is None):
            raise ValueError("Missing the required parameter `service_type` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'slotinfo' is set
        if ('slotinfo' not in params or
                params['slotinfo'] is None):
            raise ValueError("Missing the required parameter `slotinfo` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'statgroup' is set
        if ('statgroup' not in params or
                params['statgroup'] is None):
            raise ValueError("Missing the required parameter `statgroup` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'team' is set
        if ('team' not in params or
                params['team'] is None):
            raise ValueError("Missing the required parameter `team` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_advertisement_host`")  # noqa: E501
        # verify the required parameter 'visible' is set
        if ('visible' not in params or
                params['visible'] is None):
            raise ValueError("Missing the required parameter `visible` when calling `game_advertisement_host`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertisementid' in params:
            query_params.append(('advertisementid', params['advertisementid']))  # noqa: E501
        if 'app_binary_checksum' in params:
            query_params.append(('appBinaryChecksum', params['app_binary_checksum']))  # noqa: E501
        if 'automatch_poll_id' in params:
            query_params.append(('automatchPoll_id', params['automatch_poll_id']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'data_checksum' in params:
            query_params.append(('dataChecksum', params['data_checksum']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'hostid' in params:
            query_params.append(('hostid', params['hostid']))  # noqa: E501
        if 'is_observable' in params:
            query_params.append(('isObservable', params['is_observable']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'mapname' in params:
            query_params.append(('mapname', params['mapname']))  # noqa: E501
        if 'matchtype' in params:
            query_params.append(('matchtype', params['matchtype']))  # noqa: E501
        if 'maxplayers' in params:
            query_params.append(('maxplayers', params['maxplayers']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'observer_delay' in params:
            query_params.append(('observerDelay', params['observer_delay']))  # noqa: E501
        if 'observer_password' in params:
            query_params.append(('observerPassword', params['observer_password']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501
        if 'party' in params:
            query_params.append(('party', params['party']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'passworded' in params:
            query_params.append(('passworded', params['passworded']))  # noqa: E501
        if 'race' in params:
            query_params.append(('race', params['race']))  # noqa: E501
        if 'relay_region' in params:
            query_params.append(('relayRegion', params['relay_region']))  # noqa: E501
        if 'service_type' in params:
            query_params.append(('serviceType', params['service_type']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'slotinfo' in params:
            query_params.append(('slotinfo', params['slotinfo']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'statgroup' in params:
            query_params.append(('statgroup', params['statgroup']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501
        if 'visible' in params:
            query_params.append(('visible', params['visible']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/host', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_join(self, advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, party, password, race, session_id, statgroup, team, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_join  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_join(advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, party, password, race, session_id, statgroup, team, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int app_binary_checksum: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str last_call_time: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int party: (required)
        :param str password: (required)
        :param int race: (required)
        :param str session_id: (required)
        :param int statgroup: (required)
        :param int team: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_join_with_http_info(advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, party, password, race, session_id, statgroup, team, version_flags, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_join_with_http_info(advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, party, password, race, session_id, statgroup, team, version_flags, **kwargs)  # noqa: E501
            return data

    def game_advertisement_join_with_http_info(self, advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, party, password, race, session_id, statgroup, team, version_flags, **kwargs):  # noqa: E501
        """game_advertisement_join  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_join_with_http_info(advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, party, password, race, session_id, statgroup, team, version_flags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int app_binary_checksum: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str last_call_time: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int party: (required)
        :param str password: (required)
        :param int race: (required)
        :param str session_id: (required)
        :param int statgroup: (required)
        :param int team: (required)
        :param int version_flags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertisementid', 'app_binary_checksum', 'call_num', 'connect_id', 'data_checksum', 'last_call_time', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'party', 'password', 'race', 'session_id', 'statgroup', 'team', 'version_flags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_join" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertisementid' is set
        if ('advertisementid' not in params or
                params['advertisementid'] is None):
            raise ValueError("Missing the required parameter `advertisementid` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'app_binary_checksum' is set
        if ('app_binary_checksum' not in params or
                params['app_binary_checksum'] is None):
            raise ValueError("Missing the required parameter `app_binary_checksum` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'data_checksum' is set
        if ('data_checksum' not in params or
                params['data_checksum'] is None):
            raise ValueError("Missing the required parameter `data_checksum` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'party' is set
        if ('party' not in params or
                params['party'] is None):
            raise ValueError("Missing the required parameter `party` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'race' is set
        if ('race' not in params or
                params['race'] is None):
            raise ValueError("Missing the required parameter `race` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'statgroup' is set
        if ('statgroup' not in params or
                params['statgroup'] is None):
            raise ValueError("Missing the required parameter `statgroup` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'team' is set
        if ('team' not in params or
                params['team'] is None):
            raise ValueError("Missing the required parameter `team` when calling `game_advertisement_join`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_advertisement_join`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertisementid' in params:
            query_params.append(('advertisementid', params['advertisementid']))  # noqa: E501
        if 'app_binary_checksum' in params:
            query_params.append(('appBinaryChecksum', params['app_binary_checksum']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'data_checksum' in params:
            query_params.append(('dataChecksum', params['data_checksum']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'party' in params:
            query_params.append(('party', params['party']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'race' in params:
            query_params.append(('race', params['race']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'statgroup' in params:
            query_params.append(('statgroup', params['statgroup']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/join', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_leave(self, advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_advertisement_leave  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_leave(advertisementid, call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_leave_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_leave_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_advertisement_leave_with_http_info(self, advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_advertisement_leave  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_leave_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertisementid', 'call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_leave" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertisementid' is set
        if ('advertisementid' not in params or
                params['advertisementid'] is None):
            raise ValueError("Missing the required parameter `advertisementid` when calling `game_advertisement_leave`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_leave`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_leave`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_leave`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_leave`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertisementid' in params:
            query_params.append(('advertisementid', params['advertisementid']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/leave', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_start_observing(self, advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, password, session_id, version_flags, with_party_session_id, **kwargs):  # noqa: E501
        """game_advertisement_start_observing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_start_observing(advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, password, session_id, version_flags, with_party_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int app_binary_checksum: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str last_call_time: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param str password: (required)
        :param str session_id: (required)
        :param int version_flags: (required)
        :param int with_party_session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_start_observing_with_http_info(advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, password, session_id, version_flags, with_party_session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_start_observing_with_http_info(advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, password, session_id, version_flags, with_party_session_id, **kwargs)  # noqa: E501
            return data

    def game_advertisement_start_observing_with_http_info(self, advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, password, session_id, version_flags, with_party_session_id, **kwargs):  # noqa: E501
        """game_advertisement_start_observing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_start_observing_with_http_info(advertisementid, app_binary_checksum, call_num, connect_id, data_checksum, last_call_time, mod_dll_checksum, mod_dll_file, mod_name, mod_version, password, session_id, version_flags, with_party_session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int app_binary_checksum: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str last_call_time: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param str password: (required)
        :param str session_id: (required)
        :param int version_flags: (required)
        :param int with_party_session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertisementid', 'app_binary_checksum', 'call_num', 'connect_id', 'data_checksum', 'last_call_time', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'password', 'session_id', 'version_flags', 'with_party_session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_start_observing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertisementid' is set
        if ('advertisementid' not in params or
                params['advertisementid'] is None):
            raise ValueError("Missing the required parameter `advertisementid` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'app_binary_checksum' is set
        if ('app_binary_checksum' not in params or
                params['app_binary_checksum'] is None):
            raise ValueError("Missing the required parameter `app_binary_checksum` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'data_checksum' is set
        if ('data_checksum' not in params or
                params['data_checksum'] is None):
            raise ValueError("Missing the required parameter `data_checksum` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_advertisement_start_observing`")  # noqa: E501
        # verify the required parameter 'with_party_session_id' is set
        if ('with_party_session_id' not in params or
                params['with_party_session_id'] is None):
            raise ValueError("Missing the required parameter `with_party_session_id` when calling `game_advertisement_start_observing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertisementid' in params:
            query_params.append(('advertisementid', params['advertisementid']))  # noqa: E501
        if 'app_binary_checksum' in params:
            query_params.append(('appBinaryChecksum', params['app_binary_checksum']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'data_checksum' in params:
            query_params.append(('dataChecksum', params['data_checksum']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501
        if 'with_party_session_id' in params:
            query_params.append(('withPartySessionID', params['with_party_session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/startObserving', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_stop_observing(self, advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_advertisement_stop_observing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_stop_observing(advertisementid, call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_stop_observing_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_stop_observing_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_advertisement_stop_observing_with_http_info(self, advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_advertisement_stop_observing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_stop_observing_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertisementid', 'call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_stop_observing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertisementid' is set
        if ('advertisementid' not in params or
                params['advertisementid'] is None):
            raise ValueError("Missing the required parameter `advertisementid` when calling `game_advertisement_stop_observing`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_stop_observing`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_stop_observing`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_stop_observing`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_stop_observing`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertisementid' in params:
            query_params.append(('advertisementid', params['advertisementid']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/stopObserving', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_update(self, advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, password, passworded, race, session_id, slotinfo, state, team, version_flags, visible, **kwargs):  # noqa: E501
        """game_advertisement_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_update(advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, password, passworded, race, session_id, slotinfo, state, team, version_flags, visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int app_binary_checksum: (required)
        :param int automatch_poll_id: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str description: Lobby title (required)
        :param int hostid: (required)
        :param int is_observable: (required)
        :param str last_call_time: (required)
        :param str mapname: (required)
        :param int matchtype: (required)
        :param int maxplayers: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int observer_delay: (required)
        :param str observer_password: (required)
        :param str options: (required)
        :param str password: (required)
        :param int passworded: (required)
        :param int race: (required)
        :param str session_id: (required)
        :param str slotinfo: zlib compressed (required)
        :param int state: (required)
        :param int team: (required)
        :param int version_flags: (required)
        :param int visible: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_update_with_http_info(advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, password, passworded, race, session_id, slotinfo, state, team, version_flags, visible, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_update_with_http_info(advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, password, passworded, race, session_id, slotinfo, state, team, version_flags, visible, **kwargs)  # noqa: E501
            return data

    def game_advertisement_update_with_http_info(self, advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, password, passworded, race, session_id, slotinfo, state, team, version_flags, visible, **kwargs):  # noqa: E501
        """game_advertisement_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_update_with_http_info(advertisementid, app_binary_checksum, automatch_poll_id, call_num, connect_id, data_checksum, description, hostid, is_observable, last_call_time, mapname, matchtype, maxplayers, mod_dll_checksum, mod_dll_file, mod_name, mod_version, observer_delay, observer_password, options, password, passworded, race, session_id, slotinfo, state, team, version_flags, visible, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int app_binary_checksum: (required)
        :param int automatch_poll_id: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_checksum: (required)
        :param str description: Lobby title (required)
        :param int hostid: (required)
        :param int is_observable: (required)
        :param str last_call_time: (required)
        :param str mapname: (required)
        :param int matchtype: (required)
        :param int maxplayers: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param int observer_delay: (required)
        :param str observer_password: (required)
        :param str options: (required)
        :param str password: (required)
        :param int passworded: (required)
        :param int race: (required)
        :param str session_id: (required)
        :param str slotinfo: zlib compressed (required)
        :param int state: (required)
        :param int team: (required)
        :param int version_flags: (required)
        :param int visible: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertisementid', 'app_binary_checksum', 'automatch_poll_id', 'call_num', 'connect_id', 'data_checksum', 'description', 'hostid', 'is_observable', 'last_call_time', 'mapname', 'matchtype', 'maxplayers', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'observer_delay', 'observer_password', 'options', 'password', 'passworded', 'race', 'session_id', 'slotinfo', 'state', 'team', 'version_flags', 'visible']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertisementid' is set
        if ('advertisementid' not in params or
                params['advertisementid'] is None):
            raise ValueError("Missing the required parameter `advertisementid` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'app_binary_checksum' is set
        if ('app_binary_checksum' not in params or
                params['app_binary_checksum'] is None):
            raise ValueError("Missing the required parameter `app_binary_checksum` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'automatch_poll_id' is set
        if ('automatch_poll_id' not in params or
                params['automatch_poll_id'] is None):
            raise ValueError("Missing the required parameter `automatch_poll_id` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'data_checksum' is set
        if ('data_checksum' not in params or
                params['data_checksum'] is None):
            raise ValueError("Missing the required parameter `data_checksum` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'hostid' is set
        if ('hostid' not in params or
                params['hostid'] is None):
            raise ValueError("Missing the required parameter `hostid` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'is_observable' is set
        if ('is_observable' not in params or
                params['is_observable'] is None):
            raise ValueError("Missing the required parameter `is_observable` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'mapname' is set
        if ('mapname' not in params or
                params['mapname'] is None):
            raise ValueError("Missing the required parameter `mapname` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'matchtype' is set
        if ('matchtype' not in params or
                params['matchtype'] is None):
            raise ValueError("Missing the required parameter `matchtype` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'maxplayers' is set
        if ('maxplayers' not in params or
                params['maxplayers'] is None):
            raise ValueError("Missing the required parameter `maxplayers` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'observer_delay' is set
        if ('observer_delay' not in params or
                params['observer_delay'] is None):
            raise ValueError("Missing the required parameter `observer_delay` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'observer_password' is set
        if ('observer_password' not in params or
                params['observer_password'] is None):
            raise ValueError("Missing the required parameter `observer_password` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'passworded' is set
        if ('passworded' not in params or
                params['passworded'] is None):
            raise ValueError("Missing the required parameter `passworded` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'race' is set
        if ('race' not in params or
                params['race'] is None):
            raise ValueError("Missing the required parameter `race` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'slotinfo' is set
        if ('slotinfo' not in params or
                params['slotinfo'] is None):
            raise ValueError("Missing the required parameter `slotinfo` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'state' is set
        if ('state' not in params or
                params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'team' is set
        if ('team' not in params or
                params['team'] is None):
            raise ValueError("Missing the required parameter `team` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_advertisement_update`")  # noqa: E501
        # verify the required parameter 'visible' is set
        if ('visible' not in params or
                params['visible'] is None):
            raise ValueError("Missing the required parameter `visible` when calling `game_advertisement_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertisementid' in params:
            query_params.append(('advertisementid', params['advertisementid']))  # noqa: E501
        if 'app_binary_checksum' in params:
            query_params.append(('appBinaryChecksum', params['app_binary_checksum']))  # noqa: E501
        if 'automatch_poll_id' in params:
            query_params.append(('automatchPoll_id', params['automatch_poll_id']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'data_checksum' in params:
            query_params.append(('dataChecksum', params['data_checksum']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'hostid' in params:
            query_params.append(('hostid', params['hostid']))  # noqa: E501
        if 'is_observable' in params:
            query_params.append(('isObservable', params['is_observable']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'mapname' in params:
            query_params.append(('mapname', params['mapname']))  # noqa: E501
        if 'matchtype' in params:
            query_params.append(('matchtype', params['matchtype']))  # noqa: E501
        if 'maxplayers' in params:
            query_params.append(('maxplayers', params['maxplayers']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'observer_delay' in params:
            query_params.append(('observerDelay', params['observer_delay']))  # noqa: E501
        if 'observer_password' in params:
            query_params.append(('observerPassword', params['observer_password']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501
        if 'password' in params:
            query_params.append(('password', params['password']))  # noqa: E501
        if 'passworded' in params:
            query_params.append(('passworded', params['passworded']))  # noqa: E501
        if 'race' in params:
            query_params.append(('race', params['race']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'slotinfo' in params:
            query_params.append(('slotinfo', params['slotinfo']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501
        if 'visible' in params:
            query_params.append(('visible', params['visible']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_update_platform_lobby_id(self, call_num, connect_id, last_call_time, match_id, platformlobby_id, session_id, **kwargs):  # noqa: E501
        """game_advertisement_update_platform_lobby_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_update_platform_lobby_id(call_num, connect_id, last_call_time, match_id, platformlobby_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int platformlobby_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_update_platform_lobby_id_with_http_info(call_num, connect_id, last_call_time, match_id, platformlobby_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_update_platform_lobby_id_with_http_info(call_num, connect_id, last_call_time, match_id, platformlobby_id, session_id, **kwargs)  # noqa: E501
            return data

    def game_advertisement_update_platform_lobby_id_with_http_info(self, call_num, connect_id, last_call_time, match_id, platformlobby_id, session_id, **kwargs):  # noqa: E501
        """game_advertisement_update_platform_lobby_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_update_platform_lobby_id_with_http_info(call_num, connect_id, last_call_time, match_id, platformlobby_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int platformlobby_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'match_id', 'platformlobby_id', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_update_platform_lobby_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_update_platform_lobby_id`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_update_platform_lobby_id`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_update_platform_lobby_id`")  # noqa: E501
        # verify the required parameter 'match_id' is set
        if ('match_id' not in params or
                params['match_id'] is None):
            raise ValueError("Missing the required parameter `match_id` when calling `game_advertisement_update_platform_lobby_id`")  # noqa: E501
        # verify the required parameter 'platformlobby_id' is set
        if ('platformlobby_id' not in params or
                params['platformlobby_id'] is None):
            raise ValueError("Missing the required parameter `platformlobby_id` when calling `game_advertisement_update_platform_lobby_id`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_update_platform_lobby_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_id' in params:
            query_params.append(('matchID', params['match_id']))  # noqa: E501
        if 'platformlobby_id' in params:
            query_params.append(('platformlobbyID', params['platformlobby_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/updatePlatformLobbyID', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_update_state(self, advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_advertisement_update_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_update_state(advertisementid, call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_update_state_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_update_state_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_advertisement_update_state_with_http_info(self, advertisementid, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_advertisement_update_state  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_update_state_with_http_info(advertisementid, call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertisementid', 'call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_update_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertisementid' is set
        if ('advertisementid' not in params or
                params['advertisementid'] is None):
            raise ValueError("Missing the required parameter `advertisementid` when calling `game_advertisement_update_state`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_update_state`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_update_state`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_update_state`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_update_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertisementid' in params:
            query_params.append(('advertisementid', params['advertisementid']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/updateState', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_advertisement_update_tags(self, advertisementid, call_num, connect_id, last_call_time, numeric_tag_names, numeric_tag_values, session_id, string_tag_names, string_tag_values, **kwargs):  # noqa: E501
        """game_advertisement_update_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_update_tags(advertisementid, call_num, connect_id, last_call_time, numeric_tag_names, numeric_tag_values, session_id, string_tag_names, string_tag_values, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str numeric_tag_names: (required)
        :param int numeric_tag_values: (required)
        :param str session_id: (required)
        :param str string_tag_names: (required)
        :param str string_tag_values: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_advertisement_update_tags_with_http_info(advertisementid, call_num, connect_id, last_call_time, numeric_tag_names, numeric_tag_values, session_id, string_tag_names, string_tag_values, **kwargs)  # noqa: E501
        else:
            (data) = self.game_advertisement_update_tags_with_http_info(advertisementid, call_num, connect_id, last_call_time, numeric_tag_names, numeric_tag_values, session_id, string_tag_names, string_tag_values, **kwargs)  # noqa: E501
            return data

    def game_advertisement_update_tags_with_http_info(self, advertisementid, call_num, connect_id, last_call_time, numeric_tag_names, numeric_tag_values, session_id, string_tag_names, string_tag_values, **kwargs):  # noqa: E501
        """game_advertisement_update_tags  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_advertisement_update_tags_with_http_info(advertisementid, call_num, connect_id, last_call_time, numeric_tag_names, numeric_tag_values, session_id, string_tag_names, string_tag_values, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int advertisementid: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str numeric_tag_names: (required)
        :param int numeric_tag_values: (required)
        :param str session_id: (required)
        :param str string_tag_names: (required)
        :param str string_tag_values: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['advertisementid', 'call_num', 'connect_id', 'last_call_time', 'numeric_tag_names', 'numeric_tag_values', 'session_id', 'string_tag_names', 'string_tag_values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_advertisement_update_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'advertisementid' is set
        if ('advertisementid' not in params or
                params['advertisementid'] is None):
            raise ValueError("Missing the required parameter `advertisementid` when calling `game_advertisement_update_tags`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_advertisement_update_tags`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_advertisement_update_tags`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_advertisement_update_tags`")  # noqa: E501
        # verify the required parameter 'numeric_tag_names' is set
        if ('numeric_tag_names' not in params or
                params['numeric_tag_names'] is None):
            raise ValueError("Missing the required parameter `numeric_tag_names` when calling `game_advertisement_update_tags`")  # noqa: E501
        # verify the required parameter 'numeric_tag_values' is set
        if ('numeric_tag_values' not in params or
                params['numeric_tag_values'] is None):
            raise ValueError("Missing the required parameter `numeric_tag_values` when calling `game_advertisement_update_tags`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_advertisement_update_tags`")  # noqa: E501
        # verify the required parameter 'string_tag_names' is set
        if ('string_tag_names' not in params or
                params['string_tag_names'] is None):
            raise ValueError("Missing the required parameter `string_tag_names` when calling `game_advertisement_update_tags`")  # noqa: E501
        # verify the required parameter 'string_tag_values' is set
        if ('string_tag_values' not in params or
                params['string_tag_values'] is None):
            raise ValueError("Missing the required parameter `string_tag_values` when calling `game_advertisement_update_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'advertisementid' in params:
            query_params.append(('advertisementid', params['advertisementid']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'numeric_tag_names' in params:
            query_params.append(('numericTagNames', params['numeric_tag_names']))  # noqa: E501
        if 'numeric_tag_values' in params:
            query_params.append(('numericTagValues', params['numeric_tag_values']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'string_tag_names' in params:
            query_params.append(('stringTagNames', params['string_tag_names']))  # noqa: E501
        if 'string_tag_values' in params:
            query_params.append(('stringTagValues', params['string_tag_values']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/advertisement/updateTags', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_automatch2_get_automatch_map(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_automatch2_get_automatch_map  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch2_get_automatch_map(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_automatch2_get_automatch_map_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_automatch2_get_automatch_map_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_automatch2_get_automatch_map_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_automatch2_get_automatch_map  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch2_get_automatch_map_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_automatch2_get_automatch_map" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_automatch2_get_automatch_map`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_automatch2_get_automatch_map`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_automatch2_get_automatch_map`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_automatch2_get_automatch_map`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/automatch2/getAutomatchMap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_automatch2_polling(self, app_bin_crc, call_num, connect_id, data_crc, faction_i_ds, last_call_time, match_types, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, party_session_id, race_info_key, race_info_profile_id, race_info_race_id, relay_ping_times, relay_region, relay_regions, session_id, version_flags, veto_map_key, veto_maps, **kwargs):  # noqa: E501
        """game_automatch2_polling  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch2_polling(app_bin_crc, call_num, connect_id, data_crc, faction_i_ds, last_call_time, match_types, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, party_session_id, race_info_key, race_info_profile_id, race_info_race_id, relay_ping_times, relay_region, relay_regions, session_id, version_flags, veto_map_key, veto_maps, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_bin_crc: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_crc: backwards appBinCRC? (required)
        :param int faction_i_ds: (required)
        :param str last_call_time: (required)
        :param int match_types: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param str options: (required)
        :param int party_session_id: (required)
        :param int race_info_key: (required)
        :param int race_info_profile_id: (required)
        :param int race_info_race_id: (required)
        :param int relay_ping_times: (required)
        :param str relay_region: (required)
        :param str relay_regions: (required)
        :param str session_id: (required)
        :param int version_flags: (required)
        :param int veto_map_key: (required)
        :param str veto_maps: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_automatch2_polling_with_http_info(app_bin_crc, call_num, connect_id, data_crc, faction_i_ds, last_call_time, match_types, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, party_session_id, race_info_key, race_info_profile_id, race_info_race_id, relay_ping_times, relay_region, relay_regions, session_id, version_flags, veto_map_key, veto_maps, **kwargs)  # noqa: E501
        else:
            (data) = self.game_automatch2_polling_with_http_info(app_bin_crc, call_num, connect_id, data_crc, faction_i_ds, last_call_time, match_types, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, party_session_id, race_info_key, race_info_profile_id, race_info_race_id, relay_ping_times, relay_region, relay_regions, session_id, version_flags, veto_map_key, veto_maps, **kwargs)  # noqa: E501
            return data

    def game_automatch2_polling_with_http_info(self, app_bin_crc, call_num, connect_id, data_crc, faction_i_ds, last_call_time, match_types, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, party_session_id, race_info_key, race_info_profile_id, race_info_race_id, relay_ping_times, relay_region, relay_regions, session_id, version_flags, veto_map_key, veto_maps, **kwargs):  # noqa: E501
        """game_automatch2_polling  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch2_polling_with_http_info(app_bin_crc, call_num, connect_id, data_crc, faction_i_ds, last_call_time, match_types, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, party_session_id, race_info_key, race_info_profile_id, race_info_race_id, relay_ping_times, relay_region, relay_regions, session_id, version_flags, veto_map_key, veto_maps, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int app_bin_crc: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int data_crc: backwards appBinCRC? (required)
        :param int faction_i_ds: (required)
        :param str last_call_time: (required)
        :param int match_types: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param str options: (required)
        :param int party_session_id: (required)
        :param int race_info_key: (required)
        :param int race_info_profile_id: (required)
        :param int race_info_race_id: (required)
        :param int relay_ping_times: (required)
        :param str relay_region: (required)
        :param str relay_regions: (required)
        :param str session_id: (required)
        :param int version_flags: (required)
        :param int veto_map_key: (required)
        :param str veto_maps: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['app_bin_crc', 'call_num', 'connect_id', 'data_crc', 'faction_i_ds', 'last_call_time', 'match_types', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'options', 'party_session_id', 'race_info_key', 'race_info_profile_id', 'race_info_race_id', 'relay_ping_times', 'relay_region', 'relay_regions', 'session_id', 'version_flags', 'veto_map_key', 'veto_maps']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_automatch2_polling" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'app_bin_crc' is set
        if ('app_bin_crc' not in params or
                params['app_bin_crc'] is None):
            raise ValueError("Missing the required parameter `app_bin_crc` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'data_crc' is set
        if ('data_crc' not in params or
                params['data_crc'] is None):
            raise ValueError("Missing the required parameter `data_crc` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'faction_i_ds' is set
        if ('faction_i_ds' not in params or
                params['faction_i_ds'] is None):
            raise ValueError("Missing the required parameter `faction_i_ds` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'match_types' is set
        if ('match_types' not in params or
                params['match_types'] is None):
            raise ValueError("Missing the required parameter `match_types` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'party_session_id' is set
        if ('party_session_id' not in params or
                params['party_session_id'] is None):
            raise ValueError("Missing the required parameter `party_session_id` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'race_info_key' is set
        if ('race_info_key' not in params or
                params['race_info_key'] is None):
            raise ValueError("Missing the required parameter `race_info_key` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'race_info_profile_id' is set
        if ('race_info_profile_id' not in params or
                params['race_info_profile_id'] is None):
            raise ValueError("Missing the required parameter `race_info_profile_id` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'race_info_race_id' is set
        if ('race_info_race_id' not in params or
                params['race_info_race_id'] is None):
            raise ValueError("Missing the required parameter `race_info_race_id` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'relay_ping_times' is set
        if ('relay_ping_times' not in params or
                params['relay_ping_times'] is None):
            raise ValueError("Missing the required parameter `relay_ping_times` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'relay_region' is set
        if ('relay_region' not in params or
                params['relay_region'] is None):
            raise ValueError("Missing the required parameter `relay_region` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'relay_regions' is set
        if ('relay_regions' not in params or
                params['relay_regions'] is None):
            raise ValueError("Missing the required parameter `relay_regions` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'veto_map_key' is set
        if ('veto_map_key' not in params or
                params['veto_map_key'] is None):
            raise ValueError("Missing the required parameter `veto_map_key` when calling `game_automatch2_polling`")  # noqa: E501
        # verify the required parameter 'veto_maps' is set
        if ('veto_maps' not in params or
                params['veto_maps'] is None):
            raise ValueError("Missing the required parameter `veto_maps` when calling `game_automatch2_polling`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'app_bin_crc' in params:
            query_params.append(('appBinCRC', params['app_bin_crc']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'data_crc' in params:
            query_params.append(('dataCRC', params['data_crc']))  # noqa: E501
        if 'faction_i_ds' in params:
            query_params.append(('factionIDs', params['faction_i_ds']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_types' in params:
            query_params.append(('matchTypes', params['match_types']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501
        if 'party_session_id' in params:
            query_params.append(('partySessionID', params['party_session_id']))  # noqa: E501
        if 'race_info_key' in params:
            query_params.append(('raceInfoKey', params['race_info_key']))  # noqa: E501
        if 'race_info_profile_id' in params:
            query_params.append(('raceInfoProfileID', params['race_info_profile_id']))  # noqa: E501
        if 'race_info_race_id' in params:
            query_params.append(('raceInfoRaceID', params['race_info_race_id']))  # noqa: E501
        if 'relay_ping_times' in params:
            query_params.append(('relayPingTimes', params['relay_ping_times']))  # noqa: E501
        if 'relay_region' in params:
            query_params.append(('relayRegion', params['relay_region']))  # noqa: E501
        if 'relay_regions' in params:
            query_params.append(('relayRegions', params['relay_regions']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501
        if 'veto_map_key' in params:
            query_params.append(('vetoMapKey', params['veto_map_key']))  # noqa: E501
        if 'veto_maps' in params:
            query_params.append(('vetoMaps', params['veto_maps']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/automatch2/polling', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_automatch2_stop_polling(self, call_num, commit, connect_id, last_call_time, owner_profile_id, session_id, **kwargs):  # noqa: E501
        """game_automatch2_stop_polling  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch2_stop_polling(call_num, commit, connect_id, last_call_time, owner_profile_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int commit: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int owner_profile_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_automatch2_stop_polling_with_http_info(call_num, commit, connect_id, last_call_time, owner_profile_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_automatch2_stop_polling_with_http_info(call_num, commit, connect_id, last_call_time, owner_profile_id, session_id, **kwargs)  # noqa: E501
            return data

    def game_automatch2_stop_polling_with_http_info(self, call_num, commit, connect_id, last_call_time, owner_profile_id, session_id, **kwargs):  # noqa: E501
        """game_automatch2_stop_polling  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch2_stop_polling_with_http_info(call_num, commit, connect_id, last_call_time, owner_profile_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int commit: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int owner_profile_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'commit', 'connect_id', 'last_call_time', 'owner_profile_id', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_automatch2_stop_polling" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_automatch2_stop_polling`")  # noqa: E501
        # verify the required parameter 'commit' is set
        if ('commit' not in params or
                params['commit'] is None):
            raise ValueError("Missing the required parameter `commit` when calling `game_automatch2_stop_polling`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_automatch2_stop_polling`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_automatch2_stop_polling`")  # noqa: E501
        # verify the required parameter 'owner_profile_id' is set
        if ('owner_profile_id' not in params or
                params['owner_profile_id'] is None):
            raise ValueError("Missing the required parameter `owner_profile_id` when calling `game_automatch2_stop_polling`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_automatch2_stop_polling`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'commit' in params:
            query_params.append(('commit', params['commit']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'owner_profile_id' in params:
            query_params.append(('ownerProfileID', params['owner_profile_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/automatch2/stoppolling', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_automatch2_update_status(self, call_num, connect_id, last_call_time, match_id, result, result_code, session_id, **kwargs):  # noqa: E501
        """game_automatch2_update_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch2_update_status(call_num, connect_id, last_call_time, match_id, result, result_code, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int result: (required)
        :param int result_code: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_automatch2_update_status_with_http_info(call_num, connect_id, last_call_time, match_id, result, result_code, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_automatch2_update_status_with_http_info(call_num, connect_id, last_call_time, match_id, result, result_code, session_id, **kwargs)  # noqa: E501
            return data

    def game_automatch2_update_status_with_http_info(self, call_num, connect_id, last_call_time, match_id, result, result_code, session_id, **kwargs):  # noqa: E501
        """game_automatch2_update_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch2_update_status_with_http_info(call_num, connect_id, last_call_time, match_id, result, result_code, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int result: (required)
        :param int result_code: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'match_id', 'result', 'result_code', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_automatch2_update_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_automatch2_update_status`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_automatch2_update_status`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_automatch2_update_status`")  # noqa: E501
        # verify the required parameter 'match_id' is set
        if ('match_id' not in params or
                params['match_id'] is None):
            raise ValueError("Missing the required parameter `match_id` when calling `game_automatch2_update_status`")  # noqa: E501
        # verify the required parameter 'result' is set
        if ('result' not in params or
                params['result'] is None):
            raise ValueError("Missing the required parameter `result` when calling `game_automatch2_update_status`")  # noqa: E501
        # verify the required parameter 'result_code' is set
        if ('result_code' not in params or
                params['result_code'] is None):
            raise ValueError("Missing the required parameter `result_code` when calling `game_automatch2_update_status`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_automatch2_update_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_id' in params:
            query_params.append(('matchID', params['match_id']))  # noqa: E501
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
        if 'result_code' in params:
            query_params.append(('resultCode', params['result_code']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/automatch2/updateStatus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_automatch_get_automatch_map(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_automatch_get_automatch_map  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch_get_automatch_map(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_automatch_get_automatch_map_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_automatch_get_automatch_map_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_automatch_get_automatch_map_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_automatch_get_automatch_map  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_automatch_get_automatch_map_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_automatch_get_automatch_map" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_automatch_get_automatch_map`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_automatch_get_automatch_map`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_automatch_get_automatch_map`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_automatch_get_automatch_map`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/automatch/getAutomatchMap', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_challenge_get_challenge_progress(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_challenge_get_challenge_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_challenge_get_challenge_progress(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_challenge_get_challenge_progress_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_challenge_get_challenge_progress_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_challenge_get_challenge_progress_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_challenge_get_challenge_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_challenge_get_challenge_progress_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_challenge_get_challenge_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_challenge_get_challenge_progress`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_challenge_get_challenge_progress`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_challenge_get_challenge_progress`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_challenge_get_challenge_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Challenge/getChallengeProgress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_challenge_get_challenge_progress_by_profile_id(self, call_num, connect_id, last_call_time, profile_id, session_id, **kwargs):  # noqa: E501
        """game_challenge_get_challenge_progress_by_profile_id  # noqa: E501

        TODO: Request not available in Wiki, this is guessed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_challenge_get_challenge_progress_by_profile_id(call_num, connect_id, last_call_time, profile_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int profile_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_challenge_get_challenge_progress_by_profile_id_with_http_info(call_num, connect_id, last_call_time, profile_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_challenge_get_challenge_progress_by_profile_id_with_http_info(call_num, connect_id, last_call_time, profile_id, session_id, **kwargs)  # noqa: E501
            return data

    def game_challenge_get_challenge_progress_by_profile_id_with_http_info(self, call_num, connect_id, last_call_time, profile_id, session_id, **kwargs):  # noqa: E501
        """game_challenge_get_challenge_progress_by_profile_id  # noqa: E501

        TODO: Request not available in Wiki, this is guessed  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_challenge_get_challenge_progress_by_profile_id_with_http_info(call_num, connect_id, last_call_time, profile_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int profile_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'profile_id', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_challenge_get_challenge_progress_by_profile_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_challenge_get_challenge_progress_by_profile_id`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_challenge_get_challenge_progress_by_profile_id`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_challenge_get_challenge_progress_by_profile_id`")  # noqa: E501
        # verify the required parameter 'profile_id' is set
        if ('profile_id' not in params or
                params['profile_id'] is None):
            raise ValueError("Missing the required parameter `profile_id` when calling `game_challenge_get_challenge_progress_by_profile_id`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_challenge_get_challenge_progress_by_profile_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'profile_id' in params:
            query_params.append(('profile_id', params['profile_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Challenge/getChallengeProgressByProfileID', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_challenge_get_challenges(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_challenge_get_challenges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_challenge_get_challenges(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_challenge_get_challenges_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.game_challenge_get_challenges_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
            return data

    def game_challenge_get_challenges_with_http_info(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_challenge_get_challenges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_challenge_get_challenges_with_http_info(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'signature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_challenge_get_challenges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_challenge_get_challenges`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_challenge_get_challenges`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_challenge_get_challenges`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_challenge_get_challenges`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `game_challenge_get_challenges`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Challenge/getChallenges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_challenge_update_progress_batched(self, call_num, connect_id, last_call_time, progress_i_ds, session_id, update_amounts, **kwargs):  # noqa: E501
        """game_challenge_update_progress_batched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_challenge_update_progress_batched(call_num, connect_id, last_call_time, progress_i_ds, session_id, update_amounts, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int progress_i_ds: (required)
        :param str session_id: (required)
        :param int update_amounts: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_challenge_update_progress_batched_with_http_info(call_num, connect_id, last_call_time, progress_i_ds, session_id, update_amounts, **kwargs)  # noqa: E501
        else:
            (data) = self.game_challenge_update_progress_batched_with_http_info(call_num, connect_id, last_call_time, progress_i_ds, session_id, update_amounts, **kwargs)  # noqa: E501
            return data

    def game_challenge_update_progress_batched_with_http_info(self, call_num, connect_id, last_call_time, progress_i_ds, session_id, update_amounts, **kwargs):  # noqa: E501
        """game_challenge_update_progress_batched  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_challenge_update_progress_batched_with_http_info(call_num, connect_id, last_call_time, progress_i_ds, session_id, update_amounts, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int progress_i_ds: (required)
        :param str session_id: (required)
        :param int update_amounts: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'progress_i_ds', 'session_id', 'update_amounts']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_challenge_update_progress_batched" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_challenge_update_progress_batched`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_challenge_update_progress_batched`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_challenge_update_progress_batched`")  # noqa: E501
        # verify the required parameter 'progress_i_ds' is set
        if ('progress_i_ds' not in params or
                params['progress_i_ds'] is None):
            raise ValueError("Missing the required parameter `progress_i_ds` when calling `game_challenge_update_progress_batched`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_challenge_update_progress_batched`")  # noqa: E501
        # verify the required parameter 'update_amounts' is set
        if ('update_amounts' not in params or
                params['update_amounts'] is None):
            raise ValueError("Missing the required parameter `update_amounts` when calling `game_challenge_update_progress_batched`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'progress_i_ds' in params:
            query_params.append(('progressIDs', params['progress_i_ds']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'update_amounts' in params:
            query_params.append(('updateAmounts', params['update_amounts']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/challenge/updateProgressBatched', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_chat_delete_offline_message(self, call_num, connect_id, last_call_time, message_id, session_id, **kwargs):  # noqa: E501
        """game_chat_delete_offline_message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_chat_delete_offline_message(call_num, connect_id, last_call_time, message_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int message_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_chat_delete_offline_message_with_http_info(call_num, connect_id, last_call_time, message_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_chat_delete_offline_message_with_http_info(call_num, connect_id, last_call_time, message_id, session_id, **kwargs)  # noqa: E501
            return data

    def game_chat_delete_offline_message_with_http_info(self, call_num, connect_id, last_call_time, message_id, session_id, **kwargs):  # noqa: E501
        """game_chat_delete_offline_message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_chat_delete_offline_message_with_http_info(call_num, connect_id, last_call_time, message_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int message_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'message_id', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_chat_delete_offline_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_chat_delete_offline_message`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_chat_delete_offline_message`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_chat_delete_offline_message`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `game_chat_delete_offline_message`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_chat_delete_offline_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'message_id' in params:
            query_params.append(('messageID', params['message_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/chat/deleteOfflineMessage', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_chat_get_chat_channels(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_chat_get_chat_channels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_chat_get_chat_channels(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_chat_get_chat_channels_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_chat_get_chat_channels_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_chat_get_chat_channels_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_chat_get_chat_channels  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_chat_get_chat_channels_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_chat_get_chat_channels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_chat_get_chat_channels`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_chat_get_chat_channels`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_chat_get_chat_channels`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_chat_get_chat_channels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/chat/getChatChannels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_chat_get_offline_messages(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_chat_get_offline_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_chat_get_offline_messages(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_chat_get_offline_messages_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_chat_get_offline_messages_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_chat_get_offline_messages_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_chat_get_offline_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_chat_get_offline_messages_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_chat_get_offline_messages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_chat_get_offline_messages`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_chat_get_offline_messages`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_chat_get_offline_messages`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_chat_get_offline_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/chat/getOfflineMessages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_clan_apply(self, call_num, clan_list_name, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_clan_apply  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_apply(call_num, clan_list_name, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str clan_list_name: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_clan_apply_with_http_info(call_num, clan_list_name, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_clan_apply_with_http_info(call_num, clan_list_name, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_clan_apply_with_http_info(self, call_num, clan_list_name, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_clan_apply  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_apply_with_http_info(call_num, clan_list_name, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str clan_list_name: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'clan_list_name', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_clan_apply" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_clan_apply`")  # noqa: E501
        # verify the required parameter 'clan_list_name' is set
        if ('clan_list_name' not in params or
                params['clan_list_name'] is None):
            raise ValueError("Missing the required parameter `clan_list_name` when calling `game_clan_apply`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_clan_apply`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_clan_apply`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_clan_apply`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'clan_list_name' in params:
            query_params.append(('clanList_name', params['clan_list_name']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/clan/apply', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_clan_create(self, call_num, chat, connect_id, cost, demote, description, disband, edit_info, edit_permission, full_name, icon, invite, item_price_id, join_policy, last_call_time, loc_string_id, message_of_the_day, metadata, name, paymentitem, permission_name, promote, rank, remove, session_id, tags, **kwargs):  # noqa: E501
        """game_clan_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_create(call_num, chat, connect_id, cost, demote, description, disband, edit_info, edit_permission, full_name, icon, invite, item_price_id, join_policy, last_call_time, loc_string_id, message_of_the_day, metadata, name, paymentitem, permission_name, promote, rank, remove, session_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str chat: (required)
        :param str connect_id: (required)
        :param int cost: (required)
        :param str demote: (required)
        :param str description: Lobby title (required)
        :param str disband: (required)
        :param str edit_info: (required)
        :param str edit_permission: (required)
        :param str full_name: (required)
        :param str icon: (required)
        :param str invite: (required)
        :param int item_price_id: (required)
        :param int join_policy: (required)
        :param str last_call_time: (required)
        :param int loc_string_id: (required)
        :param str message_of_the_day: (required)
        :param object metadata: (required)
        :param str name: (required)
        :param int paymentitem: (required)
        :param str permission_name: (required)
        :param str promote: (required)
        :param str rank: (required)
        :param str remove: (required)
        :param str session_id: (required)
        :param str tags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_clan_create_with_http_info(call_num, chat, connect_id, cost, demote, description, disband, edit_info, edit_permission, full_name, icon, invite, item_price_id, join_policy, last_call_time, loc_string_id, message_of_the_day, metadata, name, paymentitem, permission_name, promote, rank, remove, session_id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.game_clan_create_with_http_info(call_num, chat, connect_id, cost, demote, description, disband, edit_info, edit_permission, full_name, icon, invite, item_price_id, join_policy, last_call_time, loc_string_id, message_of_the_day, metadata, name, paymentitem, permission_name, promote, rank, remove, session_id, tags, **kwargs)  # noqa: E501
            return data

    def game_clan_create_with_http_info(self, call_num, chat, connect_id, cost, demote, description, disband, edit_info, edit_permission, full_name, icon, invite, item_price_id, join_policy, last_call_time, loc_string_id, message_of_the_day, metadata, name, paymentitem, permission_name, promote, rank, remove, session_id, tags, **kwargs):  # noqa: E501
        """game_clan_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_create_with_http_info(call_num, chat, connect_id, cost, demote, description, disband, edit_info, edit_permission, full_name, icon, invite, item_price_id, join_policy, last_call_time, loc_string_id, message_of_the_day, metadata, name, paymentitem, permission_name, promote, rank, remove, session_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str chat: (required)
        :param str connect_id: (required)
        :param int cost: (required)
        :param str demote: (required)
        :param str description: Lobby title (required)
        :param str disband: (required)
        :param str edit_info: (required)
        :param str edit_permission: (required)
        :param str full_name: (required)
        :param str icon: (required)
        :param str invite: (required)
        :param int item_price_id: (required)
        :param int join_policy: (required)
        :param str last_call_time: (required)
        :param int loc_string_id: (required)
        :param str message_of_the_day: (required)
        :param object metadata: (required)
        :param str name: (required)
        :param int paymentitem: (required)
        :param str permission_name: (required)
        :param str promote: (required)
        :param str rank: (required)
        :param str remove: (required)
        :param str session_id: (required)
        :param str tags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'chat', 'connect_id', 'cost', 'demote', 'description', 'disband', 'edit_info', 'edit_permission', 'full_name', 'icon', 'invite', 'item_price_id', 'join_policy', 'last_call_time', 'loc_string_id', 'message_of_the_day', 'metadata', 'name', 'paymentitem', 'permission_name', 'promote', 'rank', 'remove', 'session_id', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_clan_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'chat' is set
        if ('chat' not in params or
                params['chat'] is None):
            raise ValueError("Missing the required parameter `chat` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'cost' is set
        if ('cost' not in params or
                params['cost'] is None):
            raise ValueError("Missing the required parameter `cost` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'demote' is set
        if ('demote' not in params or
                params['demote'] is None):
            raise ValueError("Missing the required parameter `demote` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'disband' is set
        if ('disband' not in params or
                params['disband'] is None):
            raise ValueError("Missing the required parameter `disband` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'edit_info' is set
        if ('edit_info' not in params or
                params['edit_info'] is None):
            raise ValueError("Missing the required parameter `edit_info` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'edit_permission' is set
        if ('edit_permission' not in params or
                params['edit_permission'] is None):
            raise ValueError("Missing the required parameter `edit_permission` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'full_name' is set
        if ('full_name' not in params or
                params['full_name'] is None):
            raise ValueError("Missing the required parameter `full_name` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'icon' is set
        if ('icon' not in params or
                params['icon'] is None):
            raise ValueError("Missing the required parameter `icon` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'invite' is set
        if ('invite' not in params or
                params['invite'] is None):
            raise ValueError("Missing the required parameter `invite` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'item_price_id' is set
        if ('item_price_id' not in params or
                params['item_price_id'] is None):
            raise ValueError("Missing the required parameter `item_price_id` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'join_policy' is set
        if ('join_policy' not in params or
                params['join_policy'] is None):
            raise ValueError("Missing the required parameter `join_policy` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'loc_string_id' is set
        if ('loc_string_id' not in params or
                params['loc_string_id'] is None):
            raise ValueError("Missing the required parameter `loc_string_id` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'message_of_the_day' is set
        if ('message_of_the_day' not in params or
                params['message_of_the_day'] is None):
            raise ValueError("Missing the required parameter `message_of_the_day` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'paymentitem' is set
        if ('paymentitem' not in params or
                params['paymentitem'] is None):
            raise ValueError("Missing the required parameter `paymentitem` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'permission_name' is set
        if ('permission_name' not in params or
                params['permission_name'] is None):
            raise ValueError("Missing the required parameter `permission_name` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'promote' is set
        if ('promote' not in params or
                params['promote'] is None):
            raise ValueError("Missing the required parameter `promote` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'rank' is set
        if ('rank' not in params or
                params['rank'] is None):
            raise ValueError("Missing the required parameter `rank` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'remove' is set
        if ('remove' not in params or
                params['remove'] is None):
            raise ValueError("Missing the required parameter `remove` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_clan_create`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `game_clan_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'chat' in params:
            query_params.append(('chat', params['chat']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'cost' in params:
            query_params.append(('cost', params['cost']))  # noqa: E501
        if 'demote' in params:
            query_params.append(('demote', params['demote']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'disband' in params:
            query_params.append(('disband', params['disband']))  # noqa: E501
        if 'edit_info' in params:
            query_params.append(('editInfo', params['edit_info']))  # noqa: E501
        if 'edit_permission' in params:
            query_params.append(('editPermission', params['edit_permission']))  # noqa: E501
        if 'full_name' in params:
            query_params.append(('fullName', params['full_name']))  # noqa: E501
        if 'icon' in params:
            query_params.append(('icon', params['icon']))  # noqa: E501
        if 'invite' in params:
            query_params.append(('invite', params['invite']))  # noqa: E501
        if 'item_price_id' in params:
            query_params.append(('itemPrice_id', params['item_price_id']))  # noqa: E501
        if 'join_policy' in params:
            query_params.append(('joinPolicy', params['join_policy']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'loc_string_id' in params:
            query_params.append(('locStringID', params['loc_string_id']))  # noqa: E501
        if 'message_of_the_day' in params:
            query_params.append(('messageOfTheDay', params['message_of_the_day']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'paymentitem' in params:
            query_params.append(('paymentitem', params['paymentitem']))  # noqa: E501
        if 'permission_name' in params:
            query_params.append(('permissionName', params['permission_name']))  # noqa: E501
        if 'promote' in params:
            query_params.append(('promote', params['promote']))  # noqa: E501
        if 'rank' in params:
            query_params.append(('rank', params['rank']))  # noqa: E501
        if 'remove' in params:
            query_params.append(('remove', params['remove']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/clan/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_clan_disband(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_clan_disband  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_disband(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_clan_disband_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_clan_disband_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_clan_disband_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_clan_disband  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_disband_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_clan_disband" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_clan_disband`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_clan_disband`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_clan_disband`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_clan_disband`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/clan/disband', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_clan_find(self, call_num, connect_id, count, join_policies, last_call_time, name, session_id, start, tags, **kwargs):  # noqa: E501
        """game_clan_find  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_find(call_num, connect_id, count, join_policies, last_call_time, name, session_id, start, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int count: (required)
        :param int join_policies: (required)
        :param str last_call_time: (required)
        :param str name: (required)
        :param str session_id: (required)
        :param int start: (required)
        :param str tags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_clan_find_with_http_info(call_num, connect_id, count, join_policies, last_call_time, name, session_id, start, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.game_clan_find_with_http_info(call_num, connect_id, count, join_policies, last_call_time, name, session_id, start, tags, **kwargs)  # noqa: E501
            return data

    def game_clan_find_with_http_info(self, call_num, connect_id, count, join_policies, last_call_time, name, session_id, start, tags, **kwargs):  # noqa: E501
        """game_clan_find  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_find_with_http_info(call_num, connect_id, count, join_policies, last_call_time, name, session_id, start, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int count: (required)
        :param int join_policies: (required)
        :param str last_call_time: (required)
        :param str name: (required)
        :param str session_id: (required)
        :param int start: (required)
        :param str tags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'count', 'join_policies', 'last_call_time', 'name', 'session_id', 'start', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_clan_find" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_clan_find`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_clan_find`")  # noqa: E501
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `game_clan_find`")  # noqa: E501
        # verify the required parameter 'join_policies' is set
        if ('join_policies' not in params or
                params['join_policies'] is None):
            raise ValueError("Missing the required parameter `join_policies` when calling `game_clan_find`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_clan_find`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `game_clan_find`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_clan_find`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `game_clan_find`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `game_clan_find`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'join_policies' in params:
            query_params.append(('joinPolicies', params['join_policies']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/clan/find', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_clan_get_clan(self, call_num, connect_id, last_call_time, names, session_id, **kwargs):  # noqa: E501
        """game_clan_get_clan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_get_clan(call_num, connect_id, last_call_time, names, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str names: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_clan_get_clan_with_http_info(call_num, connect_id, last_call_time, names, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_clan_get_clan_with_http_info(call_num, connect_id, last_call_time, names, session_id, **kwargs)  # noqa: E501
            return data

    def game_clan_get_clan_with_http_info(self, call_num, connect_id, last_call_time, names, session_id, **kwargs):  # noqa: E501
        """game_clan_get_clan  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_get_clan_with_http_info(call_num, connect_id, last_call_time, names, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str names: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'names', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_clan_get_clan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_clan_get_clan`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_clan_get_clan`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_clan_get_clan`")  # noqa: E501
        # verify the required parameter 'names' is set
        if ('names' not in params or
                params['names'] is None):
            raise ValueError("Missing the required parameter `names` when calling `game_clan_get_clan`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_clan_get_clan`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/clan/getClan', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_clan_get_clan_info_full(self, call_num, connect_id, last_call_time, name, session_id, **kwargs):  # noqa: E501
        """game_clan_get_clan_info_full  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_get_clan_info_full(call_num, connect_id, last_call_time, name, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str name: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_clan_get_clan_info_full_with_http_info(call_num, connect_id, last_call_time, name, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_clan_get_clan_info_full_with_http_info(call_num, connect_id, last_call_time, name, session_id, **kwargs)  # noqa: E501
            return data

    def game_clan_get_clan_info_full_with_http_info(self, call_num, connect_id, last_call_time, name, session_id, **kwargs):  # noqa: E501
        """game_clan_get_clan_info_full  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_get_clan_info_full_with_http_info(call_num, connect_id, last_call_time, name, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str name: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'name', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_clan_get_clan_info_full" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_clan_get_clan_info_full`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_clan_get_clan_info_full`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_clan_get_clan_info_full`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `game_clan_get_clan_info_full`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_clan_get_clan_info_full`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/clan/getClanInfoFull', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_clan_update(self, call_num, clan_list_id, connect_id, description, icon, join_policy, last_call_time, message_of_the_day, metadata, session_id, tags, **kwargs):  # noqa: E501
        """game_clan_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_update(call_num, clan_list_id, connect_id, description, icon, join_policy, last_call_time, message_of_the_day, metadata, session_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int clan_list_id: (required)
        :param str connect_id: (required)
        :param str description: Lobby title (required)
        :param str icon: (required)
        :param int join_policy: (required)
        :param str last_call_time: (required)
        :param str message_of_the_day: (required)
        :param object metadata: (required)
        :param str session_id: (required)
        :param str tags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_clan_update_with_http_info(call_num, clan_list_id, connect_id, description, icon, join_policy, last_call_time, message_of_the_day, metadata, session_id, tags, **kwargs)  # noqa: E501
        else:
            (data) = self.game_clan_update_with_http_info(call_num, clan_list_id, connect_id, description, icon, join_policy, last_call_time, message_of_the_day, metadata, session_id, tags, **kwargs)  # noqa: E501
            return data

    def game_clan_update_with_http_info(self, call_num, clan_list_id, connect_id, description, icon, join_policy, last_call_time, message_of_the_day, metadata, session_id, tags, **kwargs):  # noqa: E501
        """game_clan_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_clan_update_with_http_info(call_num, clan_list_id, connect_id, description, icon, join_policy, last_call_time, message_of_the_day, metadata, session_id, tags, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int clan_list_id: (required)
        :param str connect_id: (required)
        :param str description: Lobby title (required)
        :param str icon: (required)
        :param int join_policy: (required)
        :param str last_call_time: (required)
        :param str message_of_the_day: (required)
        :param object metadata: (required)
        :param str session_id: (required)
        :param str tags: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'clan_list_id', 'connect_id', 'description', 'icon', 'join_policy', 'last_call_time', 'message_of_the_day', 'metadata', 'session_id', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_clan_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'clan_list_id' is set
        if ('clan_list_id' not in params or
                params['clan_list_id'] is None):
            raise ValueError("Missing the required parameter `clan_list_id` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'icon' is set
        if ('icon' not in params or
                params['icon'] is None):
            raise ValueError("Missing the required parameter `icon` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'join_policy' is set
        if ('join_policy' not in params or
                params['join_policy'] is None):
            raise ValueError("Missing the required parameter `join_policy` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'message_of_the_day' is set
        if ('message_of_the_day' not in params or
                params['message_of_the_day'] is None):
            raise ValueError("Missing the required parameter `message_of_the_day` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_clan_update`")  # noqa: E501
        # verify the required parameter 'tags' is set
        if ('tags' not in params or
                params['tags'] is None):
            raise ValueError("Missing the required parameter `tags` when calling `game_clan_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'clan_list_id' in params:
            query_params.append(('clanList_id', params['clan_list_id']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'icon' in params:
            query_params.append(('icon', params['icon']))  # noqa: E501
        if 'join_policy' in params:
            query_params.append(('joinPolicy', params['join_policy']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'message_of_the_day' in params:
            query_params.append(('messageOfTheDay', params['message_of_the_day']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'tags' in params:
            query_params.append(('tags', params['tags']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/clan/update', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_cloud_get_file_url_get(self, call_num, connect_id, last_call_time, names, session_id, **kwargs):  # noqa: E501
        """game_cloud_get_file_url_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_cloud_get_file_url_get(call_num, connect_id, last_call_time, names, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str names: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_cloud_get_file_url_get_with_http_info(call_num, connect_id, last_call_time, names, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_cloud_get_file_url_get_with_http_info(call_num, connect_id, last_call_time, names, session_id, **kwargs)  # noqa: E501
            return data

    def game_cloud_get_file_url_get_with_http_info(self, call_num, connect_id, last_call_time, names, session_id, **kwargs):  # noqa: E501
        """game_cloud_get_file_url_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_cloud_get_file_url_get_with_http_info(call_num, connect_id, last_call_time, names, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str names: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'names', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_cloud_get_file_url_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_cloud_get_file_url_get`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_cloud_get_file_url_get`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_cloud_get_file_url_get`")  # noqa: E501
        # verify the required parameter 'names' is set
        if ('names' not in params or
                params['names'] is None):
            raise ValueError("Missing the required parameter `names` when calling `game_cloud_get_file_url_get`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_cloud_get_file_url_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/cloud/getFileURL', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_cloud_get_file_url_post(self, call_num, connect_id, last_call_time, names, session_id, **kwargs):  # noqa: E501
        """game_cloud_get_file_url_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_cloud_get_file_url_post(call_num, connect_id, last_call_time, names, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str names: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_cloud_get_file_url_post_with_http_info(call_num, connect_id, last_call_time, names, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_cloud_get_file_url_post_with_http_info(call_num, connect_id, last_call_time, names, session_id, **kwargs)  # noqa: E501
            return data

    def game_cloud_get_file_url_post_with_http_info(self, call_num, connect_id, last_call_time, names, session_id, **kwargs):  # noqa: E501
        """game_cloud_get_file_url_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_cloud_get_file_url_post_with_http_info(call_num, connect_id, last_call_time, names, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str names: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'names', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_cloud_get_file_url_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_cloud_get_file_url_post`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_cloud_get_file_url_post`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_cloud_get_file_url_post`")  # noqa: E501
        # verify the required parameter 'names' is set
        if ('names' not in params or
                params['names'] is None):
            raise ValueError("Missing the required parameter `names` when calling `game_cloud_get_file_url_post`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_cloud_get_file_url_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'names' in params:
            query_params.append(('names', params['names']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/cloud/getFileURL', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_cloud_get_temp_credentials(self, call_num, connect_id, last_call_time, session_id, key, **kwargs):  # noqa: E501
        """game_cloud_get_temp_credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_cloud_get_temp_credentials(call_num, connect_id, last_call_time, session_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str key: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_cloud_get_temp_credentials_with_http_info(call_num, connect_id, last_call_time, session_id, key, **kwargs)  # noqa: E501
        else:
            (data) = self.game_cloud_get_temp_credentials_with_http_info(call_num, connect_id, last_call_time, session_id, key, **kwargs)  # noqa: E501
            return data

    def game_cloud_get_temp_credentials_with_http_info(self, call_num, connect_id, last_call_time, session_id, key, **kwargs):  # noqa: E501
        """game_cloud_get_temp_credentials  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_cloud_get_temp_credentials_with_http_info(call_num, connect_id, last_call_time, session_id, key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str key: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_cloud_get_temp_credentials" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_cloud_get_temp_credentials`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_cloud_get_temp_credentials`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_cloud_get_temp_credentials`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_cloud_get_temp_credentials`")  # noqa: E501
        # verify the required parameter 'key' is set
        if ('key' not in params or
                params['key'] is None):
            raise ValueError("Missing the required parameter `key` when calling `game_cloud_get_temp_credentials`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'key' in params:
            query_params.append(('key', params['key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/cloud/getTempCredentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_community_event_get_available_community_events(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_community_event_get_available_community_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_community_event_get_available_community_events(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_community_event_get_available_community_events_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_community_event_get_available_community_events_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_community_event_get_available_community_events_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_community_event_get_available_community_events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_community_event_get_available_community_events_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_community_event_get_available_community_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_community_event_get_available_community_events`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_community_event_get_available_community_events`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_community_event_get_available_community_events`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_community_event_get_available_community_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/CommunityEvent/getAvailableCommunityEvents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_community_event_get_event_challenge_progress(self, call_num, connect_id, event_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_community_event_get_event_challenge_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_community_event_get_event_challenge_progress(call_num, connect_id, event_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int event_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_community_event_get_event_challenge_progress_with_http_info(call_num, connect_id, event_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_community_event_get_event_challenge_progress_with_http_info(call_num, connect_id, event_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_community_event_get_event_challenge_progress_with_http_info(self, call_num, connect_id, event_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_community_event_get_event_challenge_progress  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_community_event_get_event_challenge_progress_with_http_info(call_num, connect_id, event_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int event_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'event_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_community_event_get_event_challenge_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_community_event_get_event_challenge_progress`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_community_event_get_event_challenge_progress`")  # noqa: E501
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `game_community_event_get_event_challenge_progress`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_community_event_get_event_challenge_progress`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_community_event_get_event_challenge_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'event_id' in params:
            query_params.append(('event_id', params['event_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/CommunityEvent/getEventChallengeProgress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_community_event_get_event_stats(self, call_num, connect_id, event_id, group_type, last_call_time, member_id, session_id, **kwargs):  # noqa: E501
        """game_community_event_get_event_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_community_event_get_event_stats(call_num, connect_id, event_id, group_type, last_call_time, member_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int event_id: (required)
        :param int group_type: (required)
        :param str last_call_time: (required)
        :param int member_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_community_event_get_event_stats_with_http_info(call_num, connect_id, event_id, group_type, last_call_time, member_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_community_event_get_event_stats_with_http_info(call_num, connect_id, event_id, group_type, last_call_time, member_id, session_id, **kwargs)  # noqa: E501
            return data

    def game_community_event_get_event_stats_with_http_info(self, call_num, connect_id, event_id, group_type, last_call_time, member_id, session_id, **kwargs):  # noqa: E501
        """game_community_event_get_event_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_community_event_get_event_stats_with_http_info(call_num, connect_id, event_id, group_type, last_call_time, member_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int event_id: (required)
        :param int group_type: (required)
        :param str last_call_time: (required)
        :param int member_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'event_id', 'group_type', 'last_call_time', 'member_id', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_community_event_get_event_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_community_event_get_event_stats`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_community_event_get_event_stats`")  # noqa: E501
        # verify the required parameter 'event_id' is set
        if ('event_id' not in params or
                params['event_id'] is None):
            raise ValueError("Missing the required parameter `event_id` when calling `game_community_event_get_event_stats`")  # noqa: E501
        # verify the required parameter 'group_type' is set
        if ('group_type' not in params or
                params['group_type'] is None):
            raise ValueError("Missing the required parameter `group_type` when calling `game_community_event_get_event_stats`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_community_event_get_event_stats`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params or
                params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `game_community_event_get_event_stats`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_community_event_get_event_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'event_id' in params:
            query_params.append(('event_id', params['event_id']))  # noqa: E501
        if 'group_type' in params:
            query_params.append(('group_type', params['group_type']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'member_id' in params:
            query_params.append(('member_id', params['member_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/CommunityEvent/getEventStats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_invitation_cancel_invitation(self, call_num, connect_id, gatheringid, inviteeid, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_invitation_cancel_invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_invitation_cancel_invitation(call_num, connect_id, gatheringid, inviteeid, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int gatheringid: (required)
        :param int inviteeid: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_invitation_cancel_invitation_with_http_info(call_num, connect_id, gatheringid, inviteeid, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_invitation_cancel_invitation_with_http_info(call_num, connect_id, gatheringid, inviteeid, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_invitation_cancel_invitation_with_http_info(self, call_num, connect_id, gatheringid, inviteeid, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_invitation_cancel_invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_invitation_cancel_invitation_with_http_info(call_num, connect_id, gatheringid, inviteeid, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int gatheringid: (required)
        :param int inviteeid: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'gatheringid', 'inviteeid', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_invitation_cancel_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_invitation_cancel_invitation`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_invitation_cancel_invitation`")  # noqa: E501
        # verify the required parameter 'gatheringid' is set
        if ('gatheringid' not in params or
                params['gatheringid'] is None):
            raise ValueError("Missing the required parameter `gatheringid` when calling `game_invitation_cancel_invitation`")  # noqa: E501
        # verify the required parameter 'inviteeid' is set
        if ('inviteeid' not in params or
                params['inviteeid'] is None):
            raise ValueError("Missing the required parameter `inviteeid` when calling `game_invitation_cancel_invitation`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_invitation_cancel_invitation`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_invitation_cancel_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'gatheringid' in params:
            query_params.append(('gatheringid', params['gatheringid']))  # noqa: E501
        if 'inviteeid' in params:
            query_params.append(('inviteeid', params['inviteeid']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/invitation/cancelInvitation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_invitation_extend_invitation(self, call_num, connect_id, gatheringid, gatheringpassword, inviteeid, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_invitation_extend_invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_invitation_extend_invitation(call_num, connect_id, gatheringid, gatheringpassword, inviteeid, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int gatheringid: (required)
        :param str gatheringpassword: (required)
        :param int inviteeid: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_invitation_extend_invitation_with_http_info(call_num, connect_id, gatheringid, gatheringpassword, inviteeid, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_invitation_extend_invitation_with_http_info(call_num, connect_id, gatheringid, gatheringpassword, inviteeid, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_invitation_extend_invitation_with_http_info(self, call_num, connect_id, gatheringid, gatheringpassword, inviteeid, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_invitation_extend_invitation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_invitation_extend_invitation_with_http_info(call_num, connect_id, gatheringid, gatheringpassword, inviteeid, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int gatheringid: (required)
        :param str gatheringpassword: (required)
        :param int inviteeid: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'gatheringid', 'gatheringpassword', 'inviteeid', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_invitation_extend_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_invitation_extend_invitation`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_invitation_extend_invitation`")  # noqa: E501
        # verify the required parameter 'gatheringid' is set
        if ('gatheringid' not in params or
                params['gatheringid'] is None):
            raise ValueError("Missing the required parameter `gatheringid` when calling `game_invitation_extend_invitation`")  # noqa: E501
        # verify the required parameter 'gatheringpassword' is set
        if ('gatheringpassword' not in params or
                params['gatheringpassword'] is None):
            raise ValueError("Missing the required parameter `gatheringpassword` when calling `game_invitation_extend_invitation`")  # noqa: E501
        # verify the required parameter 'inviteeid' is set
        if ('inviteeid' not in params or
                params['inviteeid'] is None):
            raise ValueError("Missing the required parameter `inviteeid` when calling `game_invitation_extend_invitation`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_invitation_extend_invitation`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_invitation_extend_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'gatheringid' in params:
            query_params.append(('gatheringid', params['gatheringid']))  # noqa: E501
        if 'gatheringpassword' in params:
            query_params.append(('gatheringpassword', params['gatheringpassword']))  # noqa: E501
        if 'inviteeid' in params:
            query_params.append(('inviteeid', params['inviteeid']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/invitation/extendInvitation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_detach_items(self, call_num, connect_id, item_charges, item_i_ds, item_locations, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_detach_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_detach_items(call_num, connect_id, item_charges, item_i_ds, item_locations, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int item_charges: (required)
        :param int item_i_ds: (required)
        :param int item_locations: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_detach_items_with_http_info(call_num, connect_id, item_charges, item_i_ds, item_locations, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_detach_items_with_http_info(call_num, connect_id, item_charges, item_i_ds, item_locations, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_item_detach_items_with_http_info(self, call_num, connect_id, item_charges, item_i_ds, item_locations, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_detach_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_detach_items_with_http_info(call_num, connect_id, item_charges, item_i_ds, item_locations, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int item_charges: (required)
        :param int item_i_ds: (required)
        :param int item_locations: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'item_charges', 'item_i_ds', 'item_locations', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_detach_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_detach_items`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_detach_items`")  # noqa: E501
        # verify the required parameter 'item_charges' is set
        if ('item_charges' not in params or
                params['item_charges'] is None):
            raise ValueError("Missing the required parameter `item_charges` when calling `game_item_detach_items`")  # noqa: E501
        # verify the required parameter 'item_i_ds' is set
        if ('item_i_ds' not in params or
                params['item_i_ds'] is None):
            raise ValueError("Missing the required parameter `item_i_ds` when calling `game_item_detach_items`")  # noqa: E501
        # verify the required parameter 'item_locations' is set
        if ('item_locations' not in params or
                params['item_locations'] is None):
            raise ValueError("Missing the required parameter `item_locations` when calling `game_item_detach_items`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_detach_items`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_detach_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'item_charges' in params:
            query_params.append(('itemCharges', params['item_charges']))  # noqa: E501
        if 'item_i_ds' in params:
            query_params.append(('itemIDs', params['item_i_ds']))  # noqa: E501
        if 'item_locations' in params:
            query_params.append(('itemLocations', params['item_locations']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/detachItems', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_get_inventory_by_profile_ids(self, call_num, connect_id, last_call_time, session_id, profile_i_ds, **kwargs):  # noqa: E501
        """game_item_get_inventory_by_profile_ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_inventory_by_profile_ids(call_num, connect_id, last_call_time, session_id, profile_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_get_inventory_by_profile_ids_with_http_info(call_num, connect_id, last_call_time, session_id, profile_i_ds, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_get_inventory_by_profile_ids_with_http_info(call_num, connect_id, last_call_time, session_id, profile_i_ds, **kwargs)  # noqa: E501
            return data

    def game_item_get_inventory_by_profile_ids_with_http_info(self, call_num, connect_id, last_call_time, session_id, profile_i_ds, **kwargs):  # noqa: E501
        """game_item_get_inventory_by_profile_ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_inventory_by_profile_ids_with_http_info(call_num, connect_id, last_call_time, session_id, profile_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'profile_i_ds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_get_inventory_by_profile_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_get_inventory_by_profile_ids`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_get_inventory_by_profile_ids`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_get_inventory_by_profile_ids`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_get_inventory_by_profile_ids`")  # noqa: E501
        # verify the required parameter 'profile_i_ds' is set
        if ('profile_i_ds' not in params or
                params['profile_i_ds'] is None):
            raise ValueError("Missing the required parameter `profile_i_ds` when calling `game_item_get_inventory_by_profile_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'profile_i_ds' in params:
            query_params.append(('profileIDs', params['profile_i_ds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/getInventoryByProfileIDs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_get_item_bundle_items_json(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_item_get_item_bundle_items_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_item_bundle_items_json(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_get_item_bundle_items_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_get_item_bundle_items_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
            return data

    def game_item_get_item_bundle_items_json_with_http_info(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_item_get_item_bundle_items_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_item_bundle_items_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'signature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_get_item_bundle_items_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_get_item_bundle_items_json`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_get_item_bundle_items_json`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_get_item_bundle_items_json`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_get_item_bundle_items_json`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `game_item_get_item_bundle_items_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/getItemBundleItemsJson', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_get_item_definitions_json(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_item_get_item_definitions_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_item_definitions_json(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_get_item_definitions_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_get_item_definitions_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
            return data

    def game_item_get_item_definitions_json_with_http_info(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_item_get_item_definitions_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_item_definitions_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'signature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_get_item_definitions_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_get_item_definitions_json`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_get_item_definitions_json`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_get_item_definitions_json`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_get_item_definitions_json`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `game_item_get_item_definitions_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/getItemDefinitionsJson', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_get_item_loadouts(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_get_item_loadouts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_item_loadouts(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_get_item_loadouts_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_get_item_loadouts_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_item_get_item_loadouts_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_get_item_loadouts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_item_loadouts_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_get_item_loadouts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_get_item_loadouts`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_get_item_loadouts`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_get_item_loadouts`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_get_item_loadouts`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/getItemLoadouts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_get_item_prices(self, account_type, call_num, connect_id, last_call_time, session_id, country, currency, sale_version, **kwargs):  # noqa: E501
        """game_item_get_item_prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_item_prices(account_type, call_num, connect_id, last_call_time, session_id, country, currency, sale_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_type: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str country: (required)
        :param str currency: (required)
        :param int sale_version: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_get_item_prices_with_http_info(account_type, call_num, connect_id, last_call_time, session_id, country, currency, sale_version, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_get_item_prices_with_http_info(account_type, call_num, connect_id, last_call_time, session_id, country, currency, sale_version, **kwargs)  # noqa: E501
            return data

    def game_item_get_item_prices_with_http_info(self, account_type, call_num, connect_id, last_call_time, session_id, country, currency, sale_version, **kwargs):  # noqa: E501
        """game_item_get_item_prices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_item_prices_with_http_info(account_type, call_num, connect_id, last_call_time, session_id, country, currency, sale_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_type: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str country: (required)
        :param str currency: (required)
        :param int sale_version: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_type', 'call_num', 'connect_id', 'last_call_time', 'session_id', 'country', 'currency', 'sale_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_get_item_prices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_type' is set
        if ('account_type' not in params or
                params['account_type'] is None):
            raise ValueError("Missing the required parameter `account_type` when calling `game_item_get_item_prices`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_get_item_prices`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_get_item_prices`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_get_item_prices`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_get_item_prices`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `game_item_get_item_prices`")  # noqa: E501
        # verify the required parameter 'currency' is set
        if ('currency' not in params or
                params['currency'] is None):
            raise ValueError("Missing the required parameter `currency` when calling `game_item_get_item_prices`")  # noqa: E501
        # verify the required parameter 'sale_version' is set
        if ('sale_version' not in params or
                params['sale_version'] is None):
            raise ValueError("Missing the required parameter `sale_version` when calling `game_item_get_item_prices`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_type' in params:
            query_params.append(('accountType', params['account_type']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'currency' in params:
            query_params.append(('currency', params['currency']))  # noqa: E501
        if 'sale_version' in params:
            query_params.append(('saleVersion', params['sale_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/getItemPrices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_get_level_rewards_table_json(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_item_get_level_rewards_table_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_level_rewards_table_json(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_get_level_rewards_table_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_get_level_rewards_table_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, **kwargs)  # noqa: E501
            return data

    def game_item_get_level_rewards_table_json_with_http_info(self, call_num, connect_id, last_call_time, session_id, signature, **kwargs):  # noqa: E501
        """game_item_get_level_rewards_table_json  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_level_rewards_table_json_with_http_info(call_num, connect_id, last_call_time, session_id, signature, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param str signature: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'signature']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_get_level_rewards_table_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_get_level_rewards_table_json`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_get_level_rewards_table_json`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_get_level_rewards_table_json`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_get_level_rewards_table_json`")  # noqa: E501
        # verify the required parameter 'signature' is set
        if ('signature' not in params or
                params['signature'] is None):
            raise ValueError("Missing the required parameter `signature` when calling `game_item_get_level_rewards_table_json`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'signature' in params:
            query_params.append(('signature', params['signature']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/getLevelRewardsTableJson', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_get_personalized_sale_items(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_get_personalized_sale_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_personalized_sale_items(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_get_personalized_sale_items_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_get_personalized_sale_items_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_item_get_personalized_sale_items_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_get_personalized_sale_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_personalized_sale_items_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_get_personalized_sale_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_get_personalized_sale_items`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_get_personalized_sale_items`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_get_personalized_sale_items`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_get_personalized_sale_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/getPersonalizedSaleItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_get_scheduled_sale_and_items(self, call_num, connect_id, last_call_time, session_id, sale_type, **kwargs):  # noqa: E501
        """game_item_get_scheduled_sale_and_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_scheduled_sale_and_items(call_num, connect_id, last_call_time, session_id, sale_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int sale_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_get_scheduled_sale_and_items_with_http_info(call_num, connect_id, last_call_time, session_id, sale_type, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_get_scheduled_sale_and_items_with_http_info(call_num, connect_id, last_call_time, session_id, sale_type, **kwargs)  # noqa: E501
            return data

    def game_item_get_scheduled_sale_and_items_with_http_info(self, call_num, connect_id, last_call_time, session_id, sale_type, **kwargs):  # noqa: E501
        """game_item_get_scheduled_sale_and_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_get_scheduled_sale_and_items_with_http_info(call_num, connect_id, last_call_time, session_id, sale_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int sale_type: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'sale_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_get_scheduled_sale_and_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_get_scheduled_sale_and_items`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_get_scheduled_sale_and_items`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_get_scheduled_sale_and_items`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_get_scheduled_sale_and_items`")  # noqa: E501
        # verify the required parameter 'sale_type' is set
        if ('sale_type' not in params or
                params['sale_type'] is None):
            raise ValueError("Missing the required parameter `sale_type` when calling `game_item_get_scheduled_sale_and_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'sale_type' in params:
            query_params.append(('saleType', params['sale_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/getScheduledSaleAndItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_move_charges(self, call_num, charges, connect_id, deletes, from_item_i_ds, last_call_time, session_id, to_item_i_ds, **kwargs):  # noqa: E501
        """game_item_move_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_move_charges(call_num, charges, connect_id, deletes, from_item_i_ds, last_call_time, session_id, to_item_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int charges: (required)
        :param str connect_id: (required)
        :param int deletes: (required)
        :param int from_item_i_ds: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int to_item_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_move_charges_with_http_info(call_num, charges, connect_id, deletes, from_item_i_ds, last_call_time, session_id, to_item_i_ds, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_move_charges_with_http_info(call_num, charges, connect_id, deletes, from_item_i_ds, last_call_time, session_id, to_item_i_ds, **kwargs)  # noqa: E501
            return data

    def game_item_move_charges_with_http_info(self, call_num, charges, connect_id, deletes, from_item_i_ds, last_call_time, session_id, to_item_i_ds, **kwargs):  # noqa: E501
        """game_item_move_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_move_charges_with_http_info(call_num, charges, connect_id, deletes, from_item_i_ds, last_call_time, session_id, to_item_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int charges: (required)
        :param str connect_id: (required)
        :param int deletes: (required)
        :param int from_item_i_ds: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int to_item_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'charges', 'connect_id', 'deletes', 'from_item_i_ds', 'last_call_time', 'session_id', 'to_item_i_ds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_move_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_move_charges`")  # noqa: E501
        # verify the required parameter 'charges' is set
        if ('charges' not in params or
                params['charges'] is None):
            raise ValueError("Missing the required parameter `charges` when calling `game_item_move_charges`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_move_charges`")  # noqa: E501
        # verify the required parameter 'deletes' is set
        if ('deletes' not in params or
                params['deletes'] is None):
            raise ValueError("Missing the required parameter `deletes` when calling `game_item_move_charges`")  # noqa: E501
        # verify the required parameter 'from_item_i_ds' is set
        if ('from_item_i_ds' not in params or
                params['from_item_i_ds'] is None):
            raise ValueError("Missing the required parameter `from_item_i_ds` when calling `game_item_move_charges`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_move_charges`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_move_charges`")  # noqa: E501
        # verify the required parameter 'to_item_i_ds' is set
        if ('to_item_i_ds' not in params or
                params['to_item_i_ds'] is None):
            raise ValueError("Missing the required parameter `to_item_i_ds` when calling `game_item_move_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'charges' in params:
            query_params.append(('charges', params['charges']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'deletes' in params:
            query_params.append(('deletes', params['deletes']))  # noqa: E501
        if 'from_item_i_ds' in params:
            query_params.append(('fromItemIDs', params['from_item_i_ds']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'to_item_i_ds' in params:
            query_params.append(('toItemIDs', params['to_item_i_ds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/moveCharges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_move_item(self, call_num, connect_id, item_i_ds, item_location_i_ds, last_call_time, pos_i_ds, session_id, slot_i_ds, **kwargs):  # noqa: E501
        """game_item_move_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_move_item(call_num, connect_id, item_i_ds, item_location_i_ds, last_call_time, pos_i_ds, session_id, slot_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int item_i_ds: (required)
        :param int item_location_i_ds: (required)
        :param str last_call_time: (required)
        :param int pos_i_ds: (required)
        :param str session_id: (required)
        :param int slot_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_move_item_with_http_info(call_num, connect_id, item_i_ds, item_location_i_ds, last_call_time, pos_i_ds, session_id, slot_i_ds, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_move_item_with_http_info(call_num, connect_id, item_i_ds, item_location_i_ds, last_call_time, pos_i_ds, session_id, slot_i_ds, **kwargs)  # noqa: E501
            return data

    def game_item_move_item_with_http_info(self, call_num, connect_id, item_i_ds, item_location_i_ds, last_call_time, pos_i_ds, session_id, slot_i_ds, **kwargs):  # noqa: E501
        """game_item_move_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_move_item_with_http_info(call_num, connect_id, item_i_ds, item_location_i_ds, last_call_time, pos_i_ds, session_id, slot_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int item_i_ds: (required)
        :param int item_location_i_ds: (required)
        :param str last_call_time: (required)
        :param int pos_i_ds: (required)
        :param str session_id: (required)
        :param int slot_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'item_i_ds', 'item_location_i_ds', 'last_call_time', 'pos_i_ds', 'session_id', 'slot_i_ds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_move_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_move_item`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_move_item`")  # noqa: E501
        # verify the required parameter 'item_i_ds' is set
        if ('item_i_ds' not in params or
                params['item_i_ds'] is None):
            raise ValueError("Missing the required parameter `item_i_ds` when calling `game_item_move_item`")  # noqa: E501
        # verify the required parameter 'item_location_i_ds' is set
        if ('item_location_i_ds' not in params or
                params['item_location_i_ds'] is None):
            raise ValueError("Missing the required parameter `item_location_i_ds` when calling `game_item_move_item`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_move_item`")  # noqa: E501
        # verify the required parameter 'pos_i_ds' is set
        if ('pos_i_ds' not in params or
                params['pos_i_ds'] is None):
            raise ValueError("Missing the required parameter `pos_i_ds` when calling `game_item_move_item`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_move_item`")  # noqa: E501
        # verify the required parameter 'slot_i_ds' is set
        if ('slot_i_ds' not in params or
                params['slot_i_ds'] is None):
            raise ValueError("Missing the required parameter `slot_i_ds` when calling `game_item_move_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'item_i_ds' in params:
            query_params.append(('itemIDs', params['item_i_ds']))  # noqa: E501
        if 'item_location_i_ds' in params:
            query_params.append(('itemLocationIDs', params['item_location_i_ds']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'pos_i_ds' in params:
            query_params.append(('posIDs', params['pos_i_ds']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'slot_i_ds' in params:
            query_params.append(('slotIDs', params['slot_i_ds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/moveItem', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_open_item_pack(self, call_num, choices, connect_id, item_instance_id, item_location_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_open_item_pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_open_item_pack(call_num, choices, connect_id, item_instance_id, item_location_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int choices: (required)
        :param str connect_id: (required)
        :param int item_instance_id: (required)
        :param int item_location_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_open_item_pack_with_http_info(call_num, choices, connect_id, item_instance_id, item_location_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_open_item_pack_with_http_info(call_num, choices, connect_id, item_instance_id, item_location_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_item_open_item_pack_with_http_info(self, call_num, choices, connect_id, item_instance_id, item_location_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_open_item_pack  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_open_item_pack_with_http_info(call_num, choices, connect_id, item_instance_id, item_location_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int choices: (required)
        :param str connect_id: (required)
        :param int item_instance_id: (required)
        :param int item_location_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'choices', 'connect_id', 'item_instance_id', 'item_location_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_open_item_pack" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_open_item_pack`")  # noqa: E501
        # verify the required parameter 'choices' is set
        if ('choices' not in params or
                params['choices'] is None):
            raise ValueError("Missing the required parameter `choices` when calling `game_item_open_item_pack`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_open_item_pack`")  # noqa: E501
        # verify the required parameter 'item_instance_id' is set
        if ('item_instance_id' not in params or
                params['item_instance_id'] is None):
            raise ValueError("Missing the required parameter `item_instance_id` when calling `game_item_open_item_pack`")  # noqa: E501
        # verify the required parameter 'item_location_id' is set
        if ('item_location_id' not in params or
                params['item_location_id'] is None):
            raise ValueError("Missing the required parameter `item_location_id` when calling `game_item_open_item_pack`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_open_item_pack`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_open_item_pack`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'choices' in params:
            query_params.append(('choices', params['choices']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'item_instance_id' in params:
            query_params.append(('itemInstance_id', params['item_instance_id']))  # noqa: E501
        if 'item_location_id' in params:
            query_params.append(('itemLocation_id', params['item_location_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/openItemPack', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_sign_item(self, call_num, connect_id, crc, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_sign_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_sign_item(call_num, connect_id, crc, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int crc: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_sign_item_with_http_info(call_num, connect_id, crc, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_sign_item_with_http_info(call_num, connect_id, crc, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_item_sign_item_with_http_info(self, call_num, connect_id, crc, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_item_sign_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_sign_item_with_http_info(call_num, connect_id, crc, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int crc: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'crc', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_sign_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_sign_item`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_sign_item`")  # noqa: E501
        # verify the required parameter 'crc' is set
        if ('crc' not in params or
                params['crc'] is None):
            raise ValueError("Missing the required parameter `crc` when calling `game_item_sign_item`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_sign_item`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_sign_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'crc' in params:
            query_params.append(('crc', params['crc']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/signItems', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_item_update_item_attributes(self, attribute_keys, attribute_values, call_num, connect_id, item_instance_ids, last_call_time, session_id, xp_gains, **kwargs):  # noqa: E501
        """game_item_update_item_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_update_item_attributes(attribute_keys, attribute_values, call_num, connect_id, item_instance_ids, last_call_time, session_id, xp_gains, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_keys: (required)
        :param str attribute_values: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int item_instance_ids: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int xp_gains: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_item_update_item_attributes_with_http_info(attribute_keys, attribute_values, call_num, connect_id, item_instance_ids, last_call_time, session_id, xp_gains, **kwargs)  # noqa: E501
        else:
            (data) = self.game_item_update_item_attributes_with_http_info(attribute_keys, attribute_values, call_num, connect_id, item_instance_ids, last_call_time, session_id, xp_gains, **kwargs)  # noqa: E501
            return data

    def game_item_update_item_attributes_with_http_info(self, attribute_keys, attribute_values, call_num, connect_id, item_instance_ids, last_call_time, session_id, xp_gains, **kwargs):  # noqa: E501
        """game_item_update_item_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_item_update_item_attributes_with_http_info(attribute_keys, attribute_values, call_num, connect_id, item_instance_ids, last_call_time, session_id, xp_gains, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_keys: (required)
        :param str attribute_values: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int item_instance_ids: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int xp_gains: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute_keys', 'attribute_values', 'call_num', 'connect_id', 'item_instance_ids', 'last_call_time', 'session_id', 'xp_gains']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_item_update_item_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute_keys' is set
        if ('attribute_keys' not in params or
                params['attribute_keys'] is None):
            raise ValueError("Missing the required parameter `attribute_keys` when calling `game_item_update_item_attributes`")  # noqa: E501
        # verify the required parameter 'attribute_values' is set
        if ('attribute_values' not in params or
                params['attribute_values'] is None):
            raise ValueError("Missing the required parameter `attribute_values` when calling `game_item_update_item_attributes`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_item_update_item_attributes`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_item_update_item_attributes`")  # noqa: E501
        # verify the required parameter 'item_instance_ids' is set
        if ('item_instance_ids' not in params or
                params['item_instance_ids'] is None):
            raise ValueError("Missing the required parameter `item_instance_ids` when calling `game_item_update_item_attributes`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_item_update_item_attributes`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_item_update_item_attributes`")  # noqa: E501
        # verify the required parameter 'xp_gains' is set
        if ('xp_gains' not in params or
                params['xp_gains'] is None):
            raise ValueError("Missing the required parameter `xp_gains` when calling `game_item_update_item_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attribute_keys' in params:
            query_params.append(('attributeKeys', params['attribute_keys']))  # noqa: E501
        if 'attribute_values' in params:
            query_params.append(('attributeValues', params['attribute_values']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'item_instance_ids' in params:
            query_params.append(('itemInstance_ids', params['item_instance_ids']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'xp_gains' in params:
            query_params.append(('xpGains', params['xp_gains']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/item/updateItemAttributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_available_leaderboards(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_leaderboard_get_available_leaderboards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_available_leaderboards(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_available_leaderboards_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_available_leaderboards_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_available_leaderboards_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_leaderboard_get_available_leaderboards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_available_leaderboards_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_available_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_available_leaderboards`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_available_leaderboards`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_available_leaderboards`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_available_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getAvailableLeaderboards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_leaderboard(self, call_num, connect_id, last_call_time, session_id, start, count, **kwargs):  # noqa: E501
        """game_leaderboard_get_leaderboard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_leaderboard(call_num, connect_id, last_call_time, session_id, start, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int start: (required)
        :param int count: (required)
        :param int leaderboard_id:
        :param int sort_by:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_leaderboard_with_http_info(call_num, connect_id, last_call_time, session_id, start, count, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_leaderboard_with_http_info(call_num, connect_id, last_call_time, session_id, start, count, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_leaderboard_with_http_info(self, call_num, connect_id, last_call_time, session_id, start, count, **kwargs):  # noqa: E501
        """game_leaderboard_get_leaderboard  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_leaderboard_with_http_info(call_num, connect_id, last_call_time, session_id, start, count, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int start: (required)
        :param int count: (required)
        :param int leaderboard_id:
        :param int sort_by:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'start', 'count', 'leaderboard_id', 'sort_by']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_leaderboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_leaderboard`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_leaderboard`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_leaderboard`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_leaderboard`")  # noqa: E501
        # verify the required parameter 'start' is set
        if ('start' not in params or
                params['start'] is None):
            raise ValueError("Missing the required parameter `start` when calling `game_leaderboard_get_leaderboard`")  # noqa: E501
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `game_leaderboard_get_leaderboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'leaderboard_id' in params:
            query_params.append(('leaderboard_id', params['leaderboard_id']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getLeaderBoard', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_party_stat(self, call_num, connect_id, last_call_time, session_id, statsids, **kwargs):  # noqa: E501
        """game_leaderboard_get_party_stat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_party_stat(call_num, connect_id, last_call_time, session_id, statsids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int statsids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_party_stat_with_http_info(call_num, connect_id, last_call_time, session_id, statsids, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_party_stat_with_http_info(call_num, connect_id, last_call_time, session_id, statsids, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_party_stat_with_http_info(self, call_num, connect_id, last_call_time, session_id, statsids, **kwargs):  # noqa: E501
        """game_leaderboard_get_party_stat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_party_stat_with_http_info(call_num, connect_id, last_call_time, session_id, statsids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int statsids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'statsids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_party_stat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_party_stat`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_party_stat`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_party_stat`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_party_stat`")  # noqa: E501
        # verify the required parameter 'statsids' is set
        if ('statsids' not in params or
                params['statsids'] is None):
            raise ValueError("Missing the required parameter `statsids` when calling `game_leaderboard_get_party_stat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'statsids' in params:
            query_params.append(('statsids', params['statsids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getPartyStat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_personal_stat(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_leaderboard_get_personal_stat  # noqa: E501

        TODO: No request documented in Wiki, guessed parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_personal_stat(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_personal_stat_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_personal_stat_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_personal_stat_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_leaderboard_get_personal_stat  # noqa: E501

        TODO: No request documented in Wiki, guessed parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_personal_stat_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_personal_stat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_personal_stat`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_personal_stat`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_personal_stat`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_personal_stat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getPersonalStat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_recent_match_history_get(self, call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs):  # noqa: E501
        """game_leaderboard_get_recent_match_history_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_recent_match_history_get(call_num, connect_id, last_call_time, session_id, profile_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_recent_match_history_get_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_recent_match_history_get_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_recent_match_history_get_with_http_info(self, call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs):  # noqa: E501
        """game_leaderboard_get_recent_match_history_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_recent_match_history_get_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'profile_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_recent_match_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_recent_match_history_get`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_recent_match_history_get`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_recent_match_history_get`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_recent_match_history_get`")  # noqa: E501
        # verify the required parameter 'profile_ids' is set
        if ('profile_ids' not in params or
                params['profile_ids'] is None):
            raise ValueError("Missing the required parameter `profile_ids` when calling `game_leaderboard_get_recent_match_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getRecentMatchHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_recent_match_history_post(self, call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs):  # noqa: E501
        """game_leaderboard_get_recent_match_history_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_recent_match_history_post(call_num, connect_id, last_call_time, session_id, profile_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_recent_match_history_post_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_recent_match_history_post_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_recent_match_history_post_with_http_info(self, call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs):  # noqa: E501
        """game_leaderboard_get_recent_match_history_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_recent_match_history_post_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'profile_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_recent_match_history_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_recent_match_history_post`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_recent_match_history_post`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_recent_match_history_post`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_recent_match_history_post`")  # noqa: E501
        # verify the required parameter 'profile_ids' is set
        if ('profile_ids' not in params or
                params['profile_ids'] is None):
            raise ValueError("Missing the required parameter `profile_ids` when calling `game_leaderboard_get_recent_match_history_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getRecentMatchHistory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_recent_match_single_player_history(self, call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs):  # noqa: E501
        """game_leaderboard_get_recent_match_single_player_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_recent_match_single_player_history(call_num, connect_id, last_call_time, session_id, profile_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_recent_match_single_player_history_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_recent_match_single_player_history_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_recent_match_single_player_history_with_http_info(self, call_num, connect_id, last_call_time, session_id, profile_ids, **kwargs):  # noqa: E501
        """game_leaderboard_get_recent_match_single_player_history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_recent_match_single_player_history_with_http_info(call_num, connect_id, last_call_time, session_id, profile_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profile_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'profile_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_recent_match_single_player_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_recent_match_single_player_history`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_recent_match_single_player_history`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_recent_match_single_player_history`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_recent_match_single_player_history`")  # noqa: E501
        # verify the required parameter 'profile_ids' is set
        if ('profile_ids' not in params or
                params['profile_ids'] is None):
            raise ValueError("Missing the required parameter `profile_ids` when calling `game_leaderboard_get_recent_match_single_player_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getRecentMatchSinglePlayerHistory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_stat_groups_by_profile_ids(self, call_num, connect_id, last_call_time, session_id, profileids, **kwargs):  # noqa: E501
        """game_leaderboard_get_stat_groups_by_profile_ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_stat_groups_by_profile_ids(call_num, connect_id, last_call_time, session_id, profileids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profileids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_stat_groups_by_profile_ids_with_http_info(call_num, connect_id, last_call_time, session_id, profileids, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_stat_groups_by_profile_ids_with_http_info(call_num, connect_id, last_call_time, session_id, profileids, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_stat_groups_by_profile_ids_with_http_info(self, call_num, connect_id, last_call_time, session_id, profileids, **kwargs):  # noqa: E501
        """game_leaderboard_get_stat_groups_by_profile_ids  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_stat_groups_by_profile_ids_with_http_info(call_num, connect_id, last_call_time, session_id, profileids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profileids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'profileids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_stat_groups_by_profile_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_stat_groups_by_profile_ids`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_stat_groups_by_profile_ids`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_stat_groups_by_profile_ids`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_stat_groups_by_profile_ids`")  # noqa: E501
        # verify the required parameter 'profileids' is set
        if ('profileids' not in params or
                params['profileids'] is None):
            raise ValueError("Missing the required parameter `profileids` when calling `game_leaderboard_get_stat_groups_by_profile_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'profileids' in params:
            query_params.append(('profileids', params['profileids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getStatGroupsByProfileIDs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_get_stats_for_leaderboard_by_profile_name(self, call_num, connect_id, last_call_time, session_id, profileids, **kwargs):  # noqa: E501
        """game_leaderboard_get_stats_for_leaderboard_by_profile_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_stats_for_leaderboard_by_profile_name(call_num, connect_id, last_call_time, session_id, profileids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profileids: (required)
        :param int leaderboard_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_get_stats_for_leaderboard_by_profile_name_with_http_info(call_num, connect_id, last_call_time, session_id, profileids, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_get_stats_for_leaderboard_by_profile_name_with_http_info(call_num, connect_id, last_call_time, session_id, profileids, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_get_stats_for_leaderboard_by_profile_name_with_http_info(self, call_num, connect_id, last_call_time, session_id, profileids, **kwargs):  # noqa: E501
        """game_leaderboard_get_stats_for_leaderboard_by_profile_name  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_get_stats_for_leaderboard_by_profile_name_with_http_info(call_num, connect_id, last_call_time, session_id, profileids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int profileids: (required)
        :param int leaderboard_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id', 'profileids', 'leaderboard_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_get_stats_for_leaderboard_by_profile_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_get_stats_for_leaderboard_by_profile_name`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_get_stats_for_leaderboard_by_profile_name`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_get_stats_for_leaderboard_by_profile_name`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_get_stats_for_leaderboard_by_profile_name`")  # noqa: E501
        # verify the required parameter 'profileids' is set
        if ('profileids' not in params or
                params['profileids'] is None):
            raise ValueError("Missing the required parameter `profileids` when calling `game_leaderboard_get_stats_for_leaderboard_by_profile_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'leaderboard_id' in params:
            query_params.append(('leaderboard_id', params['leaderboard_id']))  # noqa: E501
        if 'profileids' in params:
            query_params.append(('profileids', params['profileids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/Leaderboard/getStatsForLeaderboardByProfileName', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_leaderboard_set_avatar_stat_values(self, avatar_stat_ids, call_num, connect_id, last_call_time, session_id, update_types, values, **kwargs):  # noqa: E501
        """game_leaderboard_set_avatar_stat_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_set_avatar_stat_values(avatar_stat_ids, call_num, connect_id, last_call_time, session_id, update_types, values, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int avatar_stat_ids: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int update_types: (required)
        :param int values: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_leaderboard_set_avatar_stat_values_with_http_info(avatar_stat_ids, call_num, connect_id, last_call_time, session_id, update_types, values, **kwargs)  # noqa: E501
        else:
            (data) = self.game_leaderboard_set_avatar_stat_values_with_http_info(avatar_stat_ids, call_num, connect_id, last_call_time, session_id, update_types, values, **kwargs)  # noqa: E501
            return data

    def game_leaderboard_set_avatar_stat_values_with_http_info(self, avatar_stat_ids, call_num, connect_id, last_call_time, session_id, update_types, values, **kwargs):  # noqa: E501
        """game_leaderboard_set_avatar_stat_values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_leaderboard_set_avatar_stat_values_with_http_info(avatar_stat_ids, call_num, connect_id, last_call_time, session_id, update_types, values, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int avatar_stat_ids: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :param int update_types: (required)
        :param int values: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['avatar_stat_ids', 'call_num', 'connect_id', 'last_call_time', 'session_id', 'update_types', 'values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_leaderboard_set_avatar_stat_values" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'avatar_stat_ids' is set
        if ('avatar_stat_ids' not in params or
                params['avatar_stat_ids'] is None):
            raise ValueError("Missing the required parameter `avatar_stat_ids` when calling `game_leaderboard_set_avatar_stat_values`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_leaderboard_set_avatar_stat_values`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_leaderboard_set_avatar_stat_values`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_leaderboard_set_avatar_stat_values`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_leaderboard_set_avatar_stat_values`")  # noqa: E501
        # verify the required parameter 'update_types' is set
        if ('update_types' not in params or
                params['update_types'] is None):
            raise ValueError("Missing the required parameter `update_types` when calling `game_leaderboard_set_avatar_stat_values`")  # noqa: E501
        # verify the required parameter 'values' is set
        if ('values' not in params or
                params['values'] is None):
            raise ValueError("Missing the required parameter `values` when calling `game_leaderboard_set_avatar_stat_values`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'avatar_stat_ids' in params:
            query_params.append(('avatarStat_ids', params['avatar_stat_ids']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'update_types' in params:
            query_params.append(('updateTypes', params['update_types']))  # noqa: E501
        if 'values' in params:
            query_params.append(('values', params['values']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/leaderboard/setAvatarStatValues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_login_logout(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_login_logout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_login_logout(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_login_logout_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_login_logout_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_login_logout_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_login_logout  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_login_logout_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_login_logout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_login_logout`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_login_logout`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_login_logout`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_login_logout`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/login/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_login_platform_login(self, account_type, active_match_id, alias, app_id, auth, call_num, client_lib_version, connect_id, country, installation_type, last_call_time, mac_address, major_version, minor_version, platform_user_id, start_game_token, sync_hash, timeout_override, **kwargs):  # noqa: E501
        """game_login_platform_login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_login_platform_login(account_type, active_match_id, alias, app_id, auth, call_num, client_lib_version, connect_id, country, installation_type, last_call_time, mac_address, major_version, minor_version, platform_user_id, start_game_token, sync_hash, timeout_override, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_type: (required)
        :param int active_match_id: (required)
        :param str alias: (required)
        :param int app_id: (required)
        :param str auth: (required)
        :param int call_num: (required)
        :param int client_lib_version: (required)
        :param str connect_id: (required)
        :param str country: (required)
        :param str installation_type: (required)
        :param str last_call_time: (required)
        :param str mac_address: (required)
        :param str major_version: (required)
        :param int minor_version: (required)
        :param int platform_user_id: (required)
        :param str start_game_token: (required)
        :param int sync_hash: (required)
        :param int timeout_override: (required)
        :param str language:
        :param str store_license_token:
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_login_platform_login_with_http_info(account_type, active_match_id, alias, app_id, auth, call_num, client_lib_version, connect_id, country, installation_type, last_call_time, mac_address, major_version, minor_version, platform_user_id, start_game_token, sync_hash, timeout_override, **kwargs)  # noqa: E501
        else:
            (data) = self.game_login_platform_login_with_http_info(account_type, active_match_id, alias, app_id, auth, call_num, client_lib_version, connect_id, country, installation_type, last_call_time, mac_address, major_version, minor_version, platform_user_id, start_game_token, sync_hash, timeout_override, **kwargs)  # noqa: E501
            return data

    def game_login_platform_login_with_http_info(self, account_type, active_match_id, alias, app_id, auth, call_num, client_lib_version, connect_id, country, installation_type, last_call_time, mac_address, major_version, minor_version, platform_user_id, start_game_token, sync_hash, timeout_override, **kwargs):  # noqa: E501
        """game_login_platform_login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_login_platform_login_with_http_info(account_type, active_match_id, alias, app_id, auth, call_num, client_lib_version, connect_id, country, installation_type, last_call_time, mac_address, major_version, minor_version, platform_user_id, start_game_token, sync_hash, timeout_override, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_type: (required)
        :param int active_match_id: (required)
        :param str alias: (required)
        :param int app_id: (required)
        :param str auth: (required)
        :param int call_num: (required)
        :param int client_lib_version: (required)
        :param str connect_id: (required)
        :param str country: (required)
        :param str installation_type: (required)
        :param str last_call_time: (required)
        :param str mac_address: (required)
        :param str major_version: (required)
        :param int minor_version: (required)
        :param int platform_user_id: (required)
        :param str start_game_token: (required)
        :param int sync_hash: (required)
        :param int timeout_override: (required)
        :param str language:
        :param str store_license_token:
        :param str title:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_type', 'active_match_id', 'alias', 'app_id', 'auth', 'call_num', 'client_lib_version', 'connect_id', 'country', 'installation_type', 'last_call_time', 'mac_address', 'major_version', 'minor_version', 'platform_user_id', 'start_game_token', 'sync_hash', 'timeout_override', 'language', 'store_license_token', 'title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_login_platform_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_type' is set
        if ('account_type' not in params or
                params['account_type'] is None):
            raise ValueError("Missing the required parameter `account_type` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'active_match_id' is set
        if ('active_match_id' not in params or
                params['active_match_id'] is None):
            raise ValueError("Missing the required parameter `active_match_id` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'app_id' is set
        if ('app_id' not in params or
                params['app_id'] is None):
            raise ValueError("Missing the required parameter `app_id` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'auth' is set
        if ('auth' not in params or
                params['auth'] is None):
            raise ValueError("Missing the required parameter `auth` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'client_lib_version' is set
        if ('client_lib_version' not in params or
                params['client_lib_version'] is None):
            raise ValueError("Missing the required parameter `client_lib_version` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'country' is set
        if ('country' not in params or
                params['country'] is None):
            raise ValueError("Missing the required parameter `country` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'installation_type' is set
        if ('installation_type' not in params or
                params['installation_type'] is None):
            raise ValueError("Missing the required parameter `installation_type` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'mac_address' is set
        if ('mac_address' not in params or
                params['mac_address'] is None):
            raise ValueError("Missing the required parameter `mac_address` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'major_version' is set
        if ('major_version' not in params or
                params['major_version'] is None):
            raise ValueError("Missing the required parameter `major_version` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'minor_version' is set
        if ('minor_version' not in params or
                params['minor_version'] is None):
            raise ValueError("Missing the required parameter `minor_version` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'platform_user_id' is set
        if ('platform_user_id' not in params or
                params['platform_user_id'] is None):
            raise ValueError("Missing the required parameter `platform_user_id` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'start_game_token' is set
        if ('start_game_token' not in params or
                params['start_game_token'] is None):
            raise ValueError("Missing the required parameter `start_game_token` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'sync_hash' is set
        if ('sync_hash' not in params or
                params['sync_hash'] is None):
            raise ValueError("Missing the required parameter `sync_hash` when calling `game_login_platform_login`")  # noqa: E501
        # verify the required parameter 'timeout_override' is set
        if ('timeout_override' not in params or
                params['timeout_override'] is None):
            raise ValueError("Missing the required parameter `timeout_override` when calling `game_login_platform_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_type' in params:
            query_params.append(('accountType', params['account_type']))  # noqa: E501
        if 'active_match_id' in params:
            query_params.append(('activeMatchId', params['active_match_id']))  # noqa: E501
        if 'alias' in params:
            query_params.append(('alias', params['alias']))  # noqa: E501
        if 'app_id' in params:
            query_params.append(('appID', params['app_id']))  # noqa: E501
        if 'auth' in params:
            query_params.append(('auth', params['auth']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'client_lib_version' in params:
            query_params.append(('clientLibVersion', params['client_lib_version']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'installation_type' in params:
            query_params.append(('installationType', params['installation_type']))  # noqa: E501
        if 'language' in params:
            query_params.append(('language', params['language']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'mac_address' in params:
            query_params.append(('macAddress', params['mac_address']))  # noqa: E501
        if 'major_version' in params:
            query_params.append(('majorVersion', params['major_version']))  # noqa: E501
        if 'minor_version' in params:
            query_params.append(('minorVersion', params['minor_version']))  # noqa: E501
        if 'platform_user_id' in params:
            query_params.append(('platformUserID', params['platform_user_id']))  # noqa: E501
        if 'start_game_token' in params:
            query_params.append(('startGameToken', params['start_game_token']))  # noqa: E501
        if 'store_license_token' in params:
            query_params.append(('storeLicenseToken', params['store_license_token']))  # noqa: E501
        if 'sync_hash' in params:
            query_params.append(('syncHash', params['sync_hash']))  # noqa: E501
        if 'timeout_override' in params:
            query_params.append(('timeoutOverride', params['timeout_override']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/login/platformlogin', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_login_read_session(self, ack, poll_num, session_id, **kwargs):  # noqa: E501
        """game_login_read_session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_login_read_session(ack, poll_num, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ack: (required)
        :param int poll_num: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_login_read_session_with_http_info(ack, poll_num, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_login_read_session_with_http_info(ack, poll_num, session_id, **kwargs)  # noqa: E501
            return data

    def game_login_read_session_with_http_info(self, ack, poll_num, session_id, **kwargs):  # noqa: E501
        """game_login_read_session  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_login_read_session_with_http_info(ack, poll_num, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int ack: (required)
        :param int poll_num: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ack', 'poll_num', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_login_read_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ack' is set
        if ('ack' not in params or
                params['ack'] is None):
            raise ValueError("Missing the required parameter `ack` when calling `game_login_read_session`")  # noqa: E501
        # verify the required parameter 'poll_num' is set
        if ('poll_num' not in params or
                params['poll_num'] is None):
            raise ValueError("Missing the required parameter `poll_num` when calling `game_login_read_session`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_login_read_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ack' in params:
            query_params.append(('ack', params['ack']))  # noqa: E501
        if 'poll_num' in params:
            query_params.append(('pollNum', params['poll_num']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/login/readSession', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_news_get_news(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_news_get_news  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_news_get_news(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_news_get_news_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_news_get_news_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_news_get_news_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_news_get_news  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_news_get_news_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_news_get_news" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_news_get_news`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_news_get_news`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_news_get_news`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_news_get_news`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/news/getNews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_party_create_or_report_single_player(self, appbincrc, call_num, connect_id, counters_zip, create_match_key, datacrc, is_complete, item_updates, last_call_time, mapname, match_key, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, race_ids, results, session_id, slot_info, team_i_ds, version_flags, xp_gained, **kwargs):  # noqa: E501
        """game_party_create_or_report_single_player  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_create_or_report_single_player(appbincrc, call_num, connect_id, counters_zip, create_match_key, datacrc, is_complete, item_updates, last_call_time, mapname, match_key, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, race_ids, results, session_id, slot_info, team_i_ds, version_flags, xp_gained, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appbincrc: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str counters_zip: zlib-compressed (required)
        :param int create_match_key: (required)
        :param int datacrc: (required)
        :param int is_complete: (required)
        :param int item_updates: (required)
        :param str last_call_time: (required)
        :param str mapname: (required)
        :param str match_key: (required)
        :param int match_type_id: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param str options: (required)
        :param int race_ids: (required)
        :param int results: (required)
        :param str session_id: (required)
        :param str slot_info: zlib-compressed (required)
        :param int team_i_ds: (required)
        :param int version_flags: (required)
        :param int xp_gained: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_party_create_or_report_single_player_with_http_info(appbincrc, call_num, connect_id, counters_zip, create_match_key, datacrc, is_complete, item_updates, last_call_time, mapname, match_key, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, race_ids, results, session_id, slot_info, team_i_ds, version_flags, xp_gained, **kwargs)  # noqa: E501
        else:
            (data) = self.game_party_create_or_report_single_player_with_http_info(appbincrc, call_num, connect_id, counters_zip, create_match_key, datacrc, is_complete, item_updates, last_call_time, mapname, match_key, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, race_ids, results, session_id, slot_info, team_i_ds, version_flags, xp_gained, **kwargs)  # noqa: E501
            return data

    def game_party_create_or_report_single_player_with_http_info(self, appbincrc, call_num, connect_id, counters_zip, create_match_key, datacrc, is_complete, item_updates, last_call_time, mapname, match_key, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, race_ids, results, session_id, slot_info, team_i_ds, version_flags, xp_gained, **kwargs):  # noqa: E501
        """game_party_create_or_report_single_player  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_create_or_report_single_player_with_http_info(appbincrc, call_num, connect_id, counters_zip, create_match_key, datacrc, is_complete, item_updates, last_call_time, mapname, match_key, match_type_id, mod_dll_checksum, mod_dll_file, mod_name, mod_version, options, race_ids, results, session_id, slot_info, team_i_ds, version_flags, xp_gained, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int appbincrc: (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str counters_zip: zlib-compressed (required)
        :param int create_match_key: (required)
        :param int datacrc: (required)
        :param int is_complete: (required)
        :param int item_updates: (required)
        :param str last_call_time: (required)
        :param str mapname: (required)
        :param str match_key: (required)
        :param int match_type_id: (required)
        :param int mod_dll_checksum: (required)
        :param str mod_dll_file: (required)
        :param str mod_name: (required)
        :param str mod_version: (required)
        :param str options: (required)
        :param int race_ids: (required)
        :param int results: (required)
        :param str session_id: (required)
        :param str slot_info: zlib-compressed (required)
        :param int team_i_ds: (required)
        :param int version_flags: (required)
        :param int xp_gained: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['appbincrc', 'call_num', 'connect_id', 'counters_zip', 'create_match_key', 'datacrc', 'is_complete', 'item_updates', 'last_call_time', 'mapname', 'match_key', 'match_type_id', 'mod_dll_checksum', 'mod_dll_file', 'mod_name', 'mod_version', 'options', 'race_ids', 'results', 'session_id', 'slot_info', 'team_i_ds', 'version_flags', 'xp_gained']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_party_create_or_report_single_player" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'appbincrc' is set
        if ('appbincrc' not in params or
                params['appbincrc'] is None):
            raise ValueError("Missing the required parameter `appbincrc` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'counters_zip' is set
        if ('counters_zip' not in params or
                params['counters_zip'] is None):
            raise ValueError("Missing the required parameter `counters_zip` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'create_match_key' is set
        if ('create_match_key' not in params or
                params['create_match_key'] is None):
            raise ValueError("Missing the required parameter `create_match_key` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'datacrc' is set
        if ('datacrc' not in params or
                params['datacrc'] is None):
            raise ValueError("Missing the required parameter `datacrc` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'is_complete' is set
        if ('is_complete' not in params or
                params['is_complete'] is None):
            raise ValueError("Missing the required parameter `is_complete` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'item_updates' is set
        if ('item_updates' not in params or
                params['item_updates'] is None):
            raise ValueError("Missing the required parameter `item_updates` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'mapname' is set
        if ('mapname' not in params or
                params['mapname'] is None):
            raise ValueError("Missing the required parameter `mapname` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'match_key' is set
        if ('match_key' not in params or
                params['match_key'] is None):
            raise ValueError("Missing the required parameter `match_key` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'match_type_id' is set
        if ('match_type_id' not in params or
                params['match_type_id'] is None):
            raise ValueError("Missing the required parameter `match_type_id` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'mod_dll_checksum' is set
        if ('mod_dll_checksum' not in params or
                params['mod_dll_checksum'] is None):
            raise ValueError("Missing the required parameter `mod_dll_checksum` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'mod_dll_file' is set
        if ('mod_dll_file' not in params or
                params['mod_dll_file'] is None):
            raise ValueError("Missing the required parameter `mod_dll_file` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'mod_name' is set
        if ('mod_name' not in params or
                params['mod_name'] is None):
            raise ValueError("Missing the required parameter `mod_name` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'mod_version' is set
        if ('mod_version' not in params or
                params['mod_version'] is None):
            raise ValueError("Missing the required parameter `mod_version` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'options' is set
        if ('options' not in params or
                params['options'] is None):
            raise ValueError("Missing the required parameter `options` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'race_ids' is set
        if ('race_ids' not in params or
                params['race_ids'] is None):
            raise ValueError("Missing the required parameter `race_ids` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'results' is set
        if ('results' not in params or
                params['results'] is None):
            raise ValueError("Missing the required parameter `results` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'slot_info' is set
        if ('slot_info' not in params or
                params['slot_info'] is None):
            raise ValueError("Missing the required parameter `slot_info` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'team_i_ds' is set
        if ('team_i_ds' not in params or
                params['team_i_ds'] is None):
            raise ValueError("Missing the required parameter `team_i_ds` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'version_flags' is set
        if ('version_flags' not in params or
                params['version_flags'] is None):
            raise ValueError("Missing the required parameter `version_flags` when calling `game_party_create_or_report_single_player`")  # noqa: E501
        # verify the required parameter 'xp_gained' is set
        if ('xp_gained' not in params or
                params['xp_gained'] is None):
            raise ValueError("Missing the required parameter `xp_gained` when calling `game_party_create_or_report_single_player`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'appbincrc' in params:
            query_params.append(('appbincrc', params['appbincrc']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'counters_zip' in params:
            query_params.append(('countersZip', params['counters_zip']))  # noqa: E501
        if 'create_match_key' in params:
            query_params.append(('createMatchKey', params['create_match_key']))  # noqa: E501
        if 'datacrc' in params:
            query_params.append(('datacrc', params['datacrc']))  # noqa: E501
        if 'is_complete' in params:
            query_params.append(('isComplete', params['is_complete']))  # noqa: E501
        if 'item_updates' in params:
            query_params.append(('itemUpdates', params['item_updates']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'mapname' in params:
            query_params.append(('mapname', params['mapname']))  # noqa: E501
        if 'match_key' in params:
            query_params.append(('matchKey', params['match_key']))  # noqa: E501
        if 'match_type_id' in params:
            query_params.append(('matchTypeID', params['match_type_id']))  # noqa: E501
        if 'mod_dll_checksum' in params:
            query_params.append(('modDLLChecksum', params['mod_dll_checksum']))  # noqa: E501
        if 'mod_dll_file' in params:
            query_params.append(('modDLLFile', params['mod_dll_file']))  # noqa: E501
        if 'mod_name' in params:
            query_params.append(('modName', params['mod_name']))  # noqa: E501
        if 'mod_version' in params:
            query_params.append(('modVersion', params['mod_version']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501
        if 'race_ids' in params:
            query_params.append(('race_ids', params['race_ids']))  # noqa: E501
        if 'results' in params:
            query_params.append(('results', params['results']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'slot_info' in params:
            query_params.append(('slotInfo', params['slot_info']))  # noqa: E501
        if 'team_i_ds' in params:
            query_params.append(('teamIDs', params['team_i_ds']))  # noqa: E501
        if 'version_flags' in params:
            query_params.append(('versionFlags', params['version_flags']))  # noqa: E501
        if 'xp_gained' in params:
            query_params.append(('xpGained', params['xp_gained']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/party/createOrReportSinglePlayer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_party_finalize_replay_upload(self, call_num, connect_id, error_string, finalize_result, is_single_player, last_call_time, match_id, session_id, size, url, **kwargs):  # noqa: E501
        """game_party_finalize_replay_upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_finalize_replay_upload(call_num, connect_id, error_string, finalize_result, is_single_player, last_call_time, match_id, session_id, size, url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str error_string: (required)
        :param int finalize_result: (required)
        :param int is_single_player: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param str session_id: (required)
        :param int size: (required)
        :param str url: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_party_finalize_replay_upload_with_http_info(call_num, connect_id, error_string, finalize_result, is_single_player, last_call_time, match_id, session_id, size, url, **kwargs)  # noqa: E501
        else:
            (data) = self.game_party_finalize_replay_upload_with_http_info(call_num, connect_id, error_string, finalize_result, is_single_player, last_call_time, match_id, session_id, size, url, **kwargs)  # noqa: E501
            return data

    def game_party_finalize_replay_upload_with_http_info(self, call_num, connect_id, error_string, finalize_result, is_single_player, last_call_time, match_id, session_id, size, url, **kwargs):  # noqa: E501
        """game_party_finalize_replay_upload  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_finalize_replay_upload_with_http_info(call_num, connect_id, error_string, finalize_result, is_single_player, last_call_time, match_id, session_id, size, url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str error_string: (required)
        :param int finalize_result: (required)
        :param int is_single_player: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param str session_id: (required)
        :param int size: (required)
        :param str url: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'error_string', 'finalize_result', 'is_single_player', 'last_call_time', 'match_id', 'session_id', 'size', 'url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_party_finalize_replay_upload" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'error_string' is set
        if ('error_string' not in params or
                params['error_string'] is None):
            raise ValueError("Missing the required parameter `error_string` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'finalize_result' is set
        if ('finalize_result' not in params or
                params['finalize_result'] is None):
            raise ValueError("Missing the required parameter `finalize_result` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'is_single_player' is set
        if ('is_single_player' not in params or
                params['is_single_player'] is None):
            raise ValueError("Missing the required parameter `is_single_player` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'match_id' is set
        if ('match_id' not in params or
                params['match_id'] is None):
            raise ValueError("Missing the required parameter `match_id` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'size' is set
        if ('size' not in params or
                params['size'] is None):
            raise ValueError("Missing the required parameter `size` when calling `game_party_finalize_replay_upload`")  # noqa: E501
        # verify the required parameter 'url' is set
        if ('url' not in params or
                params['url'] is None):
            raise ValueError("Missing the required parameter `url` when calling `game_party_finalize_replay_upload`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'error_string' in params:
            query_params.append(('errorString', params['error_string']))  # noqa: E501
        if 'finalize_result' in params:
            query_params.append(('finalizeResult', params['finalize_result']))  # noqa: E501
        if 'is_single_player' in params:
            query_params.append(('isSinglePlayer', params['is_single_player']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_id' in params:
            query_params.append(('match_id', params['match_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/party/finalizeReplayUpload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_party_peer_add(self, call_num, connect_id, last_call_time, match_id, profile_ids, race_ids, session_id, stat_group_ids, team_i_ds, **kwargs):  # noqa: E501
        """game_party_peer_add  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_peer_add(call_num, connect_id, last_call_time, match_id, profile_ids, race_ids, session_id, stat_group_ids, team_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int profile_ids: (required)
        :param int race_ids: (required)
        :param str session_id: (required)
        :param int stat_group_ids: (required)
        :param int team_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_party_peer_add_with_http_info(call_num, connect_id, last_call_time, match_id, profile_ids, race_ids, session_id, stat_group_ids, team_i_ds, **kwargs)  # noqa: E501
        else:
            (data) = self.game_party_peer_add_with_http_info(call_num, connect_id, last_call_time, match_id, profile_ids, race_ids, session_id, stat_group_ids, team_i_ds, **kwargs)  # noqa: E501
            return data

    def game_party_peer_add_with_http_info(self, call_num, connect_id, last_call_time, match_id, profile_ids, race_ids, session_id, stat_group_ids, team_i_ds, **kwargs):  # noqa: E501
        """game_party_peer_add  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_peer_add_with_http_info(call_num, connect_id, last_call_time, match_id, profile_ids, race_ids, session_id, stat_group_ids, team_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int profile_ids: (required)
        :param int race_ids: (required)
        :param str session_id: (required)
        :param int stat_group_ids: (required)
        :param int team_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'match_id', 'profile_ids', 'race_ids', 'session_id', 'stat_group_ids', 'team_i_ds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_party_peer_add" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_party_peer_add`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_party_peer_add`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_party_peer_add`")  # noqa: E501
        # verify the required parameter 'match_id' is set
        if ('match_id' not in params or
                params['match_id'] is None):
            raise ValueError("Missing the required parameter `match_id` when calling `game_party_peer_add`")  # noqa: E501
        # verify the required parameter 'profile_ids' is set
        if ('profile_ids' not in params or
                params['profile_ids'] is None):
            raise ValueError("Missing the required parameter `profile_ids` when calling `game_party_peer_add`")  # noqa: E501
        # verify the required parameter 'race_ids' is set
        if ('race_ids' not in params or
                params['race_ids'] is None):
            raise ValueError("Missing the required parameter `race_ids` when calling `game_party_peer_add`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_party_peer_add`")  # noqa: E501
        # verify the required parameter 'stat_group_ids' is set
        if ('stat_group_ids' not in params or
                params['stat_group_ids'] is None):
            raise ValueError("Missing the required parameter `stat_group_ids` when calling `game_party_peer_add`")  # noqa: E501
        # verify the required parameter 'team_i_ds' is set
        if ('team_i_ds' not in params or
                params['team_i_ds'] is None):
            raise ValueError("Missing the required parameter `team_i_ds` when calling `game_party_peer_add`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_id' in params:
            query_params.append(('match_id', params['match_id']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501
        if 'race_ids' in params:
            query_params.append(('race_ids', params['race_ids']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'stat_group_ids' in params:
            query_params.append(('statGroup_ids', params['stat_group_ids']))  # noqa: E501
        if 'team_i_ds' in params:
            query_params.append(('teamIDs', params['team_i_ds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/party/peerAdd', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_party_peer_update(self, call_num, connect_id, is_non_participants, last_call_time, match_id, profile_ids, race_ids, session_id, team_i_ds, **kwargs):  # noqa: E501
        """game_party_peer_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_peer_update(call_num, connect_id, is_non_participants, last_call_time, match_id, profile_ids, race_ids, session_id, team_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int is_non_participants: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int profile_ids: (required)
        :param int race_ids: (required)
        :param str session_id: (required)
        :param int team_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_party_peer_update_with_http_info(call_num, connect_id, is_non_participants, last_call_time, match_id, profile_ids, race_ids, session_id, team_i_ds, **kwargs)  # noqa: E501
        else:
            (data) = self.game_party_peer_update_with_http_info(call_num, connect_id, is_non_participants, last_call_time, match_id, profile_ids, race_ids, session_id, team_i_ds, **kwargs)  # noqa: E501
            return data

    def game_party_peer_update_with_http_info(self, call_num, connect_id, is_non_participants, last_call_time, match_id, profile_ids, race_ids, session_id, team_i_ds, **kwargs):  # noqa: E501
        """game_party_peer_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_peer_update_with_http_info(call_num, connect_id, is_non_participants, last_call_time, match_id, profile_ids, race_ids, session_id, team_i_ds, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int is_non_participants: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int profile_ids: (required)
        :param int race_ids: (required)
        :param str session_id: (required)
        :param int team_i_ds: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'is_non_participants', 'last_call_time', 'match_id', 'profile_ids', 'race_ids', 'session_id', 'team_i_ds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_party_peer_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_party_peer_update`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_party_peer_update`")  # noqa: E501
        # verify the required parameter 'is_non_participants' is set
        if ('is_non_participants' not in params or
                params['is_non_participants'] is None):
            raise ValueError("Missing the required parameter `is_non_participants` when calling `game_party_peer_update`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_party_peer_update`")  # noqa: E501
        # verify the required parameter 'match_id' is set
        if ('match_id' not in params or
                params['match_id'] is None):
            raise ValueError("Missing the required parameter `match_id` when calling `game_party_peer_update`")  # noqa: E501
        # verify the required parameter 'profile_ids' is set
        if ('profile_ids' not in params or
                params['profile_ids'] is None):
            raise ValueError("Missing the required parameter `profile_ids` when calling `game_party_peer_update`")  # noqa: E501
        # verify the required parameter 'race_ids' is set
        if ('race_ids' not in params or
                params['race_ids'] is None):
            raise ValueError("Missing the required parameter `race_ids` when calling `game_party_peer_update`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_party_peer_update`")  # noqa: E501
        # verify the required parameter 'team_i_ds' is set
        if ('team_i_ds' not in params or
                params['team_i_ds'] is None):
            raise ValueError("Missing the required parameter `team_i_ds` when calling `game_party_peer_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'is_non_participants' in params:
            query_params.append(('isNonParticipants', params['is_non_participants']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_id' in params:
            query_params.append(('match_id', params['match_id']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501
        if 'race_ids' in params:
            query_params.append(('race_ids', params['race_ids']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'team_i_ds' in params:
            query_params.append(('teamIDs', params['team_i_ds']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/party/peerUpdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_party_report_match(self, call_num, check_sums, connect_id, counters_zip, item_updates, last_call_time, match_id, profile_ids, race_ids, results, session_id, simplayer_i_ds, team_i_ds, xp_gained, **kwargs):  # noqa: E501
        """game_party_report_match  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_report_match(call_num, check_sums, connect_id, counters_zip, item_updates, last_call_time, match_id, profile_ids, race_ids, results, session_id, simplayer_i_ds, team_i_ds, xp_gained, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int check_sums: (required)
        :param str connect_id: (required)
        :param str counters_zip: zlib-compressed (required)
        :param int item_updates: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int profile_ids: (required)
        :param int race_ids: (required)
        :param int results: (required)
        :param str session_id: (required)
        :param int simplayer_i_ds: (required)
        :param int team_i_ds: (required)
        :param int xp_gained: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_party_report_match_with_http_info(call_num, check_sums, connect_id, counters_zip, item_updates, last_call_time, match_id, profile_ids, race_ids, results, session_id, simplayer_i_ds, team_i_ds, xp_gained, **kwargs)  # noqa: E501
        else:
            (data) = self.game_party_report_match_with_http_info(call_num, check_sums, connect_id, counters_zip, item_updates, last_call_time, match_id, profile_ids, race_ids, results, session_id, simplayer_i_ds, team_i_ds, xp_gained, **kwargs)  # noqa: E501
            return data

    def game_party_report_match_with_http_info(self, call_num, check_sums, connect_id, counters_zip, item_updates, last_call_time, match_id, profile_ids, race_ids, results, session_id, simplayer_i_ds, team_i_ds, xp_gained, **kwargs):  # noqa: E501
        """game_party_report_match  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_report_match_with_http_info(call_num, check_sums, connect_id, counters_zip, item_updates, last_call_time, match_id, profile_ids, race_ids, results, session_id, simplayer_i_ds, team_i_ds, xp_gained, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param int check_sums: (required)
        :param str connect_id: (required)
        :param str counters_zip: zlib-compressed (required)
        :param int item_updates: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param int profile_ids: (required)
        :param int race_ids: (required)
        :param int results: (required)
        :param str session_id: (required)
        :param int simplayer_i_ds: (required)
        :param int team_i_ds: (required)
        :param int xp_gained: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'check_sums', 'connect_id', 'counters_zip', 'item_updates', 'last_call_time', 'match_id', 'profile_ids', 'race_ids', 'results', 'session_id', 'simplayer_i_ds', 'team_i_ds', 'xp_gained']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_party_report_match" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'check_sums' is set
        if ('check_sums' not in params or
                params['check_sums'] is None):
            raise ValueError("Missing the required parameter `check_sums` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'counters_zip' is set
        if ('counters_zip' not in params or
                params['counters_zip'] is None):
            raise ValueError("Missing the required parameter `counters_zip` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'item_updates' is set
        if ('item_updates' not in params or
                params['item_updates'] is None):
            raise ValueError("Missing the required parameter `item_updates` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'match_id' is set
        if ('match_id' not in params or
                params['match_id'] is None):
            raise ValueError("Missing the required parameter `match_id` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'profile_ids' is set
        if ('profile_ids' not in params or
                params['profile_ids'] is None):
            raise ValueError("Missing the required parameter `profile_ids` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'race_ids' is set
        if ('race_ids' not in params or
                params['race_ids'] is None):
            raise ValueError("Missing the required parameter `race_ids` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'results' is set
        if ('results' not in params or
                params['results'] is None):
            raise ValueError("Missing the required parameter `results` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'simplayer_i_ds' is set
        if ('simplayer_i_ds' not in params or
                params['simplayer_i_ds'] is None):
            raise ValueError("Missing the required parameter `simplayer_i_ds` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'team_i_ds' is set
        if ('team_i_ds' not in params or
                params['team_i_ds'] is None):
            raise ValueError("Missing the required parameter `team_i_ds` when calling `game_party_report_match`")  # noqa: E501
        # verify the required parameter 'xp_gained' is set
        if ('xp_gained' not in params or
                params['xp_gained'] is None):
            raise ValueError("Missing the required parameter `xp_gained` when calling `game_party_report_match`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'check_sums' in params:
            query_params.append(('checkSums', params['check_sums']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'counters_zip' in params:
            query_params.append(('countersZip', params['counters_zip']))  # noqa: E501
        if 'item_updates' in params:
            query_params.append(('itemUpdates', params['item_updates']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_id' in params:
            query_params.append(('match_id', params['match_id']))  # noqa: E501
        if 'profile_ids' in params:
            query_params.append(('profile_ids', params['profile_ids']))  # noqa: E501
        if 'race_ids' in params:
            query_params.append(('race_ids', params['race_ids']))  # noqa: E501
        if 'results' in params:
            query_params.append(('results', params['results']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'simplayer_i_ds' in params:
            query_params.append(('simplayerIDs', params['simplayer_i_ds']))  # noqa: E501
        if 'team_i_ds' in params:
            query_params.append(('teamIDs', params['team_i_ds']))  # noqa: E501
        if 'xp_gained' in params:
            query_params.append(('xpGained', params['xp_gained']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/party/reportMatch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_party_send_match_chat(self, broadcast, call_num, connect_id, from_profile_id, last_call_time, match_id, message, message_type_id, session_id, to_profile_id, **kwargs):  # noqa: E501
        """game_party_send_match_chat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_send_match_chat(broadcast, call_num, connect_id, from_profile_id, last_call_time, match_id, message, message_type_id, session_id, to_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int broadcast: aoe4: 1, aoe2de: 0 (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int from_profile_id: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param str message: (required)
        :param int message_type_id: (required)
        :param str session_id: (required)
        :param int to_profile_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_party_send_match_chat_with_http_info(broadcast, call_num, connect_id, from_profile_id, last_call_time, match_id, message, message_type_id, session_id, to_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_party_send_match_chat_with_http_info(broadcast, call_num, connect_id, from_profile_id, last_call_time, match_id, message, message_type_id, session_id, to_profile_id, **kwargs)  # noqa: E501
            return data

    def game_party_send_match_chat_with_http_info(self, broadcast, call_num, connect_id, from_profile_id, last_call_time, match_id, message, message_type_id, session_id, to_profile_id, **kwargs):  # noqa: E501
        """game_party_send_match_chat  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_party_send_match_chat_with_http_info(broadcast, call_num, connect_id, from_profile_id, last_call_time, match_id, message, message_type_id, session_id, to_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int broadcast: aoe4: 1, aoe2de: 0 (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param int from_profile_id: (required)
        :param str last_call_time: (required)
        :param int match_id: (required)
        :param str message: (required)
        :param int message_type_id: (required)
        :param str session_id: (required)
        :param int to_profile_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['broadcast', 'call_num', 'connect_id', 'from_profile_id', 'last_call_time', 'match_id', 'message', 'message_type_id', 'session_id', 'to_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_party_send_match_chat" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'broadcast' is set
        if ('broadcast' not in params or
                params['broadcast'] is None):
            raise ValueError("Missing the required parameter `broadcast` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'from_profile_id' is set
        if ('from_profile_id' not in params or
                params['from_profile_id'] is None):
            raise ValueError("Missing the required parameter `from_profile_id` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'match_id' is set
        if ('match_id' not in params or
                params['match_id'] is None):
            raise ValueError("Missing the required parameter `match_id` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'message' is set
        if ('message' not in params or
                params['message'] is None):
            raise ValueError("Missing the required parameter `message` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'message_type_id' is set
        if ('message_type_id' not in params or
                params['message_type_id'] is None):
            raise ValueError("Missing the required parameter `message_type_id` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_party_send_match_chat`")  # noqa: E501
        # verify the required parameter 'to_profile_id' is set
        if ('to_profile_id' not in params or
                params['to_profile_id'] is None):
            raise ValueError("Missing the required parameter `to_profile_id` when calling `game_party_send_match_chat`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'broadcast' in params:
            query_params.append(('broadcast', params['broadcast']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'from_profile_id' in params:
            query_params.append(('from_profile_id', params['from_profile_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'match_id' in params:
            query_params.append(('match_id', params['match_id']))  # noqa: E501
        if 'message' in params:
            query_params.append(('message', params['message']))  # noqa: E501
        if 'message_type_id' in params:
            query_params.append(('messageTypeID', params['message_type_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'to_profile_id' in params:
            query_params.append(('to_profile_id', params['to_profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/party/sendMatchChat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_playerreport_report_user(self, call_num, comment, connect_id, last_call_time, metadata, report_reason, report_type, reportee_profile_id, session_id, **kwargs):  # noqa: E501
        """game_playerreport_report_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_playerreport_report_user(call_num, comment, connect_id, last_call_time, metadata, report_reason, report_type, reportee_profile_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str comment: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param object metadata: (required)
        :param int report_reason: 7=all reasons (required)
        :param int report_type: (required)
        :param int reportee_profile_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_playerreport_report_user_with_http_info(call_num, comment, connect_id, last_call_time, metadata, report_reason, report_type, reportee_profile_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_playerreport_report_user_with_http_info(call_num, comment, connect_id, last_call_time, metadata, report_reason, report_type, reportee_profile_id, session_id, **kwargs)  # noqa: E501
            return data

    def game_playerreport_report_user_with_http_info(self, call_num, comment, connect_id, last_call_time, metadata, report_reason, report_type, reportee_profile_id, session_id, **kwargs):  # noqa: E501
        """game_playerreport_report_user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_playerreport_report_user_with_http_info(call_num, comment, connect_id, last_call_time, metadata, report_reason, report_type, reportee_profile_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str comment: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param object metadata: (required)
        :param int report_reason: 7=all reasons (required)
        :param int report_type: (required)
        :param int reportee_profile_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'comment', 'connect_id', 'last_call_time', 'metadata', 'report_reason', 'report_type', 'reportee_profile_id', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_playerreport_report_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_playerreport_report_user`")  # noqa: E501
        # verify the required parameter 'comment' is set
        if ('comment' not in params or
                params['comment'] is None):
            raise ValueError("Missing the required parameter `comment` when calling `game_playerreport_report_user`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_playerreport_report_user`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_playerreport_report_user`")  # noqa: E501
        # verify the required parameter 'metadata' is set
        if ('metadata' not in params or
                params['metadata'] is None):
            raise ValueError("Missing the required parameter `metadata` when calling `game_playerreport_report_user`")  # noqa: E501
        # verify the required parameter 'report_reason' is set
        if ('report_reason' not in params or
                params['report_reason'] is None):
            raise ValueError("Missing the required parameter `report_reason` when calling `game_playerreport_report_user`")  # noqa: E501
        # verify the required parameter 'report_type' is set
        if ('report_type' not in params or
                params['report_type'] is None):
            raise ValueError("Missing the required parameter `report_type` when calling `game_playerreport_report_user`")  # noqa: E501
        # verify the required parameter 'reportee_profile_id' is set
        if ('reportee_profile_id' not in params or
                params['reportee_profile_id'] is None):
            raise ValueError("Missing the required parameter `reportee_profile_id` when calling `game_playerreport_report_user`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_playerreport_report_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'metadata' in params:
            query_params.append(('metadata', params['metadata']))  # noqa: E501
        if 'report_reason' in params:
            query_params.append(('reportReason', params['report_reason']))  # noqa: E501
        if 'report_type' in params:
            query_params.append(('reportType', params['report_type']))  # noqa: E501
        if 'reportee_profile_id' in params:
            query_params.append(('reportee_profile_id', params['reportee_profile_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/playerreport/reportuser', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_relationship_clear_relationship(self, call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, **kwargs):  # noqa: E501
        """game_relationship_clear_relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_clear_relationship(call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int relation_type: 1=Unban, 2=Unmute (required)
        :param str session_id: (required)
        :param int target_profile_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_relationship_clear_relationship_with_http_info(call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_relationship_clear_relationship_with_http_info(call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, **kwargs)  # noqa: E501
            return data

    def game_relationship_clear_relationship_with_http_info(self, call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, **kwargs):  # noqa: E501
        """game_relationship_clear_relationship  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_clear_relationship_with_http_info(call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int relation_type: 1=Unban, 2=Unmute (required)
        :param str session_id: (required)
        :param int target_profile_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'relation_type', 'session_id', 'target_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_relationship_clear_relationship" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_relationship_clear_relationship`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_relationship_clear_relationship`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_relationship_clear_relationship`")  # noqa: E501
        # verify the required parameter 'relation_type' is set
        if ('relation_type' not in params or
                params['relation_type'] is None):
            raise ValueError("Missing the required parameter `relation_type` when calling `game_relationship_clear_relationship`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_relationship_clear_relationship`")  # noqa: E501
        # verify the required parameter 'target_profile_id' is set
        if ('target_profile_id' not in params or
                params['target_profile_id'] is None):
            raise ValueError("Missing the required parameter `target_profile_id` when calling `game_relationship_clear_relationship`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'relation_type' in params:
            query_params.append(('relationType', params['relation_type']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'target_profile_id' in params:
            query_params.append(('targetProfileID', params['target_profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/relationship/clearRelationship', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_relationship_get_presence_data(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_relationship_get_presence_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_get_presence_data(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_relationship_get_presence_data_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_relationship_get_presence_data_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_relationship_get_presence_data_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_relationship_get_presence_data  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_get_presence_data_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_relationship_get_presence_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_relationship_get_presence_data`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_relationship_get_presence_data`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_relationship_get_presence_data`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_relationship_get_presence_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/relationship/getPresenceData', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_relationship_get_relationships(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_relationship_get_relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_get_relationships(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_relationship_get_relationships_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_relationship_get_relationships_with_http_info(call_num, connect_id, last_call_time, session_id, **kwargs)  # noqa: E501
            return data

    def game_relationship_get_relationships_with_http_info(self, call_num, connect_id, last_call_time, session_id, **kwargs):  # noqa: E501
        """game_relationship_get_relationships  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_get_relationships_with_http_info(call_num, connect_id, last_call_time, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_relationship_get_relationships" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_relationship_get_relationships`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_relationship_get_relationships`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_relationship_get_relationships`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_relationship_get_relationships`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/relationship/getRelationships', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_relationship_ignore(self, blocklevel, call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, **kwargs):  # noqa: E501
        """game_relationship_ignore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_ignore(blocklevel, call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int blocklevel: 1=lobby ban, 2=mute (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int relation_type: 1=Unban, 2=Unmute (required)
        :param str session_id: (required)
        :param int target_profile_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_relationship_ignore_with_http_info(blocklevel, call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_relationship_ignore_with_http_info(blocklevel, call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, **kwargs)  # noqa: E501
            return data

    def game_relationship_ignore_with_http_info(self, blocklevel, call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, **kwargs):  # noqa: E501
        """game_relationship_ignore  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_ignore_with_http_info(blocklevel, call_num, connect_id, last_call_time, relation_type, session_id, target_profile_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int blocklevel: 1=lobby ban, 2=mute (required)
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int relation_type: 1=Unban, 2=Unmute (required)
        :param str session_id: (required)
        :param int target_profile_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blocklevel', 'call_num', 'connect_id', 'last_call_time', 'relation_type', 'session_id', 'target_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_relationship_ignore" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blocklevel' is set
        if ('blocklevel' not in params or
                params['blocklevel'] is None):
            raise ValueError("Missing the required parameter `blocklevel` when calling `game_relationship_ignore`")  # noqa: E501
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_relationship_ignore`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_relationship_ignore`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_relationship_ignore`")  # noqa: E501
        # verify the required parameter 'relation_type' is set
        if ('relation_type' not in params or
                params['relation_type'] is None):
            raise ValueError("Missing the required parameter `relation_type` when calling `game_relationship_ignore`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_relationship_ignore`")  # noqa: E501
        # verify the required parameter 'target_profile_id' is set
        if ('target_profile_id' not in params or
                params['target_profile_id'] is None):
            raise ValueError("Missing the required parameter `target_profile_id` when calling `game_relationship_ignore`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'blocklevel' in params:
            query_params.append(('blocklevel', params['blocklevel']))  # noqa: E501
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'relation_type' in params:
            query_params.append(('relationType', params['relation_type']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'target_profile_id' in params:
            query_params.append(('targetProfileID', params['target_profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/relationship/ignore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_relationship_set_presence(self, call_num, connect_id, last_call_time, presence_id, session_id, **kwargs):  # noqa: E501
        """game_relationship_set_presence  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_set_presence(call_num, connect_id, last_call_time, presence_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int presence_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_relationship_set_presence_with_http_info(call_num, connect_id, last_call_time, presence_id, session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.game_relationship_set_presence_with_http_info(call_num, connect_id, last_call_time, presence_id, session_id, **kwargs)  # noqa: E501
            return data

    def game_relationship_set_presence_with_http_info(self, call_num, connect_id, last_call_time, presence_id, session_id, **kwargs):  # noqa: E501
        """game_relationship_set_presence  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_set_presence_with_http_info(call_num, connect_id, last_call_time, presence_id, session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int presence_id: (required)
        :param str session_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'presence_id', 'session_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_relationship_set_presence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_relationship_set_presence`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_relationship_set_presence`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_relationship_set_presence`")  # noqa: E501
        # verify the required parameter 'presence_id' is set
        if ('presence_id' not in params or
                params['presence_id'] is None):
            raise ValueError("Missing the required parameter `presence_id` when calling `game_relationship_set_presence`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_relationship_set_presence`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'presence_id' in params:
            query_params.append(('presence_id', params['presence_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/relationship/setPresence', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def game_relationship_set_presence_property(self, call_num, connect_id, last_call_time, presence_property_def_id, session_id, value, **kwargs):  # noqa: E501
        """game_relationship_set_presence_property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_set_presence_property(call_num, connect_id, last_call_time, presence_property_def_id, session_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int presence_property_def_id: (required)
        :param str session_id: (required)
        :param int value: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.game_relationship_set_presence_property_with_http_info(call_num, connect_id, last_call_time, presence_property_def_id, session_id, value, **kwargs)  # noqa: E501
        else:
            (data) = self.game_relationship_set_presence_property_with_http_info(call_num, connect_id, last_call_time, presence_property_def_id, session_id, value, **kwargs)  # noqa: E501
            return data

    def game_relationship_set_presence_property_with_http_info(self, call_num, connect_id, last_call_time, presence_property_def_id, session_id, value, **kwargs):  # noqa: E501
        """game_relationship_set_presence_property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.game_relationship_set_presence_property_with_http_info(call_num, connect_id, last_call_time, presence_property_def_id, session_id, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int call_num: (required)
        :param str connect_id: (required)
        :param str last_call_time: (required)
        :param int presence_property_def_id: (required)
        :param str session_id: (required)
        :param int value: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_num', 'connect_id', 'last_call_time', 'presence_property_def_id', 'session_id', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method game_relationship_set_presence_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_num' is set
        if ('call_num' not in params or
                params['call_num'] is None):
            raise ValueError("Missing the required parameter `call_num` when calling `game_relationship_set_presence_property`")  # noqa: E501
        # verify the required parameter 'connect_id' is set
        if ('connect_id' not in params or
                params['connect_id'] is None):
            raise ValueError("Missing the required parameter `connect_id` when calling `game_relationship_set_presence_property`")  # noqa: E501
        # verify the required parameter 'last_call_time' is set
        if ('last_call_time' not in params or
                params['last_call_time'] is None):
            raise ValueError("Missing the required parameter `last_call_time` when calling `game_relationship_set_presence_property`")  # noqa: E501
        # verify the required parameter 'presence_property_def_id' is set
        if ('presence_property_def_id' not in params or
                params['presence_property_def_id'] is None):
            raise ValueError("Missing the required parameter `presence_property_def_id` when calling `game_relationship_set_presence_property`")  # noqa: E501
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `game_relationship_set_presence_property`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `game_relationship_set_presence_property`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'call_num' in params:
            query_params.append(('callNum', params['call_num']))  # noqa: E501
        if 'connect_id' in params:
            query_params.append(('connect_id', params['connect_id']))  # noqa: E501
        if 'last_call_time' in params:
            query_params.append(('lastCallTime', params['last_call_time']))  # noqa: E501
        if 'presence_property_def_id' in params:
            query_params.append(('presencePropertyDef_id', params['presence_property_def_id']))  # noqa: E501
        if 'session_id' in params:
            query_params.append(('sessionID', params['session_id']))  # noqa: E501
        if 'value' in params:
            query_params.append(('value', params['value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/game/relationship/setPresenceProperty', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
