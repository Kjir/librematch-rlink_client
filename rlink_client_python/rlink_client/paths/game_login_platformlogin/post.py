# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from rlink_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from rlink_client import schemas  # noqa: F401

from . import path

# Query params
AccountTypeSchema = schemas.StrSchema
ActiveMatchIdSchema = schemas.IntSchema
AliasSchema = schemas.StrSchema
AppIDSchema = schemas.IntSchema
CallNumSchema = schemas.IntSchema
ClientLibVersionSchema = schemas.IntSchema
ConnectIdSchema = schemas.StrSchema
CountrySchema = schemas.StrSchema
InstallationTypeSchema = schemas.StrSchema
LanguageSchema = schemas.StrSchema
LastCallTimeSchema = schemas.StrSchema
MacAddressSchema = schemas.StrSchema
MajorVersionSchema = schemas.StrSchema
MinorVersionSchema = schemas.IntSchema
PlatformUserIDSchema = schemas.IntSchema
StartGameTokenSchema = schemas.StrSchema
StoreLicenseTokenSchema = schemas.StrSchema
SyncHashSchema = schemas.IntSchema
TimeoutOverrideSchema = schemas.IntSchema
TitleSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    "RequestRequiredQueryParams",
    {
        "accountType": typing.Union[
            AccountTypeSchema,
            str,
        ],
        "activeMatchId": typing.Union[
            ActiveMatchIdSchema,
            decimal.Decimal,
            int,
        ],
        "alias": typing.Union[
            AliasSchema,
            str,
        ],
        "appID": typing.Union[
            AppIDSchema,
            decimal.Decimal,
            int,
        ],
        "callNum": typing.Union[
            CallNumSchema,
            decimal.Decimal,
            int,
        ],
        "clientLibVersion": typing.Union[
            ClientLibVersionSchema,
            decimal.Decimal,
            int,
        ],
        "connect_id": typing.Union[
            ConnectIdSchema,
            str,
        ],
        "country": typing.Union[
            CountrySchema,
            str,
        ],
        "installationType": typing.Union[
            InstallationTypeSchema,
            str,
        ],
        "lastCallTime": typing.Union[
            LastCallTimeSchema,
            str,
        ],
        "macAddress": typing.Union[
            MacAddressSchema,
            str,
        ],
        "majorVersion": typing.Union[
            MajorVersionSchema,
            str,
        ],
        "minorVersion": typing.Union[
            MinorVersionSchema,
            decimal.Decimal,
            int,
        ],
        "platformUserID": typing.Union[
            PlatformUserIDSchema,
            decimal.Decimal,
            int,
        ],
        "startGameToken": typing.Union[
            StartGameTokenSchema,
            str,
        ],
        "syncHash": typing.Union[
            SyncHashSchema,
            decimal.Decimal,
            int,
        ],
        "timeoutOverride": typing.Union[
            TimeoutOverrideSchema,
            decimal.Decimal,
            int,
        ],
    },
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    "RequestOptionalQueryParams",
    {
        "language": typing.Union[
            LanguageSchema,
            str,
        ],
        "storeLicenseToken": typing.Union[
            StoreLicenseTokenSchema,
            str,
        ],
        "title": typing.Union[
            TitleSchema,
            str,
        ],
    },
    total=False,
)


class RequestQueryParams(
    RequestRequiredQueryParams, RequestOptionalQueryParams
):
    pass


request_query_account_type = api_client.QueryParameter(
    name="accountType",
    style=api_client.ParameterStyle.FORM,
    schema=AccountTypeSchema,
    required=True,
    explode=True,
)
request_query_active_match_id = api_client.QueryParameter(
    name="activeMatchId",
    style=api_client.ParameterStyle.FORM,
    schema=ActiveMatchIdSchema,
    required=True,
    explode=True,
)
request_query_alias = api_client.QueryParameter(
    name="alias",
    style=api_client.ParameterStyle.FORM,
    schema=AliasSchema,
    required=True,
    explode=True,
)
request_query_app_id = api_client.QueryParameter(
    name="appID",
    style=api_client.ParameterStyle.FORM,
    schema=AppIDSchema,
    required=True,
    explode=True,
)
request_query_call_num = api_client.QueryParameter(
    name="callNum",
    style=api_client.ParameterStyle.FORM,
    schema=CallNumSchema,
    required=True,
    explode=True,
)
request_query_client_lib_version = api_client.QueryParameter(
    name="clientLibVersion",
    style=api_client.ParameterStyle.FORM,
    schema=ClientLibVersionSchema,
    required=True,
    explode=True,
)
request_query_connect_id = api_client.QueryParameter(
    name="connect_id",
    style=api_client.ParameterStyle.FORM,
    schema=ConnectIdSchema,
    required=True,
    explode=True,
)
request_query_country = api_client.QueryParameter(
    name="country",
    style=api_client.ParameterStyle.FORM,
    schema=CountrySchema,
    required=True,
    explode=True,
)
request_query_installation_type = api_client.QueryParameter(
    name="installationType",
    style=api_client.ParameterStyle.FORM,
    schema=InstallationTypeSchema,
    required=True,
    explode=True,
)
request_query_language = api_client.QueryParameter(
    name="language",
    style=api_client.ParameterStyle.FORM,
    schema=LanguageSchema,
    explode=True,
)
request_query_last_call_time = api_client.QueryParameter(
    name="lastCallTime",
    style=api_client.ParameterStyle.FORM,
    schema=LastCallTimeSchema,
    required=True,
    explode=True,
)
request_query_mac_address = api_client.QueryParameter(
    name="macAddress",
    style=api_client.ParameterStyle.FORM,
    schema=MacAddressSchema,
    required=True,
    explode=True,
)
request_query_major_version = api_client.QueryParameter(
    name="majorVersion",
    style=api_client.ParameterStyle.FORM,
    schema=MajorVersionSchema,
    required=True,
    explode=True,
)
request_query_minor_version = api_client.QueryParameter(
    name="minorVersion",
    style=api_client.ParameterStyle.FORM,
    schema=MinorVersionSchema,
    required=True,
    explode=True,
)
request_query_platform_user_id = api_client.QueryParameter(
    name="platformUserID",
    style=api_client.ParameterStyle.FORM,
    schema=PlatformUserIDSchema,
    required=True,
    explode=True,
)
request_query_start_game_token = api_client.QueryParameter(
    name="startGameToken",
    style=api_client.ParameterStyle.FORM,
    schema=StartGameTokenSchema,
    required=True,
    explode=True,
)
request_query_store_license_token = api_client.QueryParameter(
    name="storeLicenseToken",
    style=api_client.ParameterStyle.FORM,
    schema=StoreLicenseTokenSchema,
    explode=True,
)
request_query_sync_hash = api_client.QueryParameter(
    name="syncHash",
    style=api_client.ParameterStyle.FORM,
    schema=SyncHashSchema,
    required=True,
    explode=True,
)
request_query_timeout_override = api_client.QueryParameter(
    name="timeoutOverride",
    style=api_client.ParameterStyle.FORM,
    schema=TimeoutOverrideSchema,
    required=True,
    explode=True,
)
request_query_title = api_client.QueryParameter(
    name="title",
    style=api_client.ParameterStyle.FORM,
    schema=TitleSchema,
    explode=True,
)
_auth = [
    "authLogin",
]
SchemaFor200ResponseBodyApplicationJson = schemas.AnyTypeSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[SchemaFor200ResponseBodyApplicationJson,]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        "application/json": api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson
        ),
    },
)
_status_code_to_response = {
    "200": _response_for_200,
}
_all_accept_content_types = ("application/json",)


class BaseApi(api_client.Api):
    @typing.overload
    def _game_login_platform_login_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def _game_login_platform_login_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def _game_login_platform_login_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def _game_login_platform_login_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_account_type,
            request_query_active_match_id,
            request_query_alias,
            request_query_app_id,
            request_query_call_num,
            request_query_client_lib_version,
            request_query_connect_id,
            request_query_country,
            request_query_installation_type,
            request_query_language,
            request_query_last_call_time,
            request_query_mac_address,
            request_query_major_version,
            request_query_minor_version,
            request_query_platform_user_id,
            request_query_start_game_token,
            request_query_store_license_token,
            request_query_sync_hash,
            request_query_timeout_override,
            request_query_title,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = (
                    parameter.get_prefix_separator_iterator()
                )
            serialized_data = parameter.serialize(
                parameter_data, prefix_separator_iterator
            )
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add("Accept", accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method="post".upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(
                response=response
            )
        else:
            response_for_status = _status_code_to_response.get(
                str(response.status)
            )
            if response_for_status:
                api_response = response_for_status.deserialize(
                    response, self.api_client.configuration
                )
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(
                    response=response
                )

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response,
            )

        return api_response


class GameLoginPlatformLogin(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def game_login_platform_login(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def game_login_platform_login(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def game_login_platform_login(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def game_login_platform_login(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._game_login_platform_login_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[ApiResponseFor200,]:
        ...

    @typing.overload
    def post(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization:
        ...

    @typing.overload
    def post(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        ...

    def post(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._game_login_platform_login_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization,
        )
