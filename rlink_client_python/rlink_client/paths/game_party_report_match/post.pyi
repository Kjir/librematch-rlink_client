# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from openapi_client import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401

# Query params
CallNumSchema = schemas.IntSchema
CheckSumsSchema = schemas.IntSchema
CountersZipSchema = schemas.StrSchema
ItemUpdatesSchema = schemas.IntSchema
LastCallTimeSchema = schemas.StrSchema
MatchIdSchema = schemas.IntSchema
ProfileIdsSchema = schemas.IntSchema
RaceIdsSchema = schemas.IntSchema
ResultsSchema = schemas.IntSchema
SimplayerIDsSchema = schemas.IntSchema
TeamIDsSchema = schemas.IntSchema
XpGainedSchema = schemas.IntSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'callNum': typing.Union[CallNumSchema, decimal.Decimal, int, ],
        'checkSums': typing.Union[CheckSumsSchema, decimal.Decimal, int, ],
        'countersZip': typing.Union[CountersZipSchema, str, ],
        'itemUpdates': typing.Union[ItemUpdatesSchema, decimal.Decimal, int, ],
        'lastCallTime': typing.Union[LastCallTimeSchema, str, ],
        'match_id': typing.Union[MatchIdSchema, decimal.Decimal, int, ],
        'profile_ids': typing.Union[ProfileIdsSchema, decimal.Decimal, int, ],
        'race_ids': typing.Union[RaceIdsSchema, decimal.Decimal, int, ],
        'results': typing.Union[ResultsSchema, decimal.Decimal, int, ],
        'simplayerIDs': typing.Union[SimplayerIDsSchema, decimal.Decimal, int, ],
        'teamIDs': typing.Union[TeamIDsSchema, decimal.Decimal, int, ],
        'xpGained': typing.Union[XpGainedSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_call_num = api_client.QueryParameter(
    name="callNum",
    style=api_client.ParameterStyle.FORM,
    schema=CallNumSchema,
    required=True,
    explode=True,
)
request_query_check_sums = api_client.QueryParameter(
    name="checkSums",
    style=api_client.ParameterStyle.FORM,
    schema=CheckSumsSchema,
    required=True,
    explode=True,
)
request_query_counters_zip = api_client.QueryParameter(
    name="countersZip",
    style=api_client.ParameterStyle.FORM,
    schema=CountersZipSchema,
    required=True,
    explode=True,
)
request_query_item_updates = api_client.QueryParameter(
    name="itemUpdates",
    style=api_client.ParameterStyle.FORM,
    schema=ItemUpdatesSchema,
    required=True,
    explode=True,
)
request_query_last_call_time = api_client.QueryParameter(
    name="lastCallTime",
    style=api_client.ParameterStyle.FORM,
    schema=LastCallTimeSchema,
    required=True,
    explode=True,
)
request_query_match_id = api_client.QueryParameter(
    name="match_id",
    style=api_client.ParameterStyle.FORM,
    schema=MatchIdSchema,
    required=True,
    explode=True,
)
request_query_profile_ids = api_client.QueryParameter(
    name="profile_ids",
    style=api_client.ParameterStyle.FORM,
    schema=ProfileIdsSchema,
    required=True,
    explode=True,
)
request_query_race_ids = api_client.QueryParameter(
    name="race_ids",
    style=api_client.ParameterStyle.FORM,
    schema=RaceIdsSchema,
    required=True,
    explode=True,
)
request_query_results = api_client.QueryParameter(
    name="results",
    style=api_client.ParameterStyle.FORM,
    schema=ResultsSchema,
    required=True,
    explode=True,
)
request_query_simplayer_ids = api_client.QueryParameter(
    name="simplayerIDs",
    style=api_client.ParameterStyle.FORM,
    schema=SimplayerIDsSchema,
    required=True,
    explode=True,
)
request_query_team_ids = api_client.QueryParameter(
    name="teamIDs",
    style=api_client.ParameterStyle.FORM,
    schema=TeamIDsSchema,
    required=True,
    explode=True,
)
request_query_xp_gained = api_client.QueryParameter(
    name="xpGained",
    style=api_client.ParameterStyle.FORM,
    schema=XpGainedSchema,
    required=True,
    explode=True,
)
SchemaFor200ResponseBodyApplicationJson = schemas.AnyTypeSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _game_party_report_match_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _game_party_report_match_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _game_party_report_match_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _game_party_report_match_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_call_num,
            request_query_check_sums,
            request_query_counters_zip,
            request_query_item_updates,
            request_query_last_call_time,
            request_query_match_id,
            request_query_profile_ids,
            request_query_race_ids,
            request_query_results,
            request_query_simplayer_ids,
            request_query_team_ids,
            request_query_xp_gained,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GamePartyReportMatch(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def game_party_report_match(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def game_party_report_match(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def game_party_report_match(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def game_party_report_match(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._game_party_report_match_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def post(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def post(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def post(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._game_party_report_match_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


