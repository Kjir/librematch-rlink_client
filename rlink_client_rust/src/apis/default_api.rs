/*
 * Relic Link API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.11.01
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`community_clan_find`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityClanFindError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_find_advertisements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityFindAdvertisementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_achievements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetAchievementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_available_achievements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetAvailableAchievementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_available_community_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetAvailableCommunityEventsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_available_leaderboards`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetAvailableLeaderboardsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_avatar_stat_for_profile`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetAvatarStatForProfileError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_clan_info_full`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetClanInfoFullError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_inventory_by_profile_ids`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetInventoryByProfileIdsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_leaderboard2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetLeaderboard2Error {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_personal_stat`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetPersonalStatError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_get_recent_match_history`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityGetRecentMatchHistoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_news`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityNewsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`community_proxy_steam_user_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CommunityProxySteamUserRequestError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_account_find_profiles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAccountFindProfilesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_account_find_profiles_by_platform_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAccountFindProfilesByPlatformIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_account_get_profile_name`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAccountGetProfileNameError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_account_get_profile_property`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAccountGetProfilePropertyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_account_set_avatar_metadata`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAccountSetAvatarMetadataError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_account_set_language`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAccountSetLanguageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_achievement_get_achievements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAchievementGetAchievementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_achievement_get_available_achievements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAchievementGetAvailableAchievementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_achievement_sync_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAchievementSyncStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_find_advertisements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementFindAdvertisementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_find_observable_advertisements_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementFindObservableAdvertisementsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_find_observable_advertisements_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementFindObservableAdvertisementsPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_get_advertisements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementGetAdvertisementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_get_lan_advertisements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementGetLanAdvertisementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_host`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementHostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_join`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementJoinError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_leave`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementLeaveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_start_observing`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementStartObservingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_stop_observing`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementStopObservingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_update_platform_lobby_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementUpdatePlatformLobbyIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_update_state`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementUpdateStateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_advertisement_update_tags`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAdvertisementUpdateTagsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_automatch2_get_automatch_map`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAutomatch2GetAutomatchMapError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_automatch2_polling`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAutomatch2PollingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_automatch2_stop_polling`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAutomatch2StopPollingError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_automatch2_update_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAutomatch2UpdateStatusError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_automatch_get_automatch_map`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameAutomatchGetAutomatchMapError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_challenge_get_challenge_progress`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameChallengeGetChallengeProgressError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_challenge_get_challenge_progress_by_profile_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameChallengeGetChallengeProgressByProfileIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_challenge_get_challenges`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameChallengeGetChallengesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_challenge_update_progress_batched`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameChallengeUpdateProgressBatchedError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_chat_delete_offline_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameChatDeleteOfflineMessageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_chat_get_chat_channels`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameChatGetChatChannelsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_chat_get_offline_messages`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameChatGetOfflineMessagesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_clan_apply`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameClanApplyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_clan_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameClanCreateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_clan_disband`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameClanDisbandError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_clan_find`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameClanFindError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_clan_get_clan`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameClanGetClanError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_clan_get_clan_info_full`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameClanGetClanInfoFullError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_clan_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameClanUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_cloud_get_file_url_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameCloudGetFileUrlGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_cloud_get_file_url_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameCloudGetFileUrlPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_cloud_get_temp_credentials`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameCloudGetTempCredentialsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_community_event_get_available_community_events`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameCommunityEventGetAvailableCommunityEventsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_community_event_get_event_challenge_progress`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameCommunityEventGetEventChallengeProgressError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_community_event_get_event_stats`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameCommunityEventGetEventStatsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_invitation_cancel_invitation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameInvitationCancelInvitationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_invitation_extend_invitation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameInvitationExtendInvitationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_detach_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemDetachItemsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_get_inventory_by_profile_ids`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemGetInventoryByProfileIdsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_get_item_bundle_items_json`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemGetItemBundleItemsJsonError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_get_item_definitions_json`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemGetItemDefinitionsJsonError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_get_item_loadouts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemGetItemLoadoutsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_get_item_prices`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemGetItemPricesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_get_level_rewards_table_json`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemGetLevelRewardsTableJsonError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_get_personalized_sale_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemGetPersonalizedSaleItemsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_get_scheduled_sale_and_items`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemGetScheduledSaleAndItemsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_move_charges`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemMoveChargesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_move_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemMoveItemError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_open_item_pack`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemOpenItemPackError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_sign_item`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemSignItemError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_item_update_item_attributes`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameItemUpdateItemAttributesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_available_leaderboards`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetAvailableLeaderboardsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_leaderboard`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetLeaderboardError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_party_stat`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetPartyStatError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_personal_stat`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetPersonalStatError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_recent_match_history_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetRecentMatchHistoryGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_recent_match_history_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetRecentMatchHistoryPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_recent_match_single_player_history`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetRecentMatchSinglePlayerHistoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_stat_groups_by_profile_ids`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetStatGroupsByProfileIdsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_get_stats_for_leaderboard_by_profile_name`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardGetStatsForLeaderboardByProfileNameError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_leaderboard_set_avatar_stat_values`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLeaderboardSetAvatarStatValuesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_login_logout`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLoginLogoutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_login_platform_login`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLoginPlatformLoginError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_login_read_session`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameLoginReadSessionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_news_get_news`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameNewsGetNewsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_party_create_or_report_single_player`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamePartyCreateOrReportSinglePlayerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_party_finalize_replay_upload`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamePartyFinalizeReplayUploadError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_party_peer_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamePartyPeerAddError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_party_peer_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamePartyPeerUpdateError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_party_report_match`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamePartyReportMatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_party_send_match_chat`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamePartySendMatchChatError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_playerreport_report_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GamePlayerreportReportUserError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_relationship_clear_relationship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameRelationshipClearRelationshipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_relationship_get_presence_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameRelationshipGetPresenceDataError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_relationship_get_relationships`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameRelationshipGetRelationshipsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_relationship_ignore`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameRelationshipIgnoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_relationship_set_presence`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameRelationshipSetPresenceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`game_relationship_set_presence_property`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GameRelationshipSetPresencePropertyError {
    UnknownValue(serde_json::Value),
}


pub async fn community_clan_find(configuration: &configuration::Configuration, join_policies: i32, name: &str, tags: &str, start: i32, count: i32, title: Option<&str>) -> Result<(), Error<CommunityClanFindError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/clan/find", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("joinPolicies", &join_policies.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("tags", &tags.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("start", &start.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("count", &count.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityClanFindError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_find_advertisements(configuration: &configuration::Configuration, title: Option<&str>) -> Result<(), Error<CommunityFindAdvertisementsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/advertisement/findAdvertisements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityFindAdvertisementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_achievements(configuration: &configuration::Configuration, title: Option<&str>, profileids: Option<i32>) -> Result<(), Error<CommunityGetAchievementsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/achievement/getAchievements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profileids {
        local_var_req_builder = local_var_req_builder.query(&[("profileids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetAchievementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_available_achievements(configuration: &configuration::Configuration, title: Option<&str>) -> Result<(), Error<CommunityGetAvailableAchievementsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/achievement/getAvailableAchievements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetAvailableAchievementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_available_community_events(configuration: &configuration::Configuration, title: Option<&str>) -> Result<(), Error<CommunityGetAvailableCommunityEventsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/CommunityEvent/getAvailableCommunityEvents", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetAvailableCommunityEventsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_available_leaderboards(configuration: &configuration::Configuration, title: Option<&str>) -> Result<(), Error<CommunityGetAvailableLeaderboardsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/leaderboard/getAvailableLeaderboards", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetAvailableLeaderboardsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_avatar_stat_for_profile(configuration: &configuration::Configuration, title: Option<&str>, profile_names: Option<&str>) -> Result<(), Error<CommunityGetAvatarStatForProfileError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/leaderboard/GetAvatarStatForProfile", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile_names {
        local_var_req_builder = local_var_req_builder.query(&[("profile_names", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetAvatarStatForProfileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_clan_info_full(configuration: &configuration::Configuration, name: &str, title: Option<&str>) -> Result<(), Error<CommunityGetClanInfoFullError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/clan/getClanInfoFull", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetClanInfoFullError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_inventory_by_profile_ids(configuration: &configuration::Configuration, title: Option<&str>, profileids: Option<i32>) -> Result<(), Error<CommunityGetInventoryByProfileIdsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/item/getInventoryByProfileIDs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profileids {
        local_var_req_builder = local_var_req_builder.query(&[("profileids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetInventoryByProfileIdsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_leaderboard2(configuration: &configuration::Configuration, start: i32, count: i32, title: Option<&str>, leaderboard_id: Option<i32>, sort_by: Option<i32>, platform: Option<&str>) -> Result<(), Error<CommunityGetLeaderboard2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/leaderboard/getLeaderboard2", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = leaderboard_id {
        local_var_req_builder = local_var_req_builder.query(&[("leaderboard_id", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start", &start.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("count", &count.to_string())]);
    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder = local_var_req_builder.query(&[("sortBy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform {
        local_var_req_builder = local_var_req_builder.query(&[("platform", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetLeaderboard2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_personal_stat(configuration: &configuration::Configuration, title: Option<&str>, profile_ids: Option<&str>, profile_names: Option<&str>, aliases: Option<&str>) -> Result<(), Error<CommunityGetPersonalStatError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/leaderboard/GetPersonalStat", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile_ids {
        local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile_names {
        local_var_req_builder = local_var_req_builder.query(&[("profile_names", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = aliases {
        local_var_req_builder = local_var_req_builder.query(&[("aliases", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetPersonalStatError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_get_recent_match_history(configuration: &configuration::Configuration, title: Option<&str>, profile_ids: Option<&str>, profile_names: Option<&str>) -> Result<(), Error<CommunityGetRecentMatchHistoryError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/leaderboard/getRecentMatchHistory", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile_ids {
        local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile_names {
        local_var_req_builder = local_var_req_builder.query(&[("profile_names", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityGetRecentMatchHistoryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_news(configuration: &configuration::Configuration, title: Option<&str>) -> Result<(), Error<CommunityNewsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/news", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityNewsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn community_proxy_steam_user_request(configuration: &configuration::Configuration, request: Option<&str>, title: Option<&str>, profile_ids: Option<&str>, profile_names: Option<&str>) -> Result<(), Error<CommunityProxySteamUserRequestError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/community/external/proxysteamuserrequest", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = request {
        local_var_req_builder = local_var_req_builder.query(&[("request", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile_ids {
        local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile_names {
        local_var_req_builder = local_var_req_builder.query(&[("profileNames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CommunityProxySteamUserRequestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_account_find_profiles(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, name: &str, session_id: &str) -> Result<(), Error<GameAccountFindProfilesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/account/FindProfiles", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAccountFindProfilesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_account_find_profiles_by_platform_id(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, platform_ids: i32) -> Result<(), Error<GameAccountFindProfilesByPlatformIdError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/account/FindProfilesByPlatformID", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("platformIDs", &platform_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAccountFindProfilesByPlatformIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_account_get_profile_name(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, profile_ids: i32, session_id: &str) -> Result<(), Error<GameAccountGetProfileNameError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/account/getProfileName", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &profile_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAccountGetProfileNameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_account_get_profile_property(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, profile_id: i32, property_id: &str) -> Result<(), Error<GameAccountGetProfilePropertyError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/account/getProfileProperty", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_id", &profile_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("property_id", &property_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAccountGetProfilePropertyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_account_set_avatar_metadata(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, meta_data: serde_json::Value) -> Result<(), Error<GameAccountSetAvatarMetadataError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/account/setAvatarMetadata", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("metaData", &meta_data.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAccountSetAvatarMetadataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_account_set_language(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, title: Option<&str>, language: Option<&str>) -> Result<(), Error<GameAccountSetLanguageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/account/setLanguage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAccountSetLanguageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_achievement_get_achievements(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, profile_ids: i32) -> Result<(), Error<GameAchievementGetAchievementsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Achievement/getAchievements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profileIDs", &profile_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAchievementGetAchievementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// No authentication needed
pub async fn game_achievement_get_available_achievements(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, signature: &str) -> Result<(), Error<GameAchievementGetAvailableAchievementsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Achievement/getAvailableAchievements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("signature", &signature.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAchievementGetAvailableAchievementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_achievement_sync_stats(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, account_type: &str, auth: &str) -> Result<(), Error<GameAchievementSyncStatsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/achievement/syncStats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("accountType", &account_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("auth", &auth.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAchievementSyncStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_find_advertisements(configuration: &configuration::Configuration, app_binary_checksum: i32, call_num: i32, connect_id: &str, data_checksum: i32, last_call_time: &str, match_type_id: i32, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, profile_ids: i32, race_ids: i32, session_id: &str, stat_group_ids: i32, version_flags: i32) -> Result<(), Error<GameAdvertisementFindAdvertisementsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/findAdvertisements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("appBinaryChecksum", &app_binary_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataChecksum", &data_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchType_id", &match_type_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &profile_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("race_ids", &race_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("statGroup_ids", &stat_group_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementFindAdvertisementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_find_observable_advertisements_get(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, app_binary_checksum: i32, count: i32, data_checksum: i32, desc: i32, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, observer_group_id: i32, sort_order: i32, start: i32, version_flags: i32) -> Result<(), Error<GameAdvertisementFindObservableAdvertisementsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/findObservableAdvertisements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("appBinaryChecksum", &app_binary_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("count", &count.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataChecksum", &data_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("desc", &desc.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("observerGroupID", &observer_group_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sortOrder", &sort_order.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("start", &start.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementFindObservableAdvertisementsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_find_observable_advertisements_post(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, app_binary_checksum: i32, count: i32, data_checksum: i32, desc: i32, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, observer_group_id: i32, sort_order: i32, start: i32, version_flags: i32) -> Result<(), Error<GameAdvertisementFindObservableAdvertisementsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/findObservableAdvertisements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("appBinaryChecksum", &app_binary_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("count", &count.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataChecksum", &data_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("desc", &desc.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("observerGroupID", &observer_group_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sortOrder", &sort_order.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("start", &start.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementFindObservableAdvertisementsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_get_advertisements(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, match_ids: i32, session_id: &str) -> Result<(), Error<GameAdvertisementGetAdvertisementsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/getAdvertisements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("match_ids", &match_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementGetAdvertisementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_get_lan_advertisements(configuration: &configuration::Configuration, app_binary_checksum: i32, call_num: i32, connect_id: &str, data_checksum: i32, lan_server_guids: &str, last_call_time: &str, match_type_id: i32, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, session_id: &str, version_flags: i32) -> Result<(), Error<GameAdvertisementGetLanAdvertisementsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/getLanAdvertisements", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("appBinaryChecksum", &app_binary_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataChecksum", &data_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lanServerGuids", &lan_server_guids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchType_id", &match_type_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementGetLanAdvertisementsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_host(configuration: &configuration::Configuration, advertisementid: i32, app_binary_checksum: i32, automatch_poll_id: i32, call_num: i32, connect_id: &str, data_checksum: i32, description: &str, hostid: i32, is_observable: i32, last_call_time: &str, mapname: &str, matchtype: i32, maxplayers: i32, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, observer_delay: i32, observer_password: &str, options: &str, party: i32, password: &str, passworded: i32, race: i32, relay_region: &str, service_type: i32, session_id: &str, slotinfo: &str, state: i32, statgroup: i32, team: i32, version_flags: i32, visible: i32) -> Result<(), Error<GameAdvertisementHostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/host", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("advertisementid", &advertisementid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("appBinaryChecksum", &app_binary_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("automatchPoll_id", &automatch_poll_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataChecksum", &data_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("description", &description.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("hostid", &hostid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("isObservable", &is_observable.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("mapname", &mapname.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchtype", &matchtype.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("maxplayers", &maxplayers.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("observerDelay", &observer_delay.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("observerPassword", &observer_password.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("options", &options.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("party", &party.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("password", &password.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("passworded", &passworded.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("race", &race.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("relayRegion", &relay_region.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("serviceType", &service_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("slotinfo", &slotinfo.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("state", &state.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("statgroup", &statgroup.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("team", &team.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("visible", &visible.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementHostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_join(configuration: &configuration::Configuration, advertisementid: i32, app_binary_checksum: i32, call_num: i32, connect_id: &str, data_checksum: i32, last_call_time: &str, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, party: i32, password: &str, race: i32, session_id: &str, statgroup: i32, team: i32, version_flags: i32) -> Result<(), Error<GameAdvertisementJoinError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/join", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("advertisementid", &advertisementid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("appBinaryChecksum", &app_binary_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataChecksum", &data_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("party", &party.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("password", &password.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("race", &race.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("statgroup", &statgroup.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("team", &team.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementJoinError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_leave(configuration: &configuration::Configuration, advertisementid: i32, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameAdvertisementLeaveError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/leave", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("advertisementid", &advertisementid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementLeaveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_start_observing(configuration: &configuration::Configuration, advertisementid: i32, app_binary_checksum: i32, call_num: i32, connect_id: &str, data_checksum: i32, last_call_time: &str, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, password: &str, session_id: &str, version_flags: i32, with_party_session_id: i32) -> Result<(), Error<GameAdvertisementStartObservingError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/startObserving", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("advertisementid", &advertisementid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("appBinaryChecksum", &app_binary_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataChecksum", &data_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("password", &password.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("withPartySessionID", &with_party_session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementStartObservingError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_stop_observing(configuration: &configuration::Configuration, advertisementid: i32, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameAdvertisementStopObservingError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/stopObserving", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("advertisementid", &advertisementid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementStopObservingError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_update(configuration: &configuration::Configuration, advertisementid: i32, app_binary_checksum: i32, automatch_poll_id: i32, call_num: i32, connect_id: &str, data_checksum: i32, description: &str, hostid: i32, is_observable: i32, last_call_time: &str, mapname: &str, matchtype: i32, maxplayers: i32, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, observer_delay: i32, observer_password: &str, options: &str, password: &str, passworded: i32, race: i32, session_id: &str, slotinfo: &str, state: i32, team: i32, version_flags: i32, visible: i32) -> Result<(), Error<GameAdvertisementUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/update", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("advertisementid", &advertisementid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("appBinaryChecksum", &app_binary_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("automatchPoll_id", &automatch_poll_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataChecksum", &data_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("description", &description.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("hostid", &hostid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("isObservable", &is_observable.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("mapname", &mapname.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchtype", &matchtype.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("maxplayers", &maxplayers.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("observerDelay", &observer_delay.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("observerPassword", &observer_password.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("options", &options.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("password", &password.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("passworded", &passworded.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("race", &race.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("slotinfo", &slotinfo.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("state", &state.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("team", &team.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("visible", &visible.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_update_platform_lobby_id(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, match_id: i32, platformlobby_id: i32, session_id: &str) -> Result<(), Error<GameAdvertisementUpdatePlatformLobbyIdError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/updatePlatformLobbyID", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchID", &match_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("platformlobbyID", &platformlobby_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementUpdatePlatformLobbyIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_update_state(configuration: &configuration::Configuration, advertisementid: i32, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameAdvertisementUpdateStateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/updateState", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("advertisementid", &advertisementid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementUpdateStateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_advertisement_update_tags(configuration: &configuration::Configuration, advertisementid: i32, call_num: i32, connect_id: &str, last_call_time: &str, numeric_tag_names: &str, numeric_tag_values: i32, session_id: &str, string_tag_names: &str, string_tag_values: &str) -> Result<(), Error<GameAdvertisementUpdateTagsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/advertisement/updateTags", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("advertisementid", &advertisementid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("numericTagNames", &numeric_tag_names.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("numericTagValues", &numeric_tag_values.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("stringTagNames", &string_tag_names.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("stringTagValues", &string_tag_values.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAdvertisementUpdateTagsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_automatch2_get_automatch_map(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameAutomatch2GetAutomatchMapError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/automatch2/getAutomatchMap", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAutomatch2GetAutomatchMapError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_automatch2_polling(configuration: &configuration::Configuration, app_bin_crc: i32, call_num: i32, connect_id: &str, data_crc: i32, faction_ids: i32, last_call_time: &str, match_types: i32, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, options: &str, party_session_id: i32, race_info_key: i32, race_info_profile_id: i32, race_info_race_id: i32, relay_ping_times: i32, relay_region: &str, relay_regions: &str, session_id: &str, version_flags: i32, veto_map_key: i32, veto_maps: &str) -> Result<(), Error<GameAutomatch2PollingError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/automatch2/polling", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("appBinCRC", &app_bin_crc.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("dataCRC", &data_crc.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("factionIDs", &faction_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchTypes", &match_types.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("options", &options.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("partySessionID", &party_session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("raceInfoKey", &race_info_key.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("raceInfoProfileID", &race_info_profile_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("raceInfoRaceID", &race_info_race_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("relayPingTimes", &relay_ping_times.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("relayRegion", &relay_region.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("relayRegions", &relay_regions.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("vetoMapKey", &veto_map_key.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("vetoMaps", &veto_maps.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAutomatch2PollingError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_automatch2_stop_polling(configuration: &configuration::Configuration, call_num: i32, commit: i32, connect_id: &str, last_call_time: &str, owner_profile_id: i32, session_id: &str) -> Result<(), Error<GameAutomatch2StopPollingError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/automatch2/stoppolling", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("commit", &commit.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("ownerProfileID", &owner_profile_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAutomatch2StopPollingError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_automatch2_update_status(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, match_id: i32, result: i32, result_code: i32, session_id: &str) -> Result<(), Error<GameAutomatch2UpdateStatusError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/automatch2/updateStatus", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchID", &match_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("result", &result.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("resultCode", &result_code.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAutomatch2UpdateStatusError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_automatch_get_automatch_map(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameAutomatchGetAutomatchMapError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/automatch/getAutomatchMap", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameAutomatchGetAutomatchMapError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_challenge_get_challenge_progress(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameChallengeGetChallengeProgressError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Challenge/getChallengeProgress", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameChallengeGetChallengeProgressError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// TODO: Request not available in Wiki, this is guessed
pub async fn game_challenge_get_challenge_progress_by_profile_id(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, profile_id: i32, session_id: &str) -> Result<(), Error<GameChallengeGetChallengeProgressByProfileIdError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Challenge/getChallengeProgressByProfileID", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_id", &profile_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameChallengeGetChallengeProgressByProfileIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_challenge_get_challenges(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, signature: &str) -> Result<(), Error<GameChallengeGetChallengesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Challenge/getChallenges", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("signature", &signature.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameChallengeGetChallengesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_challenge_update_progress_batched(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, progress_ids: i32, session_id: &str, update_amounts: i32) -> Result<(), Error<GameChallengeUpdateProgressBatchedError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/challenge/updateProgressBatched", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("progressIDs", &progress_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("updateAmounts", &update_amounts.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameChallengeUpdateProgressBatchedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_chat_delete_offline_message(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, message_id: i32, session_id: &str) -> Result<(), Error<GameChatDeleteOfflineMessageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/chat/deleteOfflineMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("messageID", &message_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameChatDeleteOfflineMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_chat_get_chat_channels(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameChatGetChatChannelsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/chat/getChatChannels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameChatGetChatChannelsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_chat_get_offline_messages(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameChatGetOfflineMessagesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/chat/getOfflineMessages", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameChatGetOfflineMessagesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_clan_apply(configuration: &configuration::Configuration, call_num: i32, clan_list_name: &str, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameClanApplyError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/clan/apply", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("clanList_name", &clan_list_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameClanApplyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_clan_create(configuration: &configuration::Configuration, call_num: i32, chat: &str, connect_id: &str, cost: i32, demote: &str, description: &str, disband: &str, edit_info: &str, edit_permission: &str, full_name: &str, icon: &str, invite: &str, item_price_id: i32, join_policy: i32, last_call_time: &str, loc_string_id: i32, message_of_the_day: &str, metadata: serde_json::Value, name: &str, paymentitem: i32, permission_name: &str, promote: &str, rank: &str, remove: &str, session_id: &str, tags: &str) -> Result<(), Error<GameClanCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/clan/create", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("chat", &chat.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("cost", &cost.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("demote", &demote.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("description", &description.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("disband", &disband.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("editInfo", &edit_info.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("editPermission", &edit_permission.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("fullName", &full_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("icon", &icon.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("invite", &invite.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemPrice_id", &item_price_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("joinPolicy", &join_policy.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("locStringID", &loc_string_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("messageOfTheDay", &message_of_the_day.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("metadata", &metadata.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("paymentitem", &paymentitem.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("permissionName", &permission_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("promote", &promote.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("rank", &rank.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("remove", &remove.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("tags", &tags.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameClanCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_clan_disband(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameClanDisbandError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/clan/disband", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameClanDisbandError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_clan_find(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, count: i32, join_policies: i32, last_call_time: &str, name: &str, session_id: &str, start: i32, tags: &str) -> Result<(), Error<GameClanFindError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/clan/find", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("count", &count.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("joinPolicies", &join_policies.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("start", &start.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("tags", &tags.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameClanFindError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_clan_get_clan(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, names: &str, session_id: &str) -> Result<(), Error<GameClanGetClanError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/clan/getClan", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("names", &names.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameClanGetClanError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_clan_get_clan_info_full(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, name: &str, session_id: &str) -> Result<(), Error<GameClanGetClanInfoFullError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/clan/getClanInfoFull", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("name", &name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameClanGetClanInfoFullError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_clan_update(configuration: &configuration::Configuration, call_num: i32, clan_list_id: i32, connect_id: &str, description: &str, icon: &str, join_policy: i32, last_call_time: &str, message_of_the_day: &str, metadata: serde_json::Value, session_id: &str, tags: &str) -> Result<(), Error<GameClanUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/clan/update", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("clanList_id", &clan_list_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("description", &description.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("icon", &icon.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("joinPolicy", &join_policy.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("messageOfTheDay", &message_of_the_day.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("metadata", &metadata.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("tags", &tags.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameClanUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_cloud_get_file_url_get(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, names: &str, session_id: &str) -> Result<(), Error<GameCloudGetFileUrlGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/cloud/getFileURL", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("names", &names.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameCloudGetFileUrlGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_cloud_get_file_url_post(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, names: &str, session_id: &str) -> Result<(), Error<GameCloudGetFileUrlPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/cloud/getFileURL", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("names", &names.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameCloudGetFileUrlPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_cloud_get_temp_credentials(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, key: &str) -> Result<(), Error<GameCloudGetTempCredentialsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/cloud/getTempCredentials", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("key", &key.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameCloudGetTempCredentialsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_community_event_get_available_community_events(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameCommunityEventGetAvailableCommunityEventsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/CommunityEvent/getAvailableCommunityEvents", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameCommunityEventGetAvailableCommunityEventsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_community_event_get_event_challenge_progress(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, event_id: i32, last_call_time: &str, session_id: &str) -> Result<(), Error<GameCommunityEventGetEventChallengeProgressError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/CommunityEvent/getEventChallengeProgress", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("event_id", &event_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameCommunityEventGetEventChallengeProgressError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_community_event_get_event_stats(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, event_id: i32, group_type: i32, last_call_time: &str, member_id: i32, session_id: &str) -> Result<(), Error<GameCommunityEventGetEventStatsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/CommunityEvent/getEventStats", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("event_id", &event_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("group_type", &group_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("member_id", &member_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameCommunityEventGetEventStatsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_invitation_cancel_invitation(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, gatheringid: i32, inviteeid: i32, last_call_time: &str, session_id: &str) -> Result<(), Error<GameInvitationCancelInvitationError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/invitation/cancelInvitation", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("gatheringid", &gatheringid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("inviteeid", &inviteeid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameInvitationCancelInvitationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_invitation_extend_invitation(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, gatheringid: i32, gatheringpassword: &str, inviteeid: i32, last_call_time: &str, session_id: &str) -> Result<(), Error<GameInvitationExtendInvitationError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/invitation/extendInvitation", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("gatheringid", &gatheringid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("gatheringpassword", &gatheringpassword.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("inviteeid", &inviteeid.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameInvitationExtendInvitationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_detach_items(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, item_charges: i32, item_ids: i32, item_locations: i32, last_call_time: &str, session_id: &str) -> Result<(), Error<GameItemDetachItemsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/detachItems", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemCharges", &item_charges.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemIDs", &item_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemLocations", &item_locations.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemDetachItemsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_get_inventory_by_profile_ids(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, profile_ids: i32) -> Result<(), Error<GameItemGetInventoryByProfileIdsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/getInventoryByProfileIDs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profileIDs", &profile_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemGetInventoryByProfileIdsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_get_item_bundle_items_json(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, signature: &str) -> Result<(), Error<GameItemGetItemBundleItemsJsonError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/getItemBundleItemsJson", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("signature", &signature.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemGetItemBundleItemsJsonError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_get_item_definitions_json(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, signature: &str) -> Result<(), Error<GameItemGetItemDefinitionsJsonError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/getItemDefinitionsJson", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("signature", &signature.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemGetItemDefinitionsJsonError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_get_item_loadouts(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameItemGetItemLoadoutsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/getItemLoadouts", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemGetItemLoadoutsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_get_item_prices(configuration: &configuration::Configuration, account_type: &str, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, country: &str, currency: &str, sale_version: i32) -> Result<(), Error<GameItemGetItemPricesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/getItemPrices", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("accountType", &account_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("country", &country.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("currency", &currency.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("saleVersion", &sale_version.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemGetItemPricesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_get_level_rewards_table_json(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, signature: &str) -> Result<(), Error<GameItemGetLevelRewardsTableJsonError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/getLevelRewardsTableJson", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("signature", &signature.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemGetLevelRewardsTableJsonError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_get_personalized_sale_items(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameItemGetPersonalizedSaleItemsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/getPersonalizedSaleItems", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemGetPersonalizedSaleItemsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_get_scheduled_sale_and_items(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, sale_type: i32) -> Result<(), Error<GameItemGetScheduledSaleAndItemsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/getScheduledSaleAndItems", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("saleType", &sale_type.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemGetScheduledSaleAndItemsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_move_charges(configuration: &configuration::Configuration, call_num: i32, charges: i32, connect_id: &str, deletes: i32, from_item_ids: i32, last_call_time: &str, session_id: &str, to_item_ids: i32) -> Result<(), Error<GameItemMoveChargesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/moveCharges", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("charges", &charges.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("deletes", &deletes.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("fromItemIDs", &from_item_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("toItemIDs", &to_item_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemMoveChargesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_move_item(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, item_ids: i32, item_location_ids: i32, last_call_time: &str, pos_ids: i32, session_id: &str, slot_ids: i32) -> Result<(), Error<GameItemMoveItemError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/moveItem", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemIDs", &item_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemLocationIDs", &item_location_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("posIDs", &pos_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("slotIDs", &slot_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemMoveItemError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_open_item_pack(configuration: &configuration::Configuration, call_num: i32, choices: i32, connect_id: &str, item_instance_id: i32, item_location_id: i32, last_call_time: &str, session_id: &str) -> Result<(), Error<GameItemOpenItemPackError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/openItemPack", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("choices", &choices.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemInstance_id", &item_instance_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemLocation_id", &item_location_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemOpenItemPackError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_sign_item(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, crc: i32, last_call_time: &str, session_id: &str) -> Result<(), Error<GameItemSignItemError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/signItems", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("crc", &crc.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemSignItemError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_item_update_item_attributes(configuration: &configuration::Configuration, attribute_keys: &str, attribute_values: &str, call_num: i32, connect_id: &str, item_instance_ids: i32, last_call_time: &str, session_id: &str, xp_gains: i32) -> Result<(), Error<GameItemUpdateItemAttributesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/item/updateItemAttributes", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("attributeKeys", &attribute_keys.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("attributeValues", &attribute_values.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemInstance_ids", &item_instance_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("xpGains", &xp_gains.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameItemUpdateItemAttributesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_get_available_leaderboards(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameLeaderboardGetAvailableLeaderboardsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getAvailableLeaderboards", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetAvailableLeaderboardsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_get_leaderboard(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, start: i32, count: i32, leaderboard_id: Option<i32>, sort_by: Option<i32>) -> Result<(), Error<GameLeaderboardGetLeaderboardError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getLeaderBoard", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_str) = leaderboard_id {
        local_var_req_builder = local_var_req_builder.query(&[("leaderboard_id", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("start", &start.to_string())]);
    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder = local_var_req_builder.query(&[("sortBy", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("count", &count.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetLeaderboardError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_get_party_stat(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, statsids: i32) -> Result<(), Error<GameLeaderboardGetPartyStatError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getPartyStat", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("statsids", &statsids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetPartyStatError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// TODO: No request documented in Wiki, guessed parameters
pub async fn game_leaderboard_get_personal_stat(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameLeaderboardGetPersonalStatError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getPersonalStat", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetPersonalStatError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_get_recent_match_history_get(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, profile_ids: i32) -> Result<(), Error<GameLeaderboardGetRecentMatchHistoryGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getRecentMatchHistory", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &profile_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetRecentMatchHistoryGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_get_recent_match_history_post(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, profile_ids: i32) -> Result<(), Error<GameLeaderboardGetRecentMatchHistoryPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getRecentMatchHistory", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &profile_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetRecentMatchHistoryPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_get_recent_match_single_player_history(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, profile_ids: i32) -> Result<(), Error<GameLeaderboardGetRecentMatchSinglePlayerHistoryError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getRecentMatchSinglePlayerHistory", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &profile_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetRecentMatchSinglePlayerHistoryError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_get_stat_groups_by_profile_ids(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, profileids: i32) -> Result<(), Error<GameLeaderboardGetStatGroupsByProfileIdsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getStatGroupsByProfileIDs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profileids", &profileids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetStatGroupsByProfileIdsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_get_stats_for_leaderboard_by_profile_name(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, profileids: i32, leaderboard_id: Option<i32>) -> Result<(), Error<GameLeaderboardGetStatsForLeaderboardByProfileNameError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/Leaderboard/getStatsForLeaderboardByProfileName", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_str) = leaderboard_id {
        local_var_req_builder = local_var_req_builder.query(&[("leaderboard_id", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("profileids", &profileids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardGetStatsForLeaderboardByProfileNameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_leaderboard_set_avatar_stat_values(configuration: &configuration::Configuration, avatar_stat_ids: i32, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str, update_types: i32, values: i32) -> Result<(), Error<GameLeaderboardSetAvatarStatValuesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/leaderboard/setAvatarStatValues", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("avatarStat_ids", &avatar_stat_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("updateTypes", &update_types.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("values", &values.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLeaderboardSetAvatarStatValuesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_login_logout(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameLoginLogoutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/login/logout", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLoginLogoutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_login_platform_login(configuration: &configuration::Configuration, account_type: &str, active_match_id: i32, alias: &str, app_id: i32, auth: &str, call_num: i32, client_lib_version: i32, connect_id: &str, country: &str, installation_type: &str, last_call_time: &str, mac_address: &str, major_version: &str, minor_version: i32, platform_user_id: i32, start_game_token: &str, sync_hash: i32, timeout_override: i32, language: Option<&str>, store_license_token: Option<&str>, title: Option<&str>) -> Result<(), Error<GameLoginPlatformLoginError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/login/platformlogin", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("accountType", &account_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("activeMatchId", &active_match_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("alias", &alias.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("appID", &app_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("auth", &auth.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("clientLibVersion", &client_lib_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("country", &country.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("installationType", &installation_type.to_string())]);
    if let Some(ref local_var_str) = language {
        local_var_req_builder = local_var_req_builder.query(&[("language", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("macAddress", &mac_address.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("majorVersion", &major_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("minorVersion", &minor_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("platformUserID", &platform_user_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("startGameToken", &start_game_token.to_string())]);
    if let Some(ref local_var_str) = store_license_token {
        local_var_req_builder = local_var_req_builder.query(&[("storeLicenseToken", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("syncHash", &sync_hash.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("timeoutOverride", &timeout_override.to_string())]);
    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLoginPlatformLoginError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_login_read_session(configuration: &configuration::Configuration, ack: i32, poll_num: i32, session_id: &str) -> Result<(), Error<GameLoginReadSessionError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/login/readSession", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("ack", &ack.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("pollNum", &poll_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameLoginReadSessionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_news_get_news(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameNewsGetNewsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/news/getNews", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameNewsGetNewsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_party_create_or_report_single_player(configuration: &configuration::Configuration, appbincrc: i32, call_num: i32, connect_id: &str, counters_zip: &str, create_match_key: i32, datacrc: i32, is_complete: i32, item_updates: i32, last_call_time: &str, mapname: &str, match_key: &str, match_type_id: i32, mod_dll_checksum: i32, mod_dll_file: &str, mod_name: &str, mod_version: &str, options: &str, race_ids: i32, results: i32, session_id: &str, slot_info: &str, team_ids: i32, version_flags: i32, xp_gained: i32) -> Result<(), Error<GamePartyCreateOrReportSinglePlayerError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/party/createOrReportSinglePlayer", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("appbincrc", &appbincrc.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("countersZip", &counters_zip.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("createMatchKey", &create_match_key.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("datacrc", &datacrc.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("isComplete", &is_complete.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemUpdates", &item_updates.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("mapname", &mapname.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchKey", &match_key.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("matchTypeID", &match_type_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLChecksum", &mod_dll_checksum.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modDLLFile", &mod_dll_file.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modName", &mod_name.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("modVersion", &mod_version.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("options", &options.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("race_ids", &race_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("results", &results.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("slotInfo", &slot_info.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("teamIDs", &team_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("versionFlags", &version_flags.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("xpGained", &xp_gained.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GamePartyCreateOrReportSinglePlayerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_party_finalize_replay_upload(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, error_string: &str, finalize_result: i32, is_single_player: i32, last_call_time: &str, match_id: i32, session_id: &str, size: i32, url: &str) -> Result<(), Error<GamePartyFinalizeReplayUploadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/party/finalizeReplayUpload", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("errorString", &error_string.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("finalizeResult", &finalize_result.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("isSinglePlayer", &is_single_player.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("match_id", &match_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("size", &size.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("url", &url.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GamePartyFinalizeReplayUploadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_party_peer_add(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, match_id: i32, profile_ids: i32, race_ids: i32, session_id: &str, stat_group_ids: i32, team_ids: i32) -> Result<(), Error<GamePartyPeerAddError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/party/peerAdd", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("match_id", &match_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &profile_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("race_ids", &race_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("statGroup_ids", &stat_group_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("teamIDs", &team_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GamePartyPeerAddError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_party_peer_update(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, is_non_participants: i32, last_call_time: &str, match_id: i32, profile_ids: i32, race_ids: i32, session_id: &str, team_ids: i32) -> Result<(), Error<GamePartyPeerUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/party/peerUpdate", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("isNonParticipants", &is_non_participants.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("match_id", &match_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &profile_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("race_ids", &race_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("teamIDs", &team_ids.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GamePartyPeerUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_party_report_match(configuration: &configuration::Configuration, call_num: i32, check_sums: i32, connect_id: &str, counters_zip: &str, item_updates: i32, last_call_time: &str, match_id: i32, profile_ids: i32, race_ids: i32, results: i32, session_id: &str, simplayer_ids: i32, team_ids: i32, xp_gained: i32) -> Result<(), Error<GamePartyReportMatchError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/party/reportMatch", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("checkSums", &check_sums.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("countersZip", &counters_zip.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("itemUpdates", &item_updates.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("match_id", &match_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("profile_ids", &profile_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("race_ids", &race_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("results", &results.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("simplayerIDs", &simplayer_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("teamIDs", &team_ids.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("xpGained", &xp_gained.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GamePartyReportMatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_party_send_match_chat(configuration: &configuration::Configuration, broadcast: i32, call_num: i32, connect_id: &str, from_profile_id: i32, last_call_time: &str, match_id: i32, message: &str, message_type_id: i32, session_id: &str, to_profile_id: i32) -> Result<(), Error<GamePartySendMatchChatError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/party/sendMatchChat", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("broadcast", &broadcast.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("from_profile_id", &from_profile_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("match_id", &match_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("message", &message.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("messageTypeID", &message_type_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("to_profile_id", &to_profile_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GamePartySendMatchChatError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_playerreport_report_user(configuration: &configuration::Configuration, call_num: i32, comment: &str, connect_id: &str, last_call_time: &str, metadata: serde_json::Value, report_reason: i32, report_type: i32, reportee_profile_id: i32, session_id: &str) -> Result<(), Error<GamePlayerreportReportUserError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/playerreport/reportuser", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("comment", &comment.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("metadata", &metadata.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("reportReason", &report_reason.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("reportType", &report_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("reportee_profile_id", &reportee_profile_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GamePlayerreportReportUserError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_relationship_clear_relationship(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, relation_type: i32, session_id: &str, target_profile_id: i32) -> Result<(), Error<GameRelationshipClearRelationshipError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/relationship/clearRelationship", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("relationType", &relation_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("targetProfileID", &target_profile_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameRelationshipClearRelationshipError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_relationship_get_presence_data(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameRelationshipGetPresenceDataError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/relationship/getPresenceData", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameRelationshipGetPresenceDataError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_relationship_get_relationships(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, session_id: &str) -> Result<(), Error<GameRelationshipGetRelationshipsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/relationship/getRelationships", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameRelationshipGetRelationshipsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_relationship_ignore(configuration: &configuration::Configuration, blocklevel: i32, call_num: i32, connect_id: &str, last_call_time: &str, relation_type: i32, session_id: &str, target_profile_id: i32) -> Result<(), Error<GameRelationshipIgnoreError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/relationship/ignore", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("blocklevel", &blocklevel.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("relationType", &relation_type.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("targetProfileID", &target_profile_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameRelationshipIgnoreError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_relationship_set_presence(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, presence_id: i32, session_id: &str) -> Result<(), Error<GameRelationshipSetPresenceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/relationship/setPresence", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("presence_id", &presence_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameRelationshipSetPresenceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 
pub async fn game_relationship_set_presence_property(configuration: &configuration::Configuration, call_num: i32, connect_id: &str, last_call_time: &str, presence_property_def_id: i32, session_id: &str, value: i32) -> Result<(), Error<GameRelationshipSetPresencePropertyError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/game/relationship/setPresenceProperty", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("callNum", &call_num.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("connect_id", &connect_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("lastCallTime", &last_call_time.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("presencePropertyDef_id", &presence_property_def_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("sessionID", &session_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("value", &value.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<GameRelationshipSetPresencePropertyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

